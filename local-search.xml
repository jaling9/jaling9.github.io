<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo 自定义字体方法</title>
    <link href="/2022/11/19/hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93%E6%96%B9%E6%B3%95/"/>
    <url>/2022/11/19/hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>可使用在线字体和本地字体。</p>          </div><ul><li>找到fluid文件夹下的source&#x2F;css目录,新建一个custom_css.css文件，里面配置字体风格，类似：</li></ul><figure><div class="code-wrapper"><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">html,body,header,.markdown-body</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Verdana<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><ul><li>找到_config.fluid.yml配置文件，引入custom.css目录即可。</li></ul>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>技术导航</title>
    <link href="/2022/11/16/%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%88%AA/"/>
    <url>/2022/11/16/%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%88%AA/</url>
    
    <content type="html"><![CDATA[<h3 id="👇-Java语言相关"><a href="#👇-Java语言相关" class="headerlink" title="👇 Java语言相关"></a>👇 Java语言相关</h3><ul><li>Java 学习路线: <a href="https://www.pdai.tech/md/outline/x-outline.html">https://www.pdai.tech/md/outline/x-outline.html</a></li><li>Java 入门教程: <a href="https://www.liaoxuefeng.com/wiki/1252599548343744">https://www.liaoxuefeng.com/wiki/1252599548343744</a></li><li>Jvm 手册: <a href="http://www.ityouknow.com/java.html">http://www.ityouknow.com/java.html</a></li><li>Dubbo手册: <a href="https://dubbo.apache.org/zh/docs/">https://dubbo.apache.org/zh/docs/</a>)</li><li>Netty: <a href="https://netty.io/wiki/index.html">https://netty.io/wiki/index.html</a>)</li><li>Java NIO 教程: <a href="http://www.ityouknow.com/java.html">http://www.ityouknow.com/java.html</a></li><li>Spring 实战: <a href="https://potoyang.gitbook.io/spring-in-action-v5/">https://potoyang.gitbook.io/spring-in-action-v5/</a></li><li>Spring Boot 手册: <a href="http://www.ityouknow.com/spring-boot.html">http://www.ityouknow.com/spring-boot.html</a></li><li>Spring Cloud 手册: <a href="http://www.ityouknow.com/spring-cloud.html">http://www.ityouknow.com/spring-cloud.html</a></li><li>Spring Data JPA - 参考文档: <a href="https://www.springcloud.cc/spring-data-jpa.html">https://www.springcloud.cc/spring-data-jpa.html</a></li><li>Apache Shiro 中文文档: <a href="https://www.docs4dev.com/docs/zh/apache-shiro/1.5.3/reference/introduction.html">https://www.docs4dev.com/docs/zh/apache-shiro/1.5.3/reference/introduction.html</a></li><li>Netty 4.x 用户指南: <a href="https://waylau.com/netty-4-user-guide/">https://waylau.com/netty-4-user-guide/</a></li><li>MyBatis中文文档: <a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></li><li>Tomcat 8 权威指南: <a href="https://wiki.jikexueyuan.com/project/tomcat/">https://wiki.jikexueyuan.com/project/tomcat/</a></li></ul><h3 id="👉-Python语言相关"><a href="#👉-Python语言相关" class="headerlink" title="👉 Python语言相关"></a>👉 Python语言相关</h3><ul><li>Python 零基础入门: <a href="http://www.ityouknow.com/python.html">http://www.ityouknow.com/python.html</a></li><li>Python CookBook 中文版: <a href="https://www.kancloud.cn/kancloud/python3-cookbook">https://www.kancloud.cn/kancloud/python3-cookbook</a></li><li>Python进阶: <a href="https://docs.pythontab.com/interpy/">https://docs.pythontab.com/interpy/</a></li><li>Django 教程: <a href="https://docs.djangoproject.com/zh-hans/3.2//">https://docs.djangoproject.com/zh-hans/3.2//</a></li><li>Flask 教程: <a href="http://docs.jinkan.org/docs/flask/quickstart.html#quickstart">http://docs.jinkan.org/docs/flask/quickstart.html#quickstart</a></li><li>Scrapy 教程: <a href="https://www.osgeo.cn/scrapy/index.html">https://www.osgeo.cn/scrapy/index.html</a></li></ul><h3 id="🖐-其他编程语言文档"><a href="#🖐-其他编程语言文档" class="headerlink" title="🖐 其他编程语言文档"></a>🖐 其他编程语言文档</h3><ul><li>C 语言教程: <a href="https://www.nowcoder.com/tutorial/10002/8f7c3e0e7efd441d8f7c9c8d43c2a0f4">https://www.nowcoder.com/tutorial/10002/8f7c3e0e7efd441d8f7c9c8d43c2a0f4</a></li><li>C++ 学习教程（中）: <a href="https://www.w3cschool.cn/cpp/">https://www.w3cschool.cn/cpp/</a></li><li>Laravel 8 中文教程: <a href="https://learnku.com/docs/laravel/8.x/releases/9351">https://learnku.com/docs/laravel/8.x/releases/9351</a></li><li>Go 语言教程: <a href="http://www.topgoer.com/">http://www.topgoer.com/</a></li><li>Go Web 编程: <a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md">https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md</a></li><li>PHP 教程: <a href="https://phpbestpractices.justjavac.com/#">https://phpbestpractices.justjavac.com/#</a></li><li>PHP 开发者实践: <a href="https://ryancao.gitbooks.io/php-developer-prepares/content/">https://ryancao.gitbooks.io/php-developer-prepares/content/</a></li><li>ThinkPHP 教程: <a href="https://www.kancloud.cn/agdholo/thinkphp">https://www.kancloud.cn/agdholo/thinkphp</a></li><li>Visual Basic 教程: <a href="https://docs.microsoft.com/zh-cn/visualstudio/get-started/visual-basic/?view=vs-2019">https://docs.microsoft.com/zh-cn/visualstudio/get-started/visual-basic/?view=vs-2019</a></li><li>R语言教程: <a href="https://www.math.pku.edu.cn/teachers/lidf/docs/Rbook/html/_Rbook/intro.html">https://www.math.pku.edu.cn/teachers/lidf/docs/Rbook/html/_Rbook/intro.html</a></li><li>Swift 教程: <a href="https://swift.bootcss.com/">https://swift.bootcss.com/</a></li><li>Ruby 教程: <a href="https://www.ruby-lang.org/zh_cn/documentation/">https://www.ruby-lang.org/zh_cn/documentation/</a></li></ul><h3 id="👨🔧-开发工具必备"><a href="#👨🔧-开发工具必备" class="headerlink" title="👨🔧 开发工具必备"></a>👨🔧 开发工具必备</h3><ul><li>Git 学习手册: <a href="https://git-scm.com/book/zh/v2">https://git-scm.com/book/zh/v2</a></li><li>Git互动教程: <a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></li><li>SQL 教程: <a href="https://www.kancloud.cn/wizardforcel/w3school-sql/93915">https://www.kancloud.cn/wizardforcel/w3school-sql/93915</a></li><li>LeetCode 刷题手册: <a href="https://books.halfrost.com/leetcode/ChapterOne/">https://books.halfrost.com/leetcode/ChapterOne/</a></li><li>Nginx 极简教程: <a href="https://dunwu.github.io/nginx-tutorial/#/nginx-quickstart">https://dunwu.github.io/nginx-tutorial/#/nginx-quickstart</a></li><li>图说设计模式: <a href="https://design-patterns.readthedocs.io/zh_CN/latest/index.html">https://design-patterns.readthedocs.io/zh_CN/latest/index.html</a></li><li>JSON 手册: <a href="http://www.dingding.team/book/json/">http://www.dingding.team/book/json/</a></li><li>IDEA 使用教程: <a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial">https://github.com/judasn/IntelliJ-IDEA-Tutorial</a></li><li>Docker 教程: <a href="https://yeasy.gitbook.io/docker_practice/">https://yeasy.gitbook.io/docker_practice/</a></li></ul><h3 id="👩🎨-大数据相关"><a href="#👩🎨-大数据相关" class="headerlink" title="👩🎨 大数据相关"></a>👩🎨 大数据相关</h3><ul><li>Apache 教程: <a href="https://www.yiibai.com/apache_http/">https://www.yiibai.com/apache_http/</a></li><li>hadoop 文档: <a href="https://hadoop.apache.org/docs/r1.0.4/cn/index.html">https://hadoop.apache.org/docs/r1.0.4/cn/index.html</a></li><li>Hive 文档: <a href="https://hive.apache.org/">https://hive.apache.org/</a></li><li>HBase 文档: <a href="https://blogs.apache.org/hbase/">https://blogs.apache.org/hbase/</a></li><li>Impala 文档: <a href="https://impala.apache.org/">https://impala.apache.org/</a></li><li>Oozie 调度框架文档: <a href="https://oozie.apache.org/">https://oozie.apache.org/</a></li><li>Apache Sentry: <a href="https://sentry.apache.org/">https://sentry.apache.org/</a></li><li>ZooKeeper: <a href="https://github.com/apache/zookeeper/">https://github.com/apache/zookeeper/</a></li><li>Spark 官方文档: <a href="https://spark.apache.org/">https://spark.apache.org/</a></li><li>Spark 教程: <a href="https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/">https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/</a></li><li>Flink 官方文档: <a href="https://flink.apache.org/">https://flink.apache.org/</a></li></ul><h3 id="👨✈️-存储相关"><a href="#👨✈️-存储相关" class="headerlink" title="👨✈️ 存储相关"></a>👨✈️ 存储相关</h3><ul><li>Redis 中文教程: <a href="https://www.redis.com.cn/tutorial.html">https://www.redis.com.cn/tutorial.html</a></li><li>memcached 教程: <a href="https://www.twle.cn/l/yufei/memcached/memcached-basic-index.html">https://www.twle.cn/l/yufei/memcached/memcached-basic-index.html</a></li><li>Mysql 简单教程: <a href="https://segmentfault.com/a/1190000006876419">https://segmentfault.com/a/1190000006876419</a></li><li>MongoDB 教程: <a href="https://www.mongodb.org.cn/tutorial/">https://www.mongodb.org.cn/tutorial/</a></li><li>Elasticsearch 教程: <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/getting-started.html">https://www.elastic.co/guide/cn/elasticsearch/guide/current/getting-started.html</a></li><li>OpenResty 最佳实践: <a href="https://moonbingbing.gitbooks.io/openresty-best-practices/content/">https://moonbingbing.gitbooks.io/openresty-best-practices/content/</a></li></ul><h3 id="🙆♂️-Linux-相关"><a href="#🙆♂️-Linux-相关" class="headerlink" title="🙆♂️ Linux 相关"></a>🙆♂️ Linux 相关</h3><ul><li>鸟哥的 Linux 私房菜: <a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php">http://cn.linux.vbird.org/linux_basic/linux_basic.php</a></li><li>Bash Shell 教程: <a href="https://wangdoc.com/bash/intro.html">https://wangdoc.com/bash/intro.html</a></li><li>Shell 教程: <a href="http://billie66.github.io/TLCL/book/index.html">http://billie66.github.io/TLCL/book/index.html</a></li><li>HTTP 2.0 翻译: <a href="https://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1###">https://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1###</a></li></ul><h3 id="🤦♂️-移动端手册"><a href="#🤦♂️-移动端手册" class="headerlink" title="🤦♂️ 移动端手册"></a>🤦♂️ 移动端手册</h3><ul><li>鸿蒙OS 手册: <a href="https://developer.harmonyos.com/cn/documentation/">https://developer.harmonyos.com/cn/documentation/</a></li><li>Android 手册: <a href="https://developer.android.com/guide?hl=zh-cn">https://developer.android.com/guide?hl=zh-cn</a></li><li>IOS 手册: <a href="https://developer.apple.com/cn/documentation/">https://developer.apple.com/cn/documentation/</a></li><li>微信小程序手册: <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">https://developers.weixin.qq.com/miniprogram/dev/framework/</a></li><li>React Native 手册: <a href="https://reactnative.cn/docs/getting-started">https://reactnative.cn/docs/getting-started</a></li><li>Flutter 手册: <a href="https://flutter.cn/docs">https://flutter.cn/docs</a></li><li>MUI 手册: <a href="https://dev.dcloud.net.cn/mui/">https://dev.dcloud.net.cn/mui/</a></li><li>WeUI 手册: <a href="https://weui.io/">https://weui.io/</a></li><li>VUX 手册: <a href="https://doc.vux.li/zh-CN/">https://doc.vux.li/zh-CN/</a></li><li>FrozenUI 手册: <a href="http://frozenui.github.io/getting-started">http://frozenui.github.io/getting-started</a></li><li>Cube-UI 手册: <a href="https://didi.github.io/cube-ui/#/zh-CN/docs/introduction">https://didi.github.io/cube-ui/#/zh-CN/docs/introduction</a></li></ul><h3 id="💇♂️-前端手册"><a href="#💇♂️-前端手册" class="headerlink" title="💇♂️ 前端手册"></a>💇♂️ 前端手册</h3><ul><li>Html 教程: <a href="https://developer.mozilla.org/zh-CN/docs/learn/HTML">https://developer.mozilla.org/zh-CN/docs/learn/HTML</a></li><li>JS 教程: <a href="https://developer.mozilla.org/zh-CN/docs/learn/HTML">https://developer.mozilla.org/zh-CN/docs/learn/HTML</a></li><li>CSS参考手册: <a href="http://css.doyoe.com/">http://css.doyoe.com/</a></li><li>jQuery 操作手册: <a href="https://www.jquery123.com/">https://www.jquery123.com/</a></li><li>Bootstrap 操作手册: <a href="https://v4.bootcss.com/docs/getting-started/introduction/">https://v4.bootcss.com/docs/getting-started/introduction/</a></li><li>Vue.js手册: <a href="https://v3.cn.vuejs.org/guide/introduction.html">https://v3.cn.vuejs.org/guide/introduction.html</a></li><li>React教程: <a href="https://zh-hans.reactjs.org/tutorial/tutorial.html">https://zh-hans.reactjs.org/tutorial/tutorial.html</a></li><li>AngularJS教程: <a href="https://www.angularjs.net.cn/tutorial/">https://www.angularjs.net.cn/tutorial/</a></li><li>七天学会NodeJS: <a href="http://nqdeng.github.io/7-days-nodejs/">http://nqdeng.github.io/7-days-nodejs/</a></li><li>Vue cli 教程: <a href="https://cli.vuejs.org/zh/guide/">https://cli.vuejs.org/zh/guide/</a></li><li>Angular 手册: <a href="https://angular.cn/docs">https://angular.cn/docs</a></li><li>ES6 教程: <a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></li></ul><h3 id="👇-转换工具"><a href="#👇-转换工具" class="headerlink" title="👇 转换工具"></a>👇 转换工具</h3><ul><li>时间戳转换: <a href="https://tool.lu/timestamp/">https://tool.lu/timestamp/</a></li><li>图片base64编码: <a href="https://tool.lu/base64image/">https://tool.lu/base64image/</a></li><li>进制转换: <a href="https://tool.lu/hexconvert/">https://tool.lu/hexconvert/</a></li></ul><h3 id="🤠-代码格式化工具"><a href="#🤠-代码格式化工具" class="headerlink" title="🤠 代码格式化工具"></a>🤠 代码格式化工具</h3><ul><li>SQL格式转换: <a href="https://tool.lu/sql/">https://tool.lu/sql/</a></li><li>Json格式转换: <a href="https://tool.lu/json/">https://tool.lu/json/</a></li><li>Java格式化: <a href="https://tool.oschina.net/codeformat/java">https://tool.oschina.net/codeformat/java</a></li><li>PHP格式化: <a href="https://tool.lu/php/">https://tool.lu/php/</a></li><li>Python格式化: <a href="https://tool.lu/pyc/">https://tool.lu/pyc/</a></li><li>Html格式转换: <a href="https://tool.chinaz.com/tools/jsformat.aspx">https://tool.chinaz.com/tools/jsformat.aspx</a></li><li>Js格式转换: <a href="https://tool.chinaz.com/tools/jsformat.aspx">https://tool.chinaz.com/tools/jsformat.aspx</a></li><li>CSS格式转换: <a href="https://tool.chinaz.com/Tools/CssFormat.aspx">https://tool.chinaz.com/Tools/CssFormat.aspx</a></li><li>Xml格式转换: <a href="https://tool.lu/xml/">https://tool.lu/xml/</a></li></ul><h3 id="😍-其他常用工具"><a href="#😍-其他常用工具" class="headerlink" title="😍 其他常用工具"></a>😍 其他常用工具</h3><ul><li>在线文本对比: <a href="https://text-compare.com/zh-hans/">https://text-compare.com/zh-hans/</a></li><li>正则表达式测试: <a href="https://tool.oschina.net/regex/">https://tool.oschina.net/regex/</a></li><li>SQL工具: <a href="https://tool.lu/sql/">https://tool.lu/sql/</a></li><li>加密解密: <a href="https://tool.oschina.net/encrypt">https://tool.oschina.net/encrypt</a></li><li>Cron查询: <a href="https://www.matools.com/cron/">https://www.matools.com/cron/</a></li><li>二维码制作工具: <a href="https://cli.im/">https://cli.im/</a></li><li>IP地址查询: <a href="https://tool.lu/ip/">https://tool.lu/ip/</a></li><li>下载链接转换工具: <a href="https://tool.lu/urlconvert/">https://tool.lu/urlconvert/</a></li><li>curl命令转代码: <a href="https://tool.lu/curl/">https://tool.lu/curl/</a></li><li>字数统计: <a href="https://www.eteste.com/">https://www.eteste.com/</a></li><li>数字大写转换器: <a href="https://tool.gaodun.com/rmb.html">https://tool.gaodun.com/rmb.html</a></li><li>颜色转化器: <a href="https://www.sioe.cn/yingyong/yanse-rgb-16/">https://www.sioe.cn/yingyong/yanse-rgb-16/</a></li><li>在线代码测试: <a href="https://tool.lu/coderunner/">https://tool.lu/coderunner/</a></li></ul><h3 id="🤣-技术研发社区"><a href="#🤣-技术研发社区" class="headerlink" title="🤣 技术研发社区"></a>🤣 技术研发社区</h3><ul><li>博客园: <a href="https://www.cnblogs.com/">https://www.cnblogs.com</a></li><li>掘金: <a href="https://juejin.im/">https://juejin.im</a></li><li>开源中国: <a href="https://www.oschina.net/">https://www.oschina.net</a></li><li>InfoQ: <a href="https://xie.infoq.cn/">https://xie.infoq.cn</a></li><li>51CTO: <a href="https://www.51cto.com/">https://www.51cto.com</a></li><li>腾讯云社区: <a href="https://cloud.tencent.com/developer">https://cloud.tencent.com/developer</a></li><li>阿里云社区: <a href="https://developer.aliyun.com/">https://developer.aliyun.com</a></li><li>华为云社区: <a href="https://bbs.huaweicloud.com/community/">https://bbs.huaweicloud.com/community/</a></li><li>SF思否: <a href="https://segmentfault.com/">https://segmentfault.com</a></li><li>CSDN: <a href="https://www.csdn.net/">https://www.csdn.net</a></li><li>Golang中文社区: <a href="https://studygolang.com/">https://studygolang.com</a></li><li>开发者头条: <a href="https://toutiao.io/">https://toutiao.io</a></li><li>StackOverflow: <a href="https://stackoverflow.com/">https://stackoverflow.com</a></li><li>ChinaUnix: <a href="http://www.chinaunix.net/">http://www.chinaunix.net</a></li><li>简书: <a href="https://www.jianshu.com/">https://www.jianshu.com</a></li></ul><h3 id="🤡-开发工具大全"><a href="#🤡-开发工具大全" class="headerlink" title="🤡 开发工具大全"></a>🤡 开发工具大全</h3><ul><li>IntelliJ IDEA: <a href="https://www.jetbrains.com/idea">https://www.jetbrains.com/idea</a></li><li>VS Code: <a href="https://code.visualstudio.com/">https://code.visualstudio.com</a></li><li>Mac破解应用: <a href="https://xclient.info/">https://xclient.info</a></li><li>IDEA 破解: <a href="http://itmooc.tech/">http://itmooc.tech</a></li><li>Eclipse: <a href="https://www.eclipse.org/downloads">https://www.eclipse.org/downloads</a></li><li>Pycharm: <a href="https://www.jetbrains.com/pycharm">https://www.jetbrains.com/pycharm</a></li><li>Sublime Text: <a href="https://www.sublimetext.com/">https://www.sublimetext.com</a></li><li>Nodepad++: <a href="https://notepad-plus.en.softonic.com/">https://notepad-plus.en.softonic.com</a></li><li>EditPlus: <a href="https://www.editplus.com/download.html">https://www.editplus.com/download.html</a></li><li>atom: <a href="https://atom.io/">https://atom.io</a></li><li>WebStorm: <a href="https://www.jetbrains.com/webstorm">https://www.jetbrains.com/webstorm</a></li><li>secureCRT\u0026FX: <a href="https://www.vandyke.com/download/index.html">https://www.vandyke.com/download/index.html</a></li><li>Navicat: <a href="https://www.navicat.com.cn/download/navicat-premium">https://www.navicat.com.cn/download/navicat-premium</a></li><li>DBeaver: <a href="https://dbeaver.io/">https://dbeaver.io</a></li><li>Postman: <a href="https://www.postman.com/downloads">https://www.postman.com/downloads</a></li><li>ApiPost: <a href="https://www.apipost.cn/download.html">https://www.apipost.cn/download.html</a></li><li>DataGrip: <a href="https://www.jetbrains.com/datagrip">https://www.jetbrains.com/datagrip</a></li><li>studio3t: <a href="https://studio3t.com/download">https://studio3t.com/download</a></li><li>Redis Desktop Manager: <a href="https://rdm.dev/">https://rdm.dev</a></li><li>Another Redis Desktop Manager: <a href="https://github.com/qishibo/AnotherRedisDesktopManager">https://github.com/qishibo/AnotherRedisDesktopManager</a></li><li>Fiddler: <a href="https://www.telerik.com/download/fiddler">https://www.telerik.com/download/fiddler</a></li><li>Beyond Compare: <a href="https://www.scootersoftware.com/download.php">https://www.scootersoftware.com/download.php</a></li><li>FinalShell: <a href="https://www.hostbuf.com/t/988.html">https://www.hostbuf.com/t/988.html</a></li><li>XMind: <a href="https://www.xmind.cn/download">https://www.xmind.cn/download</a></li><li>SnipPaste: <a href="https://www.snipaste.com/">https://www.snipaste.com</a></li></ul><h3 id="🤔-文档记录工具"><a href="#🤔-文档记录工具" class="headerlink" title="🤔 文档记录工具"></a>🤔 文档记录工具</h3><ul><li>typora: <a href="https://typora.io/">https://typora.io/</a></li><li>语雀: <a href="https://www.yuque.com/">https://www.yuque.com</a></li><li>飞书: <a href="https://www.feishu.cn/">https://www.feishu.cn</a></li><li>石墨文档: <a href="https://shimo.im/">https://shimo.im</a></li><li>腾讯文档: <a href="https://docs.qq.com/">https://docs.qq.com</a></li><li>有道云笔记: <a href="https://note.youdao.com/web">https://note.youdao.com/web</a></li><li>金山文档: <a href="https://www.kdocs.cn/">https://www.kdocs.cn</a></li><li>印象笔记: <a href="https://www.yinxiang.com/">https://www.yinxiang.com/</a></li></ul><h3 id="😱-编程学习平台"><a href="#😱-编程学习平台" class="headerlink" title="😱 编程学习平台"></a>😱 编程学习平台</h3><ul><li>B站学习网: <a href="https://www.bilibili.com/">https://www.bilibili.com</a></li><li>中国大学MOOC(慕课）: <a href="https://www.icourse163.org/">https://www.icourse163.org</a></li><li>网易云课堂: <a href="https://study.163.com/">https://study.163.com</a></li><li>网易公开课: <a href="https://open.163.com/">https://open.163.com</a></li><li>码农教程: <a href="http://www.manongjc.com/">http://www.manongjc.com</a></li><li>菜鸟教程: <a href="https://www.runoob.com/">https://www.runoob.com</a></li><li>易百教程: <a href="https://www.yiibai.com/">https://www.yiibai.com</a></li><li>W3school: <a href="https://www.w3school.com.cn/">https://www.w3school.com.cn</a></li><li>慕课网: <a href="https://www.imooc.com/">https://www.imooc.com</a></li><li>Gitchat: <a href="https://gitbook.cn/">https://gitbook.cn</a></li><li>Bootstrap中文网: <a href="https://www.bootcss.com/">https://www.bootcss.com</a></li><li>GitHub: <a href="https://github.com/">https://github.com</a></li><li>Gitee: <a href="https://gitee.com/">https://gitee.com</a></li><li>SpringBoot中文导航: <a href="http://springboot.fun/">http://springboot.fun</a></li><li>SpringCloud中文导航: <a href="http://springcloud.fun/">http://springcloud.fun</a></li><li>技术博客: <a href="http://techblog.pub/">http://techblog.pub</a></li><li>coursera: <a href="https://www.coursera.org/">https://www.coursera.org</a></li><li>拉钩教育: <a href="https://kaiwu.lagou.com/">https://kaiwu.lagou.com</a></li><li>极客时间: <a href="https://time.geekbang.org/">https://time.geekbang.org</a></li><li>极客学院: <a href="https://wiki.jikexueyuan.com/">https://wiki.jikexueyuan.com</a></li><li>人工智能教程: <a href="https://www.captainai.net/puresmilex">https://www.captainai.net/puresmilex</a></li><li>百度前端技术学院: <a href="http://ife.baidu.com/">http://ife.baidu.com</a></li></ul><h3 id="🤤-刷题练习网站"><a href="#🤤-刷题练习网站" class="headerlink" title="🤤 刷题练习网站"></a>🤤 刷题练习网站</h3><ul><li>LeetCode: <a href="https://leetcode-cn.com/">https://leetcode-cn.com</a></li><li>牛客网: <a href="https://www.nowcoder.com/">https://www.nowcoder.com</a></li><li>LintCode: <a href="https://www.lintcode.com/">https://www.lintcode.com</a></li></ul><h3 id="😎-代码练习网站"><a href="#😎-代码练习网站" class="headerlink" title="😎 代码练习网站"></a>😎 代码练习网站</h3><ul><li>北京大学POJ: <a href="http://poj.org/">http://poj.org</a></li><li>AlgoMooc算法慕课网: <a href="https://www.algomooc.com/">https://www.algomooc.com</a></li><li>自学SQL网: <a href="http://xuesql.cn/">http://xuesql.cn</a></li><li>SQLZOO练习: <a href="https://sqlzoo.net/wiki/SQL_Tutorial/zh">https://sqlzoo.net/wiki/SQL_Tutorial/zh</a></li><li>赛码: <a href="http://www.acmcoder.com/#/practice/company">http://www.acmcoder.com/#/practice/company</a></li><li>UOJ: <a href="https://uoj.ac/">https://uoj.ac</a></li><li>Hihocoder: <a href="http://hihocoder.com/problemset">http://hihocoder.com/problemset</a></li><li>趣IT: <a href="https://www.funit.cn/">https://www.funit.cn</a></li></ul><h3 id="👩🎓-文档工具"><a href="#👩🎓-文档工具" class="headerlink" title="👩🎓 文档工具"></a>👩🎓 文档工具</h3><ul><li>typora: <a href="https://typora.io/">https://typora.io/</a></li><li>语雀: <a href="https://www.yuque.com/">https://www.yuque.com</a></li><li>飞书: <a href="https://www.feishu.cn/">https://www.feishu.cn</a></li><li>石墨文档: <a href="https://shimo.im/">https://shimo.im</a></li><li>腾讯文档: <a href="https://docs.qq.com/">https://docs.qq.com</a></li><li>有道云笔记: <a href="https://note.youdao.com/web">https://note.youdao.com/web</a></li><li>金山文档: <a href="https://www.kdocs.cn/">https://www.kdocs.cn</a></li><li>印象笔记: <a href="https://www.yinxiang.com/">https://www.yinxiang.com/</a></li><li>公众号: <a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a></li><li>文章同步助手: <a href="https://www.wechatsync.com/">https://www.wechatsync.com/</a></li></ul><h3 id="👨🚀-在线画图工具"><a href="#👨🚀-在线画图工具" class="headerlink" title="👨🚀 在线画图工具"></a>👨🚀 在线画图工具</h3><ul><li>Processon: <a href="https://www.processon.com/">https://www.processon.com</a></li><li>Draw.io: <a href="https://app.diagrams.net/">https://app.diagrams.net</a></li><li>思维导图mindline: <a href="http://www.mindline.cn/webapp">http://www.mindline.cn/webapp</a></li><li>Omnigraffle: <a href="https://www.omnigroup.com/download">https://www.omnigroup.com/download</a></li></ul><h3 id="🦸♂️-视频工具"><a href="#🦸♂️-视频工具" class="headerlink" title="🦸♂️ 视频工具"></a>🦸♂️ 视频工具</h3><ul><li>Videezy: <a href="https://www.videezy.com/">https://www.videezy.com/</a></li><li>Videovo: <a href="https://www.videvo.net/">https://www.videvo.net/</a></li><li>mixkit: <a href="https://mixkit.co/">https://mixkit.co/</a></li><li>distill: <a href="https://wedistill.io/">https://wedistill.io/</a></li></ul><h3 id="💃-图片（图像）处理"><a href="#💃-图片（图像）处理" class="headerlink" title="💃 图片（图像）处理"></a>💃 图片（图像）处理</h3><ul><li>图片处理（超级能耐）: <a href="https://www.iloveimg.com/zh-cn">https://www.iloveimg.com/zh-cn</a></li><li>pixabay: <a href="https://pixabay.com/zh/">https://pixabay.com/zh/</a></li><li>Unsplash: <a href="https://unsplash.com/">https://unsplash.com/</a></li><li>Pexels: <a href="https://www.pexels.com/zh-cn/">https://www.pexels.com/zh-cn/</a></li><li>Foodiesfeed : <a href="https://www.foodiesfeed.com/">https://www.foodiesfeed.com</a></li><li>CC零图片网: <a href="https://cc0.cn/">https://cc0.cn/</a></li><li>Logo神器: <a href="https://www.logosc.cn/so/">https://www.logosc.cn/so/</a></li><li>iconfont: <a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></li><li>字由: <a href="https://www.hellofont.cn/">https://www.hellofont.cn/</a></li><li>100font: <a href="https://www.100font.com/">https://www.100font.com/</a></li></ul><h3 id="👨🔧-音乐音频工具"><a href="#👨🔧-音乐音频工具" class="headerlink" title="👨🔧 音乐音频工具"></a>👨🔧 音乐音频工具</h3><ul><li>讯飞快读: <a href="https://www.ffkuaidu.com/">https://www.ffkuaidu.com/</a></li><li>audionautix: <a href="https://audionautix.com/">https://audionautix.com/</a></li><li>Freepd: <a href="https://freepd.com/">https://freepd.com/</a></li><li>耳聆网: <a href="https://www.ear0.com/">https://www.ear0.com/</a></li><li>Freesound: <a href="https://freesound.org/">https://freesound.org/</a></li><li>淘声网: <a href="https://www.tosound.com/">https://www.tosound.com/</a></li></ul><h3 id="💁-PDF免费工具"><a href="#💁-PDF免费工具" class="headerlink" title="💁 PDF免费工具"></a>💁 PDF免费工具</h3><ul><li>最实用PDF工具包: <a href="https://www.ilovepdf.com/zh-cn">https://www.ilovepdf.com/zh-cn</a></li><li>Light PDF: <a href="https://lightpdf.com/zh/">https://lightpdf.com/zh/</a></li><li>PDF格式转换: <a href="http://app.xunjiepdf.com/">http://app.xunjiepdf.com/</a></li></ul><h3 id="👨🔧-站长工具汇总"><a href="#👨🔧-站长工具汇总" class="headerlink" title="👨🔧 站长工具汇总"></a>👨🔧 站长工具汇总</h3><ul><li>站长之家: <a href="https://tool.chinaz.com/">https://tool.chinaz.com</a></li><li>百度统计: <a href="https://tongji.baidu.com/">https://tongji.baidu.com</a></li><li>网站排名: <a href="http://www.alexa.cn/">http://www.alexa.cn</a></li><li>友盟: <a href="https://www.umeng.com/web">https://www.umeng.com/web</a></li><li>阿里云ECS: <a href="https://www.aliyun.com/">https://www.aliyun.com/</a></li><li>腾讯云: <a href="https://curl.qcloud.com/Rqy4Deo2">https://curl.qcloud.com/Rqy4Deo2</a></li><li>华为云: <a href="https://www.huaweicloud.com/">https://www.huaweicloud.com</a></li><li>极客增长: <a href="https://yinliu.club/member/KeywordHot/index">https://yinliu.club/member/KeywordHot/index</a></li><li>二十次幂: <a href="https://www.cimidata.com/?refcode=PEyZMk">https://www.cimidata.com/?refcode=PEyZMk</a></li><li>大数据导航: <a href="http://hao.199it.com/">http://hao.199it.com</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL优化</title>
    <link href="/2022/11/15/MySQL%E4%BC%98%E5%8C%96/"/>
    <url>/2022/11/15/MySQL%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<blockquote><p>有情怀，有干货，微信搜索【<strong>三太子敖丙</strong>】关注这个不一样的程序员。</p><p>本文 <strong>GitHub</strong> <a href="https://link.juejin.cn/?target=https://github.com/AobingJava/JavaFamily" title="https://github.com/AobingJava/JavaFamily">github.com&#x2F;JavaFamily</a> 已收录，有一线大厂面试完整考点、资料以及我的系列文章。<br>原文链接:<a href="https://juejin.cn/post/6895507965899063310#heading-1">https://juejin.cn/post/6895507965899063310#heading-1</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这天我正在午休呢，公司DBA就把我喊醒了，说某库出现大量慢SQL，很快啊，很快，我还没反应过来，库就挂了，我心想现在的用户不讲武德啊，怎么在我睡觉的时候大量请求呢。</p><p>这是很常见的一个场景哈，因为很多业务开始数据量级不大，所以写sql的时候就没注意性能，等量级上去，很多业务就需要做调优了，在电商公司工作的这几年我也总结了不少，下面就分享给大家吧。</p><p>在代码开发过程中，我们都会遵循一些SQL开发规范去编写高质量SQL，来提高接口的Response Time(RT)，对一些核心接口要求RT在100ms以内甚至更低。</p><p>由于业务前期数据量比较小，基本都能满足这个要求，但随着业务量的增长，数据量也随之增加，对应接口的SQL耗时也在变长，直接影响了用户的体验，这时候就需要对SQL进行优化。</p><p>优化点主要包括SQL规范性检查，表结构索引检查，SQL优化案例分析，下面从这三方面结合实际案例聊聊如何优化SQL。</p><h2 id="SQL规范性检查"><a href="#SQL规范性检查" class="headerlink" title="SQL规范性检查"></a>SQL规范性检查</h2><p>每个公司都有自己的MySQL开发规范，基本上大同小异，这里罗列一些比较重要的，我工作期间经常接触的给大家。</p><h3 id="select检查"><a href="#select检查" class="headerlink" title="select检查"></a>select检查</h3><p><strong>UDF用户自定义函数</strong></p><p>SQL语句的select后面使用了自定义函数UDF，SQL返回多少行，那么UDF函数就会被调用多少次，这是非常影响性能的。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">#getOrderNo是用户自定义一个函数用户来根据order_sn来获取订单编号select id, payment_id, order_sn, getOrderNo(order_sn) from payment_transaction where status &#x3D; 1 and create_time between &#39;2020-10-01 10:00:00&#39; and &#39;2020-10-02 10:00:00&#39;;</code></pre></div></figure><p><strong>text类型检查</strong></p><p>如果select出现text类型的字段，就会消耗大量的网络和IO带宽，由于返回的内容过大超过max_allowed_packet设置会导致程序报错，需要评估谨慎使用。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">#表request_log的中content是text类型。select user_id, content, status, url, type from request_log where user_id &#x3D; 32121;</code></pre></div></figure><p><strong>group_concat谨慎使用</strong></p><p>gorup_concat是一个字符串聚合函数，会影响SQL的响应时间，如果返回的值过大超过了max_allowed_packet设置会导致程序报错。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select batch_id, group_concat(name) from buffer_batch where status &#x3D; 0 and create_time between &#39;2020-10-01 10:00:00&#39; and &#39;2020-10-02 10:00:00&#39;;</code></pre></div></figure><p><strong>内联子查询</strong></p><p>在select后面有子查询的情况称为内联子查询，SQL返回多少行，子查询就需要执行过多少次，严重影响SQL性能。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select id,(select rule_name from member_rule limit 1) as rule_name, member_id, member_type, member_name, status  from member_info m where status &#x3D; 1 and create_time between &#39;2020-09-02 10:00:00&#39; and &#39;2020-10-01 10:00:00&#39;;</code></pre></div></figure><h3 id="from检查"><a href="#from检查" class="headerlink" title="from检查"></a>from检查</h3><p><strong>表的链接方式</strong></p><p>在MySQL中不建议使用Left Join，即使ON过滤条件列索引，一些情况也不会走索引，导致大量的数据行被扫描，SQL性能变得很差，同时要清楚ON和Where的区别。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">SELECT a.member_id,a.create_time,b.active_time FROM operation_log a LEFT JOIN member_info b ON a.member_id &#x3D; b.member_id where  b.&#96;status&#96; &#x3D; 1and a.create_time between &#39;2020-10-01 00:00:00&#39; and &#39;2020-10-30 00:00:00&#39; limit 100, 0;</code></pre></div></figure><p><strong>子查询</strong></p><p>由于MySQL的基于成本的优化器CBO对子查询的处理能力比较弱，不建议使用子查询，可以改写成Inner Join。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select b.member_id,b.member_type, a.create_time,a.device_model from member_operation_log a inner join (select member_id,member_type from member_base_info where &#96;status&#96; &#x3D; 1and create_time between &#39;2020-10-01 00:00:00&#39; and &#39;2020-10-30 00:00:00&#39;) as b on a.member_id &#x3D; b.member_id;</code></pre></div></figure><h3 id="where检查"><a href="#where检查" class="headerlink" title="where检查"></a>where检查</h3><p><strong>索引列被运算</strong></p><p>当一个字段被索引，同时出现where条件后面，是不能进行任何运算，会导致索引失效。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">#device_no列上有索引，由于使用了ltrim函数导致索引失效select id, name , phone, address, device_no from users where ltrim(device_no) &#x3D; &#39;Hfs1212121&#39;;#balance列有索引,由于做了运算导致索引失效select account_no, balance from accounts where balance + 100 &#x3D; 10000 and status &#x3D; 1;</code></pre></div></figure><p><strong>类型转换</strong></p><p>对于Int类型的字段，传varchar类型的值是可以走索引，MySQL内部自动做了隐式类型转换；相反对于varchar类型字段传入Int值是无法走索引的，应该做到对应的字段类型传对应的值总是对的。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">#user_id是bigint类型，传入varchar值发生了隐式类型转换，可以走索引。select id, name , phone, address, device_no from users where user_id &#x3D; &#39;23126&#39;;#card_no是varchar(20)，传入int值是无法走索引select id, name , phone, address, device_no from users where card_no &#x3D; 2312612121;</code></pre></div></figure><p><strong>列字符集</strong></p><p>从MySQL 5.6开始建议所有对象字符集应该使用用utf8mb4，包括MySQL实例字符集，数据库字符集，表字符集，列字符集。避免在关联查询Join时字段字符集不匹配导致索引失效，同时目前只有utf8mb4支持emoji表情存储。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">character_set_server  &#x3D;  utf8mb4    #数据库实例字符集character_set_connection &#x3D; utf8mb4  #连接字符集character_set_database &#x3D; utf8mb4    #数据库字符集character_set_results &#x3D; utf8mb4     #结果集字符集</code></pre></div></figure><h3 id="group-by检查"><a href="#group-by检查" class="headerlink" title="group by检查"></a>group by检查</h3><p><strong>前缀索引</strong></p><p>group by后面的列有索引，索引可以消除排序带来的CPU开销，如果是前缀索引，是不能消除排序的。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">#device_no字段类型varchar(200)，创建了前缀索引。mysql&gt; alter table users add index idx_device_no(device_no(64));mysql&gt; select device_no, count(*) from users where create_time between &#39;2020-10-01 00:00:00&#39; and &#39;2020-10-30 00:00:00&#39; group by device_no;</code></pre></div></figure><p><strong>函数运算</strong></p><p>假设需要统计某月每天的新增用户量，参考如下SQL语句，虽然可以走create_time的索引，但是不能消除排序，可以考虑冗余一个字段stats_date date类型来解决这种问题。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select DATE_FORMAT(create_time, &#39;%Y-%m-%d&#39;), count(*) from users where create_time between &#39;2020-09-01 00:00:00&#39; and &#39;2020-09-30 23:59:59&#39; group by DATE_FORMAT(create_time, &#39;%Y-%m-%d&#39;);</code></pre></div></figure><h3 id="order-by检查"><a href="#order-by检查" class="headerlink" title="order by检查"></a>order by检查</h3><p><strong>前缀索引</strong></p><p>order by后面的列有索引，索引可以消除排序带来的CPU开销，如果是前缀索引，是不能消除排序的。</p><p><strong>字段顺序</strong></p><p>排序字段顺序，asc&#x2F;desc升降要跟索引保持一致，充分利用索引的有序性来消除排序带来的CPU开销。</p><h3 id="limit检查"><a href="#limit检查" class="headerlink" title="limit检查"></a>limit检查</h3><p><strong>limit m,n要慎重</strong></p><p>对于limit m, n分页查询，越往后面翻页即m越大的情况下SQL的耗时会越来越长，对于这种应该先取出主键id，然后通过主键id跟原表进行Join关联查询。</p><h2 id="表结构检查"><a href="#表结构检查" class="headerlink" title="表结构检查"></a>表结构检查</h2><h3 id="表-amp-列名关键字"><a href="#表-amp-列名关键字" class="headerlink" title="表&amp;列名关键字"></a>表&amp;列名关键字</h3><p>在数据库设计建模阶段，对表名及字段名设置要合理，不能使用MySQL的关键字，如desc, order, status, group等。同时建议设置lower_case_table_names &#x3D; 1表名不区分大小写。</p><h3 id="表存储引擎"><a href="#表存储引擎" class="headerlink" title="表存储引擎"></a>表存储引擎</h3><p>对于OLTP业务系统，建议使用InnoDB引擎获取更好的性能，可以通过参数default_storage_engine控制。</p><h3 id="AUTO-INCREMENT属性"><a href="#AUTO-INCREMENT属性" class="headerlink" title="AUTO_INCREMENT属性"></a>AUTO_INCREMENT属性</h3><p>建表的时候主键id带有AUTO_INCREMENT属性，而且AUTO_INCREMENT&#x3D;1，在InnoDB内部是通过一个系统全局变量dict_sys.row_id来计数，row_id是一个8字节的bigint unsigned，InnoDB在设计时只给row_id保留了6个字节的长度，这样row_id取值范围就是0到2^48 - 1，如果id的值达到了最大值，下一个值就从0开始继续循环递增，在代码中禁止指定主键id值插入。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">#新插入的id值会从10001开始，这是不对的，应该从1开始。create table booking( &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#39;主键id&#39;,......) engine &#x3D; InnoDB auto_increment &#x3D; 10000;#指定了id值插入，后续自增就会从该值开始+1，索引禁止指定id值插入。insert into booking(id, book_sn) values(1234551121, &#39;N12121&#39;);</code></pre></div></figure><h3 id="NOT-NULL属性"><a href="#NOT-NULL属性" class="headerlink" title="NOT NULL属性"></a>NOT NULL属性</h3><p>根据业务含义，尽量将字段都添加上NOT NULL DEFAULT VALUE属性，如果列值存储了大量的NULL，会影响索引的稳定性。</p><h3 id="DEFAULT属性"><a href="#DEFAULT属性" class="headerlink" title="DEFAULT属性"></a>DEFAULT属性</h3><p>在创建表的时候，建议每个字段尽量都有默认值，禁止DEFAULT NULL，而是对字段类型填充响应的默认值。</p><h3 id="COMMENT属性"><a href="#COMMENT属性" class="headerlink" title="COMMENT属性"></a>COMMENT属性</h3><p>字段的备注要能明确该字段的作用，尤其是某些表示状态的字段，要显式的写出该字段所有可能的状态数值以及该数值的含义。</p><h3 id="TEXT类型"><a href="#TEXT类型" class="headerlink" title="TEXT类型"></a>TEXT类型</h3><p>不建议使用Text数据类型，一方面由于传输大量的数据包可能会超过max_allowed_packet设置导致程序报错，另一方面表上的DML操作都会变的很慢，建议采用es或者对象存储OSS来存储和检索。</p><h2 id="索引检查"><a href="#索引检查" class="headerlink" title="索引检查"></a>索引检查</h2><h3 id="索引属性"><a href="#索引属性" class="headerlink" title="索引属性"></a>索引属性</h3><p>索引基数指的是被索引的列唯一值的个数，唯一值越多接近表的count(*)说明索引的选择率越高，通过索引扫描的行数就越少，性能就越高，例如主键id的选择率是100%，在MySQL中尽量所有的update都使用主键id去更新，因为id是聚集索引存储着整行数据，不需要回表，性能是最高的。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">mysql&gt; select count(*) from member_info;+----------+| count(*) |+----------+|   148416 |+----------+1 row in set (0.35 sec)mysql&gt; show index from member_base_info;+------------------+------------+----------------------------+--------------+-------------------+-----------+-------------+----------+--------+------+------------+---------+---------------+| Table            | Non_unique | Key_name                   | Seq_in_index | Column_name       | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |+------------------+------------+----------------------------+--------------+-------------------+-----------+-------------+----------+--------+------+------------+---------+---------------+| member_info |          0 | PRIMARY                    |            1 | id                | A         |      131088 | NULL     | NULL   |      | BTREE      |         |               || member_info |          0 | uk_member_id               |            1 | member_id         | A         |      131824 | NULL     | NULL   |      | BTREE      |         |               || member_info |          1 | idx_create_time            |            1 | create_time       | A         |        6770 | NULL     | NULL   |      | BTREE      |         |               |+------------------+------------+----------------------------+--------------+-------------------+-----------+-------------+----------+--------+------+------------+---------+---------------+#Table： 表名#Non_unique ：是否为unique index，0-是，1-否。#Key_name：索引名称#Seq_in_index：索引中的顺序号，单列索引-都是1；复合索引-根据索引列的顺序从1开始递增。#Column_name：索引的列名#Collation：排序顺序，如果没有指定asc&#x2F;desc，默认都是升序ASC。#Cardinality：索引基数-索引列唯一值的个数。#sub_part：前缀索引的长度；例如index (member_name(10)，长度就是10。#Packed：索引的组织方式，默认是NULL。#Null：YES:索引列包含Null值；&#39;&#39;:索引不包含Null值。#Index_type：默认是BTREE，其他的值FULLTEXT，HASH，RTREE。#Comment：在索引列中没有被描述的信息，例如索引被禁用。#Index_comment：创建索引时的备注。</code></pre></div></figure><h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>对于变长字符串类型varchar(m)，为了减少key_len，可以考虑创建前缀索引，但是前缀索引不能消除group by， order by带来排序开销。如果字段的实际最大值比m小很多，建议缩小字段长度。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">alter table member_info add index idx_member_name_part(member_name(10));</code></pre></div></figure><h3 id="复合索引顺序"><a href="#复合索引顺序" class="headerlink" title="复合索引顺序"></a>复合索引顺序</h3><p>有很多人喜欢在创建复合索引的时候，总以为前导列一定是唯一值多的列，例如索引index idx_create_time_status(create_time, status)，这个索引往往是无法命中，因为扫描的IO次数太多，总体的cost的比全表扫描还大，CBO最终的选择是走full table scan。</p><p>MySQL遵循的是索引最左匹配原则，对于复合索引，从左到右依次扫描索引列，到遇到第一个范围查询（&gt;&#x3D;, &gt;,&lt;, &lt;&#x3D;, between ….. and ….）就停止扫描，索引正确的索引顺序应该是index idx_status_create_time(status, create_time)。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select account_no, balance from accounts where status &#x3D; 1 and create_time between &#39;2020-09-01 00:00:00&#39; and &#39;2020-09-30 23:59:59&#39;;</code></pre></div></figure><h3 id="时间列索引"><a href="#时间列索引" class="headerlink" title="时间列索引"></a>时间列索引</h3><p>对于默认字段created_at(create_time)、updated_at(update_time)这种默认就应该创建索引，这一般来说是默认的规则。</p><h2 id="SQL优化案例"><a href="#SQL优化案例" class="headerlink" title="SQL优化案例"></a>SQL优化案例</h2><p>通过对慢查询的监控告警，经常发现一些SQL语句where过滤字段都有索引，但是由于SQL写法的问题导致索引失效，下面二个案例告诉大家如何通过SQL改写来查询。可以通过以下SQL来捞取最近5分钟的慢查询进行告警。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select CONCAT( &#39;# Time: &#39;, DATE_FORMAT(start_time, &#39;%y%m%d %H%i%s&#39;), &#39;\n&#39;, &#39;# User@Host: &#39;, user_host, &#39;\n&#39;, &#39;# Query_time: &#39;, TIME_TO_SEC(query_time),  &#39;  Lock_time: &#39;, TIME_TO_SEC(lock_time), &#39;  Rows_sent: &#39;, rows_sent, &#39;  Rows_examined: &#39;, rows_examined, &#39;\n&#39;, sql_text, &#39;;&#39; ) FROM mysql.slow_log where start_time between current_timestamp and date_add(CURRENT_TIMESTAMP,INTERVAL -5 MINUTE);</code></pre></div></figure><h3 id="慢查询SQL"><a href="#慢查询SQL" class="headerlink" title="慢查询SQL"></a>慢查询SQL</h3><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">| 2020-10-02 19:17:23 | w_mini_user[w_mini_user] @  [10.200.20.11] | 00:00:02   | 00:00:00  |         9 |        443117 | mini_user |              0 |         0 | 168387936 | select id,club_id,reason,status,type,created_time,invite_id,falg_admin,file_id from t_user_msg where 1 and (team_id in (3212) and app_id is not null) or (invite_id&#x3D;12395 or applicant_id&#x3D;12395) order by created_time desc limit 0,10; | 1219921665 |</code></pre></div></figure><p>从慢查询slow_log可以看到，执行时间2s，扫描了443117行，只返回了9行，这是不合理的。</p><h3 id="SQL分析"><a href="#SQL分析" class="headerlink" title="SQL分析"></a>SQL分析</h3><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">#原始SQL，频繁访问的接口，目前执行时间2s。select id,team_id,reason,status,type,created_time,invite_id,falg_admin,file_id from t_user_msg where 1 and (team_id in (3212) and app_id is not null) or (invite_id&#x3D;12395 or app_id&#x3D;12395) order by created_time desc limit 0,10;#执行计划+----+-------------+--------------+-------+---------------------------------+------------+---------+------+------+-------------+| id | select_type | table        | type  | possible_keys                   | key        | key_len | ref  | rows | Extra       |+----+-------------+--------------+-------+---------------------------------+------------+---------+------+------+-------------+|  1 | SIMPLE      | t_user_msg | index | invite_id,app_id,team_id | created_time | 5       | NULL |   10 | Using where |+----+-------------+--------------+-------+---------------------------------+------------+---------+------+------+-------------+1 row in set (0.00 sec)</code></pre></div></figure><p>从执行计划可以看到，表上有单列索引invite_id,app_id,team_id,created_time，走的是create_time的索引，而且type&#x3D;index索引全扫描，因为create_time没有出现在where条件后，只出现在order by后面，只能是type&#x3D;index，这也预示着表数据量越大该SQL越慢，我们期望是走三个单列索引invite_id，app_id，team_id，然后type&#x3D;index_merge操作。</p><p>按照常规思路，对于OR条件拆分两部分，分别进行分析。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select id, ……. from t_user_msg where 1 and  **(team_id in (3212) and app_id is not null)** order by created_time desc limit 0,10;</code></pre></div></figure><p>从执行计划看走的是team_id的索引，没有问题。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">| id | select_type | table        | type | possible_keys        | key     | key_len | ref   | rows | Extra                       |+----+-------------+--------------+------+----------------------+---------+---------+-------+------+-----------------------------+|  1 | SIMPLE      | t_user_msg | ref  | app_id,team_id | team_id | 8       | const |   30 | Using where; Using filesort |</code></pre></div></figure><p>再看另外一个sql语句：</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select id, ……. from t_user_msg where 1 and  **(invite_id&#x3D;12395 or app_id&#x3D;12395)** order by created_time desc limit 0,10;</code></pre></div></figure><p>从执行计划上看，分别走的是invite_id,app_id的单列索引，同时做了index_merge合并操作，也没有问题。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">| id | select_type | table        | type        | possible_keys           | key                     | key_len | ref  | rows | Extra                                                             |+----+-------------+--------------+-------------+-------------------------+-------------------------+---------+------+------+-------------------------------------------------------------------+|  1 | SIMPLE      | t_user_msg | index_merge | invite_id,app_id | invite_id,app_id | 9,9     | NULL |    2 | Using union(invite_id,app_id); Using where; Using filesort |</code></pre></div></figure><p><strong>通过上面的分析，第一部分SQL走的执行计划走team_id索引没问题，第二部分SQL分别走invite_id,app_id索引并且index_merge也没问题，为什么两部分SQL进行OR关联之后走create_time的单列索引呢，不应该是三个单列索引的index_merge吗？</strong></p><p><strong>index_merge默认是在优化器选项是开启的，主要是将多个范围扫描的结果集合并成一个，可以通过变量查看。</strong></p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">mysql &gt;select @@optimizer_switch;| index_merge&#x3D;on,index_merge_union&#x3D;on,index_merge_sort_union&#x3D;on,index_merge_intersection&#x3D;on,</code></pre></div></figure><p>其他三个字段都传入的是具体的值，而且都走了相应的索引，只能怀疑app_id is not null这个条件影响了CBO对最终执行计划的选择，去掉这个条件来看执行计划，竟然走了三个单列索引且type&#x3D;index_merge，那下面只要搞定<strong>app_id is not null</strong>这个条件就OK了吧。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">| id | select_type | table        | type        | possible_keys                   | key                             | key_len | ref  | rows | Extra                                                                     |+----+-------------+--------------+-------------+---------------------------------+---------------------------------+---------+------+------+---------------------------------------------------------------------------+|  1 | SIMPLE      | t_user_msg | index_merge | invite_id,app_id,teadm_id | team_id,invite_id,app_id | 8,9,9   | NULL |   32 | Using union(team_id,invite_id,app_id); Using where; Using filesort |</code></pre></div></figure><h3 id="SQL改写"><a href="#SQL改写" class="headerlink" title="SQL改写"></a>SQL改写</h3><p>通过上面分析得知，条件app_id is not null影响了CBO的选择，下面进行改造。</p><p><strong>改写优化1</strong></p><p>根据SQL开发规范改写，将OR改写成Union All方式即可，最终的SQL如下：</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select id, ……. from (select id, ……. from t_user_msg where **1 and (club_id in (5821) and applicant_id is not null)**        **union all** select id, ……. from t_user_msg where **1 and invitee_id&#x3D;&#39;146737&#39;**        **union all** select id, ……. from  t_user_msg where **1 and app_id&#x3D;&#39;146737&#39;**       ) as a order by created_time desc limit 0,10;</code></pre></div></figure><p>一般情况下，Java代码和SQL是分开的，SQL是配置在xml文件中，根据业务需求，除了team_id是必填，其他两个都是可选的，所以这种改写虽然能提高SQL执行效率，但不适合这种业务场景。</p><p><strong>改写优化2</strong></p><p>app_id is not null 改写为**IFNULL(app_id, 0) &gt;0)**，最终的SQL为：</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select id,team_id,reason,status,type,created_time,invite_id,falg_admin,file_id from t_user_msg where 1 and (team_id in (3212) and **IFNULL(app_id, 0) &gt;0)**) or (invite_id&#x3D;12395 or app_id&#x3D;12395) order by created_time desc limit 0,10;</code></pre></div></figure><p><strong>改写优化3</strong></p><p>将字段app_id bigint(20) DEFAULT NULL，变更为app_id bigint(20) <strong>NOT NULL DEFAULT 0</strong>，同时更新将app_id is null的时候全部更新成0，就可以将条件app_id is not null 转换为app_id &gt; 0，最终的SQL为：</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">select id,team_id,reason,status,type,created_at,invite_id,falg_admin,file_id from t_user_msg where 1 and (team_id in (3212) and **app_id &gt; 0)**) or (invite_id&#x3D;12395 or app_id&#x3D;12395) order by created_time desc limit 0,10;</code></pre></div></figure><p>从执行计划看，两种改写优化方式都走三个单列索引，执行时间从2s降低至10ms，线上采用的是<strong>优化1</strong>的方式，如果一开始能遵循MySQL开发规范就就会避免问题的发生。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面介绍了SQL规范性检查，表结构检查，索引检查以及通过SQL改写来优化查询，在编写代码的过程，如果能提前做这些规范性检查，评估出自己认为理想的执行计划，然后通过explain解析出MySQL CBO的执行计划，两者做对比分析差异，弄清楚自己的选择和CBO的不同，不但能够编写高质量的SQL，同时也能清楚CBO的工作原理。</p><blockquote><p>文章持续更新，可以微信搜一搜「 <strong>三太子敖丙</strong> 」第一时间阅读，回复【<strong>资料</strong>】有我准备的一线大厂面试资料和简历模板，本文 <strong>GitHub</strong> <a href="https://link.juejin.cn/?target=https://github.com/AobingJava/JavaFamily" title="https://github.com/AobingJava/JavaFamily">github.com&#x2F;JavaFamily</a> 已经收录，有大厂面试完整考点，欢迎Star。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转载</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python高级内容</title>
    <link href="/2022/11/15/Python%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/11/15/Python%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>摘自廖雪峰老师python教程：<br>原文链接：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017451662295584">https://www.liaoxuefeng.com/wiki/1016959663602400/1017451662295584</a><br>参考链接：<a href="https://www.bilibili.com/video/BV1Vv411x7hj/?p=1&amp;vd_source=356ed72c41c85a755e40d7f41bb5e733">https://www.bilibili.com/video/BV1Vv411x7hj/?p=1&amp;vd_source=356ed72c41c85a755e40d7f41bb5e733</a></p></blockquote><h2 id="可变参数和关键字参数"><a href="#可变参数和关键字参数" class="headerlink" title="可变参数和关键字参数"></a>可变参数和关键字参数</h2><p>可变参数<br>参数个数不确定，我们首先想到可以把a，b，c……作为一个list或tuple传进来，这样，函数可以定义如下：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token operator">*</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> n <span class="token operator">*</span> n    <span class="token keyword">return</span> <span class="token builtin">sum</span></code></pre></div></figure><p>关键字参数<br>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">'age:'</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token string">'other:'</span><span class="token punctuation">,</span> kw<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> person<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">'Beijing'</span><span class="token punctuation">)</span>name<span class="token punctuation">:</span> Bob age<span class="token punctuation">:</span> <span class="token number">35</span> other<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'city'</span><span class="token punctuation">:</span> <span class="token string">'Beijing'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> person<span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> gender<span class="token operator">=</span><span class="token string">'M'</span><span class="token punctuation">,</span> job<span class="token operator">=</span><span class="token string">'Engineer'</span><span class="token punctuation">)</span>name<span class="token punctuation">:</span> Adam age<span class="token punctuation">:</span> <span class="token number">45</span> other<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'job'</span><span class="token punctuation">:</span> <span class="token string">'Engineer'</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。</p><p>举个例子，我们来计算阶乘n! &#x3D; 1 x 2 x 3 x … x n，用函数fact(n)表示，可以看出：</p><p>fact(n)=n!=1×2×3×⋅⋅⋅×(n−1)×n=(n−1)!×n=fact(n−1)×nfact(n)&#x3D;n!&#x3D;1\times2\times3\times\cdot\cdot\cdot\times(n-1)\times n&#x3D;(n-1)!\times n&#x3D;fact(n-1)\times n</p><p>所以，fact(n)可以表示为n x fact(n-1)，只有n&#x3D;1时需要特殊处理。</p><p>于是，fact(n)用递归的方式写出来就是：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">return</span> n <span class="token operator">*</span> fact<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre></div></figure><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span></code></pre></div></figure><p>写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来，十分有用，多写几次，很快就可以熟悉这种语法。</p><p>for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span></code></pre></div></figure><p>还可以使用两层循环，可以生成全排列：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>m <span class="token operator">+</span> n <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token string">'ABC'</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token string">'XYZ'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'AX'</span><span class="token punctuation">,</span> <span class="token string">'AY'</span><span class="token punctuation">,</span> <span class="token string">'AZ'</span><span class="token punctuation">,</span> <span class="token string">'BX'</span><span class="token punctuation">,</span> <span class="token string">'BY'</span><span class="token punctuation">,</span> <span class="token string">'BZ'</span><span class="token punctuation">,</span> <span class="token string">'CX'</span><span class="token punctuation">,</span> <span class="token string">'CY'</span><span class="token punctuation">,</span> <span class="token string">'CZ'</span><span class="token punctuation">]</span></code></pre></div></figure><p>三层和三层以上的循环就很少用到了。</p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>只要把一个列表生成式的[]改成()，就创建了一个generator：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> L <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> L<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> g <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> g<span class="token operator">&lt;</span>generator <span class="token builtin">object</span> <span class="token operator">&lt;</span>genexpr<span class="token operator">></span> at <span class="token number">0x1022ef630</span><span class="token operator">></span></code></pre></div></figure><p>可以通过next()函数获得generator的下一个返回值：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token number">16</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token number">25</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token number">36</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token number">49</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token number">64</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token number">81</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>StopIteration</code></pre></div></figure><p>generator保存的是算法，每次调用next(g)，就计算出g的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出StopIteration的错误。</p><p>当然，上面这种不断调用next(g)实在是太变态了，正确的方法是使用for循环，因为generator也是可迭代对象：</p><figure><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">>>></span> g <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>>></span> <span class="token keyword">for</span> n in g<span class="token operator">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">0</span><span class="token number">1</span><span class="token number">4</span><span class="token number">9</span><span class="token number">16</span><span class="token number">25</span><span class="token number">36</span><span class="token number">49</span><span class="token number">64</span><span class="token number">81</span></code></pre></div></figure><p>所以，我们创建了一个generator后，基本上永远不会调用next()，而是通过for循环来迭代它，并且不需要关心StopIteration的错误。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>我们已经知道，可以直接作用于<code>for</code>循环的数据类型有以下几种：</p><p>一类是集合数据类型，如<code>list</code>、<code>tuple</code>、<code>dict</code>、<code>set</code>、<code>str</code>等；</p><p>一类是<code>generator</code>，包括生成器和带<code>yield</code>的generator function。</p><p>这些可以直接作用于<code>for</code>循环的对象统称为可迭代对象：<code>Iterable</code>。</p><p>可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterable</code>对象：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Iterable<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token boolean">False</span></code></pre></div></figure><p>而生成器不但可以作用于<code>for</code>循环，还可以被<code>next()</code>函数不断调用并返回下一个值，直到最后抛出<code>StopIteration</code>错误表示无法继续返回下一个值了。</p><p>可以被<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code>。</p><p>可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterator</code>对象：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Iterator<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token boolean">False</span></code></pre></div></figure><p>生成器都是<code>Iterator</code>对象，但<code>list</code>、<code>dict</code>、<code>str</code>虽然是<code>Iterable</code>，却不是<code>Iterator</code>。</p><p>把<code>list</code>、<code>dict</code>、<code>str</code>等<code>Iterable</code>变成<code>Iterator</code>可以使用<code>iter()</code>函数：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token boolean">True</span></code></pre></div></figure><p>你可能会问，为什么<code>list</code>、<code>dict</code>、<code>str</code>等数据类型不是<code>Iterator</code>？</p><p>这是因为Python的<code>Iterator</code>对象表示的是一个数据流，Iterator对象可以被<code>next()</code>函数调用并不断返回下一个数据，直到没有数据时抛出<code>StopIteration</code>错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过<code>next()</code>函数实现按需计算下一个数据，所以<code>Iterator</code>的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p><p><code>Iterator</code>甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>凡是可作用于<code>for</code>循环的对象都是<code>Iterable</code>类型；</p><p>凡是可作用于<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列；</p><p>集合数据类型如<code>list</code>、<code>dict</code>、<code>str</code>等是<code>Iterable</code>但不是<code>Iterator</code>，不过可以通过<code>iter()</code>函数获得一个<code>Iterator</code>对象。</p><p>Python的<code>for</code>循环本质上就是通过不断调用<code>next()</code>函数实现的，例如：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre></div></figure><p>实际上完全等价于：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 首先获得Iterator对象:</span>it <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 循环:</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># 获得下一个值:</span>        x <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>    <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>        <span class="token comment"># 遇到StopIteration就退出循环</span>        <span class="token keyword">break</span></code></pre></div></figure><h3 id="参考源码"><a href="#参考源码" class="headerlink" title="参考源码"></a>参考源码</h3><p><a href="https://github.com/michaelliao/learn-python3/blob/master/samples/advance/do_iter.py">do_iter.py</a></p><h2 id="高级函数-map"><a href="#高级函数-map" class="headerlink" title="高级函数-map"></a>高级函数-map</h2><p>Python内建了<code>map()</code>和<code>reduce()</code>函数。</p><p>如果你读过Google的那篇大名鼎鼎的论文“<a href="http://research.google.com/archive/mapreduce.html">MapReduce: Simplified Data Processing on Large Clusters</a>”，你就能大概明白map&#x2F;reduce的概念。</p><p>我们先看map。<code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回。</p><p>举例说明，比如我们有一个函数f(x)&#x3D;x<sup>2</sup>，要把这个函数作用在一个list <code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code>上，就可以用<code>map()</code>实现如下：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">            f<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> x <span class="token operator">*</span> x                  │                  │  ┌───┬───┬───┬───┼───┬───┬───┬───┐  │   │   │   │   │   │   │   │   │  ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼<span class="token punctuation">[</span> <span class="token number">1</span>   <span class="token number">2</span>   <span class="token number">3</span>   <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">6</span>   <span class="token number">7</span>   <span class="token number">8</span>   <span class="token number">9</span> <span class="token punctuation">]</span>  │   │   │   │   │   │   │   │   │  │   │   │   │   │   │   │   │   │  ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼<span class="token punctuation">[</span> <span class="token number">1</span>   <span class="token number">4</span>   <span class="token number">9</span>  <span class="token number">16</span>  <span class="token number">25</span>  <span class="token number">36</span>  <span class="token number">49</span>  <span class="token number">64</span>  <span class="token number">81</span> <span class="token punctuation">]</span></code></pre></div></figure><p>现在，我们用Python代码实现：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> r <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span></code></pre></div></figure><p><code>map()</code>传入的第一个参数是<code>f</code>，即函数对象本身。由于结果<code>r</code>是一个<code>Iterator</code>，<code>Iterator</code>是惰性序列，因此通过<code>list()</code>函数让它把整个序列都计算出来并返回一个list。</p><p>你可能会想，不需要<code>map()</code>函数，写一个循环，也可以计算出结果：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span></code></pre></div></figure><p>的确可以，但是，从上面的循环代码，能一眼看明白“把f(x)作用在list的每一个元素并把结果生成一个新的list”吗？</p><p>所以，<code>map()</code>作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的f(x)&#x3D;x<sup>2</sup>，还可以计算任意复杂的函数，比如，把这个list所有数字转为字符串：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">]</span></code></pre></div></figure><p>只需要一行代码。</p><p>再看<code>reduce</code>的用法。<code>reduce</code>把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算，其效果就是：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">reduce</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> x4<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">,</span> x3<span class="token punctuation">)</span><span class="token punctuation">,</span> x4<span class="token punctuation">)</span></code></pre></div></figure><p>比方说对一个序列求和，就可以用<code>reduce</code>实现：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">reduce</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">25</span></code></pre></div></figure><p>当然求和运算可以直接用Python内建函数<code>sum()</code>，没必要动用<code>reduce</code>。</p><p>但是如果要把序列<code>[1, 3, 5, 7, 9]</code>变换成整数<code>13579</code>，<code>reduce</code>就可以派上用场：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">reduce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">13579</span></code></pre></div></figure><p>这个例子本身没多大用处，但是，如果考虑到字符串<code>str</code>也是一个序列，对上面的例子稍加改动，配合<code>map()</code>，我们就可以写出把<code>str</code>转换为<code>int</code>的函数：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">char2num</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     digits <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> digits<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">reduce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">(</span>char2num<span class="token punctuation">,</span> <span class="token string">'13579'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">13579</span></code></pre></div></figure><p>整理成一个<code>str2int</code>的函数就是：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span>DIGITS <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">str2int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y    <span class="token keyword">def</span> <span class="token function">char2num</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> DIGITS<span class="token punctuation">[</span>s<span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">(</span>char2num<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div></figure><p>还可以用lambda函数进一步简化成：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span>DIGITS <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">char2num</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> DIGITS<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">str2int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">(</span>char2num<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div></figure><p>也就是说，假设Python没有提供<code>int()</code>函数，你完全可以自己写一个把字符串转化为整数的函数，而且只需要几行代码！</p><p>lambda函数的用法在后面介绍。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>利用<code>map()</code>函数，把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：<code>[&#39;adam&#39;, &#39;LISA&#39;, &#39;barT&#39;]</code>，输出：<code>[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]</code>：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 测试:</span>L1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'adam'</span><span class="token punctuation">,</span> <span class="token string">'LISA'</span><span class="token punctuation">,</span> <span class="token string">'barT'</span><span class="token punctuation">]</span>L2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>normalize<span class="token punctuation">,</span> L1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span></code></pre></div></figure><p>Python提供的<code>sum()</code>函数可以接受一个list并求和，请编写一个<code>prod()</code>函数，可以接受一个list并利用<code>reduce()</code>求积：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3 * 5 * 7 * 9 ='</span><span class="token punctuation">,</span> prod<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> prod<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">945</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试成功!'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span></code></pre></div></figure><p>利用<code>map</code>和<code>reduce</code>编写一个<code>str2float</code>函数，把字符串<code>&#39;123.456&#39;</code>转换成浮点数<code>123.456</code>：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span><span class="token keyword">def</span> <span class="token function">str2float</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'str2float(\'123.456\') ='</span><span class="token punctuation">,</span> str2float<span class="token punctuation">(</span><span class="token string">'123.456'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>str2float<span class="token punctuation">(</span><span class="token string">'123.456'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">123.456</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.00001</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试成功!'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span></code></pre></div></figure><h3 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h3><p><a href="https://github.com/michaelliao/learn-python3/blob/master/samples/functional/do_map.py">do_map.py</a></p><p><a href="https://github.com/michaelliao/learn-python3/blob/master/samples/functional/do_reduce.py">do_reduce.py</a></p><h2 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h2><h3 id="函数作为返回值"><a href="#函数作为返回值" class="headerlink" title="函数作为返回值"></a>函数作为返回值</h3><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。</p><p>我们来实现一个可变参数的求和。通常情况下，求和的函数是这样定义的：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calc_sum</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    ax <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> args<span class="token punctuation">:</span>        ax <span class="token operator">=</span> ax <span class="token operator">+</span> n    <span class="token keyword">return</span> ax</code></pre></div></figure><p>但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">lazy_sum</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ax <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> args<span class="token punctuation">:</span>            ax <span class="token operator">=</span> ax <span class="token operator">+</span> n        <span class="token keyword">return</span> ax    <span class="token keyword">return</span> <span class="token builtin">sum</span></code></pre></div></figure><p>当我们调用<code>lazy_sum()</code>时，返回的并不是求和结果，而是求和函数：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> lazy_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token operator">&lt;</span>function lazy_sum<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token builtin">locals</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token builtin">sum</span> at <span class="token number">0x101c6ed90</span><span class="token operator">></span></code></pre></div></figure><p>调用函数<code>f</code>时，才真正计算求和的结果：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">25</span></code></pre></div></figure><p>在这个例子中，我们在函数<code>lazy_sum</code>中又定义了函数<code>sum</code>，并且，内部函数<code>sum</code>可以引用外部函数<code>lazy_sum</code>的参数和局部变量，当<code>lazy_sum</code>返回函数<code>sum</code>时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。</p><p>请再注意一点，当我们调用<code>lazy_sum()</code>时，每次调用都会返回一个新的函数，即使传入相同的参数：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f1 <span class="token operator">=</span> lazy_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f2 <span class="token operator">=</span> lazy_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f1<span class="token operator">==</span>f2<span class="token boolean">False</span></code></pre></div></figure><p><code>f1()</code>和<code>f2()</code>的调用结果互不影响。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>注意到返回的函数在其定义内部引用了局部变量<code>args</code>，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以，闭包用起来简单，实现起来可不容易。</p><p>另一个需要注意的问题是，返回的函数并没有立刻执行，而是直到调用了<code>f()</code>才执行。我们来看一个例子：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> i<span class="token operator">*</span>i        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">return</span> fsf1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div></figure><p>在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都返回了。</p><p>你可能认为调用<code>f1()</code>，<code>f2()</code>和<code>f3()</code>结果应该是<code>1</code>，<code>4</code>，<code>9</code>，但实际结果是：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> f2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> f3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span></code></pre></div></figure><p>全部都是<code>9</code>！原因就在于返回的函数引用了变量<code>i</code>，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量<code>i</code>已经变成了<code>3</code>，因此最终结果为<code>9</code>。</p><p>返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</p><p>如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> j<span class="token operator">*</span>j        <span class="token keyword">return</span> g    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># f(i)立刻被执行，因此i的当前值被传入f()</span>    <span class="token keyword">return</span> fs</code></pre></div></figure><p>再看看结果：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> f2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> f3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span></code></pre></div></figure><p>缺点是代码较长，可利用lambda函数缩短代码。</p><h3 id="nonlocal"><a href="#nonlocal" class="headerlink" title="nonlocal"></a>nonlocal</h3><p>使用闭包，就是内层函数引用了外层函数的局部变量。如果只是读外层变量的值，我们会发现返回的闭包函数调用一切正常：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 仅读取x的值:</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> fnf <span class="token operator">=</span> inc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 1</span></code></pre></div></figure><p>但是，如果对外层变量赋值，由于Python解释器会把<code>x</code>当作函数<code>fn()</code>的局部变量，它会报错：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span></code></pre></div></figure><p>原因是<code>x</code>作为局部变量并没有初始化，直接计算<code>x+1</code>是不行的。但我们其实是想引用<code>inc()</code>函数内部的<code>x</code>，所以需要在<code>fn()</code>函数内部加一个<code>nonlocal x</code>的声明。加上这个声明后，解释器把<code>fn()</code>的<code>x</code>看作外层函数的局部变量，它已经被初始化了，可以正确计算<code>x+1</code>。</p><p>使用闭包时，对外层变量赋值前，需要先使用nonlocal声明该变量不是当前函数的局部变量。</p><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p>利用闭包返回一个计数器函数，每次调用它返回递增整数：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 测试:</span>counterA <span class="token operator">=</span> createCounter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>counterA<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> counterA<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> counterA<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> counterA<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> counterA<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 1 2 3 4 5</span>counterB <span class="token operator">=</span> createCounter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">[</span>counterB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> counterB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> counterB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> counterB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试通过!'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span></code></pre></div></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>一个函数可以返回一个计算结果，也可以返回一个函数。</p><p>返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量。</p><h3 id="参考源码-1"><a href="#参考源码-1" class="headerlink" title="参考源码"></a>参考源码</h3><p><a href="https://github.com/michaelliao/learn-python3/blob/master/samples/functional/return_func.py">return_func.py</a></p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><blockquote><p>原文链接：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017451662295584">https://www.liaoxuefeng.com/wiki/1016959663602400/1017451662295584</a><br>参考链接：<a href="https://www.bilibili.com/video/BV1Vv411x7hj/?p=1&amp;vd_source=356ed72c41c85a755e40d7f41bb5e733">https://www.bilibili.com/video/BV1Vv411x7hj/?p=1&amp;vd_source=356ed72c41c85a755e40d7f41bb5e733</a></p></blockquote><p>由于函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数。</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2015-3-25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> now<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">25</span></code></pre></div></figure><p>函数对象有一个<code>__name__</code>属性（注意：是前后各两个下划线），可以拿到函数的名字：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> now<span class="token punctuation">.</span>__name__<span class="token string">'now'</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>__name__<span class="token string">'now'</span></code></pre></div></figure><p><em><strong>现在，假设我们要增强<code>now()</code>函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改<code>now()</code>函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。</strong></em></p><p>本质上，decorator就是一个返回函数的高阶函数。所以，我们要定义一个能打印日志的decorator，可以定义如下：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call %s():'</span> <span class="token operator">%</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper</code></pre></div></figure><p>观察上面的<code>log</code>，因为它是一个decorator，所以接受一个函数作为参数，并返回一个函数。我们要借助<strong>Python的@语法，把decorator置于函数的定义处：</strong></p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@log</span> <span class="token comment"># 这个@log等于上面的外层log函数</span><span class="token keyword">def</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2015-3-25'</span><span class="token punctuation">)</span></code></pre></div></figure><p>调用<code>now()</code>函数，不仅会运行<code>now()</code>函数本身，还会在运行<code>now()</code>函数前打印一行日志：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> now<span class="token punctuation">(</span><span class="token punctuation">)</span>call now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">25</span></code></pre></div></figure><p>把<code>@log</code>放到<code>now()</code>函数的定义处，相当于执行了语句：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">now <span class="token operator">=</span> log<span class="token punctuation">(</span>now<span class="token punctuation">)</span></code></pre></div></figure><p>由于<code>log()</code>是一个decorator，返回一个函数，所以，原来的<code>now()</code>函数仍然存在，只是现在同名的<code>now</code>变量指向了新的函数，于是调用<code>now()</code>将执行新函数，即在<code>log()</code>函数中返回的<code>wrapper()</code>函数。</p><p><code>wrapper()</code>函数的参数定义是<code>(*args, **kw)</code>，因此，<code>wrapper()</code>函数可以接受任意参数的调用。在<code>wrapper()</code>函数内，首先打印日志，再紧接着调用原始函数。</p><p>如果decorator本身需要传入参数，那就需要编写一个返回decorator的高阶函数，写出来会更复杂。比如，要自定义log的文本：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s %s():'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>text<span class="token punctuation">,</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>        <span class="token keyword">return</span> wrapper    <span class="token keyword">return</span> decorator</code></pre></div></figure><p>这个3层嵌套的decorator用法如下：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@log</span><span class="token punctuation">(</span><span class="token string">'execute'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2015-3-25'</span><span class="token punctuation">)</span></code></pre></div></figure><p>执行结果如下：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> now<span class="token punctuation">(</span><span class="token punctuation">)</span>execute now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">25</span></code></pre></div></figure><p>和两层嵌套的decorator相比，3层嵌套的效果是这样的：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> now <span class="token operator">=</span> log<span class="token punctuation">(</span><span class="token string">'execute'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span></code></pre></div></figure><p>我们来剖析上面的语句，首先执行<code>log(&#39;execute&#39;)</code>，返回的是<code>decorator</code>函数，再调用返回的函数，参数是<code>now</code>函数，返回值最终是<code>wrapper</code>函数。</p><p>以上两种decorator的定义都没有问题，但还差最后一步。因为我们讲了函数也是对象，它有<code>__name__</code>等属性，但你去看经过decorator装饰之后的函数，它们的<code>__name__</code>已经从原来的<code>&#39;now&#39;</code>变成了<code>&#39;wrapper&#39;</code>：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> now<span class="token punctuation">.</span>__name__<span class="token string">'wrapper'</span></code></pre></div></figure><p>因为返回的那个<code>wrapper()</code>函数名字就是<code>&#39;wrapper&#39;</code>，所以，<strong>需要把原始函数的<code>__name__</code>等属性复制到<code>wrapper()</code>函数中</strong>，否则，有些依赖函数签名的代码执行就会出错。</p><p><strong>不需要编写<code>wrapper.__name__ = func.__name__</code>这样的代码，Python内置的<code>functools.wraps</code>就是干这个事的，所以，一个完整的decorator的写法如下：</strong></p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> functools<span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@functools<span class="token punctuation">.</span>wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call %s():'</span> <span class="token operator">%</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper</code></pre></div></figure><p>或者针对带参数的decorator：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> functools<span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token decorator annotation punctuation">@functools<span class="token punctuation">.</span>wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s %s():'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>text<span class="token punctuation">,</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>        <span class="token keyword">return</span> wrapper    <span class="token keyword">return</span> decorator</code></pre></div></figure><p><code>import functools</code>是导入<code>functools</code>模块。<strong>模块的概念稍候讲解。现在，只需记住在定义<code>wrapper()</code>的前面加上<code>@functools.wraps(func)</code>即可。</strong></p><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><p><em>请设计一个decorator，它可作用于任何函数上，并打印该函数的执行时间：</em></p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> time<span class="token punctuation">,</span> functools</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 测试</span><span class="token decorator annotation punctuation">@metric</span><span class="token keyword">def</span> <span class="token function">fast</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.0012</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token decorator annotation punctuation">@metric</span><span class="token keyword">def</span> <span class="token function">slow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1234</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> y <span class="token operator">*</span> z<span class="token punctuation">;</span>f <span class="token operator">=</span> fast<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>s <span class="token operator">=</span> slow<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token keyword">if</span> f <span class="token operator">!=</span> <span class="token number">33</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> s <span class="token operator">!=</span> <span class="token number">7986</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span></code></pre></div></figure><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>在面向对象（OOP）的设计模式中，decorator被称为装饰模式。OOP的装饰模式需要通过继承和组合来实现，而Python除了能支持OOP的decorator外，直接从语法层次支持decorator。Python的decorator可以用函数实现，也可以用类实现。</p><p>decorator可以增强函数的功能，定义起来虽然有点复杂，但使用起来非常灵活和方便。</p><p>请编写一个decorator，能在函数调用的前后打印出<code>&#39;begin call&#39;</code>和<code>&#39;end call&#39;</code>的日志。</p><p>再思考一下能否写出一个<code>@log</code>的decorator，使它既支持：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@log</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre></div></figure><p>又支持：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@log</span><span class="token punctuation">(</span><span class="token string">'execute'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre></div></figure><h3 id="参考源码-2"><a href="#参考源码-2" class="headerlink" title="参考源码"></a>参考源码</h3><p><a href="https://github.com/michaelliao/learn-python3/blob/master/samples/functional/decorator.py">decorator.py</a></p><h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><p>Python的<code>functools</code>模块提供了很多有用的功能，其中一个就是偏函数（Partial function）。要注意，这里的偏函数和数学意义上的偏函数不一样。</p><p>在介绍函数参数的时候，我们讲到，通过设定参数的默认值，可以降低函数调用的难度。而偏函数也可以做到这一点。举例如下：</p><p><code>int()</code>函数可以把字符串转换为整数，当仅传入字符串时，<code>int()</code>函数默认按十进制转换：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'12345'</span><span class="token punctuation">)</span><span class="token number">12345</span></code></pre></div></figure><p>但<code>int()</code>函数还提供额外的<code>base</code>参数，默认值为<code>10</code>。如果传入<code>base</code>参数，就可以做N进制的转换：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'12345'</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token number">5349</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'12345'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token number">74565</span></code></pre></div></figure><p>假设要转换大量的二进制字符串，每次都传入<code>int(x, base=2)</code>非常麻烦，于是，我们想到，可以定义一个<code>int2()</code>的函数，默认把<code>base=2</code>传进去：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">int2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> base<span class="token punctuation">)</span></code></pre></div></figure><p>这样，我们转换二进制就非常方便了：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> int2<span class="token punctuation">(</span><span class="token string">'1000000'</span><span class="token punctuation">)</span><span class="token number">64</span><span class="token operator">>></span><span class="token operator">></span> int2<span class="token punctuation">(</span><span class="token string">'1010101'</span><span class="token punctuation">)</span><span class="token number">85</span></code></pre></div></figure><p><code>functools.partial</code>就是帮助我们创建一个偏函数的，不需要我们自己定义<code>int2()</code>，可以直接使用下面的代码创建一个新的函数<code>int2</code>：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> functools<span class="token operator">>></span><span class="token operator">></span> int2 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> int2<span class="token punctuation">(</span><span class="token string">'1000000'</span><span class="token punctuation">)</span><span class="token number">64</span><span class="token operator">>></span><span class="token operator">></span> int2<span class="token punctuation">(</span><span class="token string">'1010101'</span><span class="token punctuation">)</span><span class="token number">85</span></code></pre></div></figure><p>所以，简单总结<code>functools.partial</code>的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。</p><p>注意到上面的新的<code>int2</code>函数，仅仅是把<code>base</code>参数重新设定默认值为<code>2</code>，但也可以在函数调用时传入其他值：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> int2<span class="token punctuation">(</span><span class="token string">'1000000'</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">1000000</span></code></pre></div></figure><p>最后，创建偏函数时，实际上可以接收函数对象、<code>*args</code>和<code>**kw</code>这3个参数，当传入：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">int2 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre></div></figure><p>实际上固定了int()函数的关键字参数<code>base</code>，也就是：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">int2<span class="token punctuation">(</span><span class="token string">'10010'</span><span class="token punctuation">)</span></code></pre></div></figure><p>相当于：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">kw <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'base'</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'10010'</span><span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span></code></pre></div></figure><p>当传入：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">max2 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></code></pre></div></figure><p>实际上会把<code>10</code>作为<code>*args</code>的一部分自动加到左边，也就是：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">max2<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span></code></pre></div></figure><p>相当于：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">args <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span></code></pre></div></figure><p>结果为<code>10</code>。</p><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>当函数的参数个数太多，需要简化时，使用<code>functools.partial</code>可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p><h3 id="参考源码-3"><a href="#参考源码-3" class="headerlink" title="参考源码"></a>参考源码</h3><p><a href="https://github.com/michaelliao/learn-python3/blob/master/samples/functional/do_partial.py">do_partial.py</a></p><h2 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h2><p>面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，比如Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p><p>仍以Student类为例，在Python中，定义类是通过<code>class</code>关键字：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre></div></figure><p><code>class</code>后面紧接着是类名，即<code>Student</code>，类名通常是大写开头的单词，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用<code>object</code>类，这是所有类最终都会继承的类。</p><p>定义好了<code>Student</code>类，就可以根据<code>Student</code>类创建出<code>Student</code>的实例，创建实例是通过类名+()实现的：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Student <span class="token builtin">object</span> at <span class="token number">0x10a67a590</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> Student<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.Student'</span><span class="token operator">></span></code></pre></div></figure><p>可以看到，变量<code>bart</code>指向的就是一个<code>Student</code>的实例，后面的<code>0x10a67a590</code>是内存地址，每个object的地址都不一样，而<code>Student</code>本身则是一个类。</p><p>可以自由地给一个实例变量绑定属性，比如，给实例<code>bart</code>绑定一个<code>name</code>属性：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Bart Simpson'</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>name<span class="token string">'Bart Simpson'</span></code></pre></div></figure><p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把<code>name</code>，<code>score</code>等属性绑上去：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score</code></pre></div></figure><p>注意：特殊方法“__init__”前后分别有两个下划线！！！</p><p>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</p><p>有了<code>__init__</code>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<code>__init__</code>方法匹配的参数，但<code>self</code>不需要传，Python解释器自己会把实例变量传进去：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart Simpson'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>name<span class="token string">'Bart Simpson'</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>score<span class="token number">59</span></code></pre></div></figure><p>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p><h3 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h3><p>面向对象编程的一个重要特点就是数据封装。在上面的<code>Student</code>类中，每个实例就拥有各自的<code>name</code>和<code>score</code>这些数据。我们可以通过函数来访问这些数据，比如打印一个学生的成绩：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">print_score</span><span class="token punctuation">(</span>std<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>std<span class="token punctuation">.</span>name<span class="token punctuation">,</span> std<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> print_score<span class="token punctuation">(</span>bart<span class="token punctuation">)</span>Bart Simpson<span class="token punctuation">:</span> <span class="token number">59</span></code></pre></div></figure><p>但是，既然<code>Student</code>实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在<code>Student</code>类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和<code>Student</code>类本身是关联起来的，我们称之为类的方法：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score    <span class="token keyword">def</span> <span class="token function">print_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div></figure><p>要定义一个方法，除了第一个参数是<code>self</code>外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了<code>self</code>不用传递，其他参数正常传入：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>print_score<span class="token punctuation">(</span><span class="token punctuation">)</span>Bart Simpson<span class="token punctuation">:</span> <span class="token number">59</span></code></pre></div></figure><p>这样一来，我们从外部看<code>Student</code>类，就只需要知道，创建实例需要给出<code>name</code>和<code>score</code>，而如何打印，都是在<code>Student</code>类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节。</p><p>封装的另一个好处是可以给<code>Student</code>类增加新的方法，比如<code>get_grade</code>：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_grade</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>score <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'A'</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>score <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'B'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'C'</span></code></pre></div></figure><p>同样的，<code>get_grade</code>方法可以直接在实例变量上调用，不需要知道内部实现细节：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">lisa <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Lisa'</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span>bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lisa<span class="token punctuation">.</span>name<span class="token punctuation">,</span> lisa<span class="token punctuation">.</span>get_grade<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bart<span class="token punctuation">.</span>name<span class="token punctuation">,</span> bart<span class="token punctuation">.</span>get_grade<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div></figure><h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；</p><p>方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；</p><p>通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。</p><p>和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart Simpson'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> lisa <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Lisa Simpson'</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">8</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>age<span class="token number">8</span><span class="token operator">>></span><span class="token operator">></span> lisa<span class="token punctuation">.</span>ageTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>AttributeError<span class="token punctuation">:</span> <span class="token string">'Student'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'age'</span></code></pre></div></figure><h3 id="参考源码-4"><a href="#参考源码-4" class="headerlink" title="参考源码"></a>参考源码</h3><p><a href="https://github.com/michaelliao/learn-python3/blob/master/samples/oop_basic/student.py">student.py</a></p><h2 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h2><p>在Class内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。</p><p>但是，从前面Student类的定义来看，外部代码还是可以自由地修改一个实例的<code>name</code>、<code>score</code>属性：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart Simpson'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>score<span class="token number">59</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">99</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>score<span class="token number">99</span></code></pre></div></figure><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>，在Python中，实例的变量名如果以<code>__</code>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问，所以，我们把Student类改一改：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__score <span class="token operator">=</span> score    <span class="token keyword">def</span> <span class="token function">print_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__score<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div></figure><p>改完后，对于外部代码来说，没什么变动，但是已经无法从外部访问<code>实例变量.__name</code>和<code>实例变量.__score</code>了：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart Simpson'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>__nameTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>AttributeError<span class="token punctuation">:</span> <span class="token string">'Student'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'__name'</span></code></pre></div></figure><p>这样就确保了外部代码不能随意修改对象内部的状态，这样通过访问限制的保护，代码更加健壮。</p><p>但是如果外部代码要获取name和score怎么办？可以给Student类增加<code>get_name</code>和<code>get_score</code>这样的方法：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__name    <span class="token keyword">def</span> <span class="token function">get_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__score</code></pre></div></figure><p>如果又要允许外部代码修改score怎么办？可以再给Student类增加<code>set_score</code>方法：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">set_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__score <span class="token operator">=</span> score</code></pre></div></figure><p>你也许会问，原先那种直接通过<code>bart.score = 99</code>也可以修改啊，为什么要定义一个方法大费周折？因为在方法中，可以对参数做检查，避免传入无效的参数：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">set_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__score <span class="token operator">=</span> score        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'bad score'</span><span class="token punctuation">)</span></code></pre></div></figure><p>需要注意的是，在Python中，变量名类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</p><p>有些时候，你会看到以一个下划线开头的实例变量名，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。</p><p>双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问<code>__name</code>是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>_Student__name<span class="token string">'Bart Simpson'</span></code></pre></div></figure><p>但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把<code>__name</code>改成不同的变量名。</p><p>总的来说就是，Python本身没有任何机制阻止你干坏事，一切全靠自觉。</p><p>最后注意下面的这种_错误写法_：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart Simpson'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Bart Simpson'</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>__name <span class="token operator">=</span> <span class="token string">'New Name'</span> <span class="token comment"># 设置__name变量！</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>__name<span class="token string">'New Name'</span></code></pre></div></figure><p>表面上看，外部代码“成功”地设置了<code>__name</code>变量，但实际上这个<code>__name</code>变量和class内部的<code>__name</code>变量_不是_一个变量！内部的<code>__name</code>变量已经被Python解释器自动改成了<code>_Student__name</code>，而外部代码给<code>bart</code>新增了一个<code>__name</code>变量。不信试试：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># get_name()内部返回self.__name</span><span class="token string">'Bart Simpson'</span></code></pre></div></figure><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h3><p>请把下面的<code>Student</code>对象的<code>gender</code>字段对外隐藏起来，用<code>get_gender()</code>和<code>set_gender()</code>代替，并检查参数有效性：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 测试:</span>bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart'</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">)</span><span class="token keyword">if</span> bart<span class="token punctuation">.</span>get_gender<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'male'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    bart<span class="token punctuation">.</span>set_gender<span class="token punctuation">(</span><span class="token string">'female'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> bart<span class="token punctuation">.</span>get_gender<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'female'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试成功!'</span><span class="token punctuation">)</span></code></pre></div></figure><h3 id="参考源码-5"><a href="#参考源码-5" class="headerlink" title="参考源码"></a>参考源码</h3><p><a href="https://github.com/michaelliao/learn-python3/blob/master/samples/oop_basic/protected_student.py">protected_student.py</a></p><h2 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h2><p>在OOP程序设计中，当我们定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass），而被继承的class称为基类、父类或超类（Base class、Super class）。</p><p>比如，我们已经编写了一个名为<code>Animal</code>的class，有一个<code>run()</code>方法可以直接打印：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Animal is running...'</span><span class="token punctuation">)</span></code></pre></div></figure><p>当我们需要编写<code>Dog</code>和<code>Cat</code>类时，就可以直接从<code>Animal</code>类继承：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre></div></figure><p>对于<code>Dog</code>来说，<code>Animal</code>就是它的父类，对于<code>Animal</code>来说，<code>Dog</code>就是它的子类。<code>Cat</code>和<code>Dog</code>类似。</p><p>继承有什么好处？最大的好处是子类获得了父类的全部功能。由于<code>Animial</code>实现了<code>run()</code>方法，因此，<code>Dog</code>和<code>Cat</code>作为它的子类，什么事也没干，就自动拥有了<code>run()</code>方法：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>cat <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div></figure><p>运行结果如下：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">Animal <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Animal <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></div></figure><p>当然，也可以对子类增加一些方法，比如Dog类：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Dog is running...'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Eating meat...'</span><span class="token punctuation">)</span></code></pre></div></figure><p>继承的第二个好处需要我们对代码做一点改进。你看到了，无论是<code>Dog</code>还是<code>Cat</code>，它们<code>run()</code>的时候，显示的都是<code>Animal is running...</code>，符合逻辑的做法是分别显示<code>Dog is running...</code>和<code>Cat is running...</code>，因此，对<code>Dog</code>和<code>Cat</code>类改进如下：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Dog is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Cat is running...'</span><span class="token punctuation">)</span></code></pre></div></figure><p>再次运行，结果如下：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">Dog <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Cat <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></div></figure><p>当子类和父类都存在相同的<code>run()</code>方法时，我们说，子类的<code>run()</code>覆盖了父类的<code>run()</code>，在代码运行的时候，总是会调用子类的<code>run()</code>。这样，我们就获得了继承的另一个好处：多态。</p><p>要理解什么是多态，我们首先要对数据类型再作一点说明。当我们定义一个class的时候，我们实际上就定义了一种数据类型。我们定义的数据类型和Python自带的数据类型，比如str、list、dict没什么两样：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># a是list类型</span>b <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># b是Animal类型</span>c <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># c是Dog类型</span></code></pre></div></figure><p>判断一个变量是否是某个类型可以用<code>isinstance()</code>判断：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> Dog<span class="token punctuation">)</span><span class="token boolean">True</span></code></pre></div></figure><p>看来<code>a</code>、<code>b</code>、<code>c</code>确实对应着<code>list</code>、<code>Animal</code>、<code>Dog</code>这3种类型。</p><p>但是等等，试试：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token boolean">True</span></code></pre></div></figure><p>看来<code>c</code>不仅仅是<code>Dog</code>，<code>c</code>还是<code>Animal</code>！</p><p>不过仔细想想，这是有道理的，因为<code>Dog</code>是从<code>Animal</code>继承下来的，当我们创建了一个<code>Dog</code>的实例<code>c</code>时，我们认为<code>c</code>的数据类型是<code>Dog</code>没错，但<code>c</code>同时也是<code>Animal</code>也没错，<code>Dog</code>本来就是<code>Animal</code>的一种！</p><p>所以，在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。但是，反过来就不行：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> Dog<span class="token punctuation">)</span><span class="token boolean">False</span></code></pre></div></figure><p><code>Dog</code>可以看成<code>Animal</code>，但<code>Animal</code>不可以看成<code>Dog</code>。</p><p>要理解多态的好处，我们还需要再编写一个函数，这个函数接受一个<code>Animal</code>类型的变量：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">run_twice</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    animal<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    animal<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div></figure><p>当我们传入<code>Animal</code>的实例时，<code>run_twice()</code>就打印出：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> run_twice<span class="token punctuation">(</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Animal <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Animal <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></div></figure><p>当我们传入<code>Dog</code>的实例时，<code>run_twice()</code>就打印出：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> run_twice<span class="token punctuation">(</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Dog <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Dog <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></div></figure><p>当我们传入<code>Cat</code>的实例时，<code>run_twice()</code>就打印出：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> run_twice<span class="token punctuation">(</span>Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Cat <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Cat <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></div></figure><p>看上去没啥意思，但是仔细想想，现在，如果我们再定义一个<code>Tortoise</code>类型，也从<code>Animal</code>派生：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Tortoise</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Tortoise is running slowly...'</span><span class="token punctuation">)</span></code></pre></div></figure><p>当我们调用<code>run_twice()</code>时，传入<code>Tortoise</code>的实例：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> run_twice<span class="token punctuation">(</span>Tortoise<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Tortoise <span class="token keyword">is</span> running slowly<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Tortoise <span class="token keyword">is</span> running slowly<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></div></figure><p>你会发现，新增一个<code>Animal</code>的子类，不必对<code>run_twice()</code>做任何修改，实际上，任何依赖<code>Animal</code>作为参数的函数或者方法都可以不加修改地正常运行，原因就在于多态。</p><p>多态的好处就是，当我们需要传入<code>Dog</code>、<code>Cat</code>、<code>Tortoise</code>……时，我们只需要接收<code>Animal</code>类型就可以了，因为<code>Dog</code>、<code>Cat</code>、<code>Tortoise</code>……都是<code>Animal</code>类型，然后，按照<code>Animal</code>类型进行操作即可。由于<code>Animal</code>类型有<code>run()</code>方法，因此，传入的任意类型，只要是<code>Animal</code>类或者子类，就会自动调用实际类型的<code>run()</code>方法，这就是多态的意思：</p><p>对于一个变量，我们只需要知道它是<code>Animal</code>类型，无需确切地知道它的子类型，就可以放心地调用<code>run()</code>方法，而具体调用的<code>run()</code>方法是作用在<code>Animal</code>、<code>Dog</code>、<code>Cat</code>还是<code>Tortoise</code>对象上，由运行时该对象的确切类型决定，这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种<code>Animal</code>的子类时，只要确保<code>run()</code>方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则：</p><p>对扩展开放：允许新增<code>Animal</code>子类；</p><p>对修改封闭：不需要修改依赖<code>Animal</code>类型的<code>run_twice()</code>等函数。</p><p>继承还可以一级一级地继承下来，就好比从爷爷到爸爸、再到儿子这样的关系。而任何类，最终都可以追溯到根类object，这些继承关系看上去就像一颗倒着的树。比如如下的继承树：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">                ┌───────────────┐                │    object     │                └───────────────┘                        │           ┌────────────┴────────────┐           │                         │           ▼                         ▼    ┌─────────────┐           ┌─────────────┐    │   Animal    │           │    Plant    │    └─────────────┘           └─────────────┘           │                         │     ┌─────┴──────┐            ┌─────┴──────┐     │            │            │            │     ▼            ▼            ▼            ▼┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐│   Dog   │  │   Cat   │  │  Tree   │  │ Flower  │└─────────┘  └─────────┘  └─────────┘  └─────────┘</code></pre></div></figure><h3 id="静态语言-vs-动态语言"><a href="#静态语言-vs-动态语言" class="headerlink" title="静态语言 vs 动态语言"></a>静态语言 vs 动态语言</h3><p>对于静态语言（例如Java）来说，如果需要传入<code>Animal</code>类型，则传入的对象必须是<code>Animal</code>类型或者它的子类，否则，将无法调用<code>run()</code>方法。</p><p><strong>对于Python这样的动态语言来说，则不一定需要传入<code>Animal</code>类型。我们只需要保证传入的对象有一个<code>run()</code>方法就可以了：</strong></p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Start...'</span><span class="token punctuation">)</span></code></pre></div></figure><p>这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p><p>Python的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个<code>read()</code>方法，返回其内容。但是，许多对象，只要有<code>read()</code>方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，你不一定要传入真正的文件对象，完全可以传入任何实现了<code>read()</code>方法的对象。</p><h3 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h3><p>继承可以把父类的所有功能都直接拿过来，这样就不必重零做起，子类只需要新增自己特有的方法，也可以把父类不适合的方法覆盖重写。</p><p>动态语言的鸭子类型特点决定了继承不像静态语言那样是必须的。</p><h3 id="参考源码-6"><a href="#参考源码-6" class="headerlink" title="参考源码"></a>参考源码</h3><p><a href="https://github.com/michaelliao/learn-python3/blob/master/samples/oop_basic/animals.py">animals.py</a></p><h2 id="使用-slots-x3D-‘name’-‘age’-用tuple定义允许绑定的属性名称"><a href="#使用-slots-x3D-‘name’-‘age’-用tuple定义允许绑定的属性名称" class="headerlink" title="使用__slots__  &#x3D; (‘name’, ‘age’) # 用tuple定义允许绑定的属性名称"></a>使用__slots__  &#x3D; (‘name’, ‘age’) # 用tuple定义允许绑定的属性名称</h2><p>正常情况下，当我们定义了一个class，创建了一个class的实例后，我们可以给该实例绑定任何属性和方法，这就是动态语言的灵活性。先定义class：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre></div></figure><p>然后，尝试给实例绑定一个属性：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Michael'</span> <span class="token comment"># 动态给实例绑定一个属性</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span>Michael</code></pre></div></figure><p>还可以尝试给实例绑定一个方法：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">set_age</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 定义一个函数作为实例方法</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> types <span class="token keyword">import</span> MethodType<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>set_age <span class="token operator">=</span> MethodType<span class="token punctuation">(</span>set_age<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment"># 给实例绑定一个方法</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>set_age<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment"># 调用实例方法</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>age <span class="token comment"># 测试结果</span><span class="token number">25</span></code></pre></div></figure><p>但是，给一个实例绑定的方法，对另一个实例是不起作用的：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建新的实例</span><span class="token operator">>></span><span class="token operator">></span> s2<span class="token punctuation">.</span>set_age<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment"># 尝试调用方法</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>AttributeError<span class="token punctuation">:</span> <span class="token string">'Student'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'set_age'</span></code></pre></div></figure><p>为了给所有实例都绑定方法，可以给class绑定方法：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">set_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     self<span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> Student<span class="token punctuation">.</span>set_score <span class="token operator">=</span> set_score</code></pre></div></figure><p>给class绑定方法后，所有实例均可调用：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>set_score<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>score<span class="token number">100</span><span class="token operator">>></span><span class="token operator">></span> s2<span class="token punctuation">.</span>set_score<span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s2<span class="token punctuation">.</span>score<span class="token number">99</span></code></pre></div></figure><p>通常情况下，上面的<code>set_score</code>方法可以直接定义在class中，但动态绑定允许我们在程序运行的过程中动态给class加上功能，这在静态语言中很难实现。</p><h3 id="使用-slots"><a href="#使用-slots" class="headerlink" title="使用__slots__"></a>使用__slots__</h3><p>但是，如果我们想要限制实例的属性怎么办？比如，只允许对Student实例添加<code>name</code>和<code>age</code>属性。</p><p>为了达到限制的目的，Python允许在定义class的时候，定义一个特殊的<code>__slots__</code>变量，来限制该class实例能添加的属性：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span> <span class="token comment"># 用tuple定义允许绑定的属性名称</span></code></pre></div></figure><p>然后，我们试试：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建新的实例</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Michael'</span> <span class="token comment"># 绑定属性'name'</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span> <span class="token comment"># 绑定属性'age'</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">99</span> <span class="token comment"># 绑定属性'score'</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>AttributeError<span class="token punctuation">:</span> <span class="token string">'Student'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'score'</span></code></pre></div></figure><p>由于<code>&#39;score&#39;</code>没有被放到<code>__slots__</code>中，所以不能绑定<code>score</code>属性，试图绑定<code>score</code>将得到<code>AttributeError</code>的错误。</p><p>使用<code>__slots__</code>要注意，<code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">GraduateStudent</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> g <span class="token operator">=</span> GraduateStudent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> g<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">9999</span></code></pre></div></figure><p>除非在子类中也定义<code>__slots__</code>，这样，子类实例允许定义的属性就是自身的<code>__slots__</code>加上父类的<code>__slots__</code>。</p><h3 id="参考源码-7"><a href="#参考源码-7" class="headerlink" title="参考源码"></a>参考源码</h3><p><a href="https://github.com/michaelliao/learn-python3/blob/master/samples/oop_advance/use_slots.py">use_slots.py</a></p><h2 id="使用-property"><a href="#使用-property" class="headerlink" title="使用@property"></a>使用@property</h2><p>在绑定属性时，如果我们直接把属性暴露出去，虽然写起来很简单，但是，没办法检查参数，导致可以把成绩随便改：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">9999</span></code></pre></div></figure><p>这显然不合逻辑。为了限制score的范围，可以通过一个<code>set_score()</code>方法来设置成绩，再通过一个<code>get_score()</code>来获取成绩，这样，在<code>set_score()</code>方法里，就可以检查参数：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> self<span class="token punctuation">.</span>_score    <span class="token keyword">def</span> <span class="token function">set_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'score must be an integer!'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> value <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'score must between 0 ~ 100!'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_score <span class="token operator">=</span> value</code></pre></div></figure><p>现在，对任意的Student实例进行操作，就不能随心所欲地设置score了：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>set_score<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token comment"># ok!</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>get_score<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">60</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>set_score<span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>ValueError<span class="token punctuation">:</span> score must between <span class="token number">0</span> <span class="token operator">~</span> <span class="token number">100</span>!</code></pre></div></figure><p>但是，上面的调用方法又略显复杂，没有直接用属性这么直接简单。</p><p style="color:red">有没有既能检查参数，又可以用类似属性这样简单的方式来访问类的变量呢？对于追求完美的Python程序员来说，这是必须要做到的！</p><p>还记得装饰器（decorator）可以给函数动态加上功能吗？对于类的方法，装饰器一样起作用。Python内置的<code>@property</code>装饰器就是负责把一个方法变成属性调用的：</p><blockquote><p><strong>Python内置的<code>functools.wraps</code>就是干这个事的，所以，一个完整的decorator的写法如下：</strong></p></blockquote><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> functools<span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@functools<span class="token punctuation">.</span>wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call %s():'</span> <span class="token operator">%</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_score    <span class="token decorator annotation punctuation">@score<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'score must be an integer!'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> value <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'score must between 0 ~ 100!'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_score <span class="token operator">=</span> value</code></pre></div></figure><p><code>@property</code>的实现比较复杂，我们先考察如何使用。把一个getter方法变成属性，只需要加上<code>@property</code>就可以了，此时，<code>@property</code>本身又创建了另一个装饰器<code>@score.setter</code>，负责把一个setter方法变成属性赋值，于是，我们就拥有一个可控的属性操作：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">60</span> <span class="token comment"># OK，实际转化为s.set_score(60)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>score <span class="token comment"># OK，实际转化为s.get_score()</span><span class="token number">60</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">9999</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>ValueError<span class="token punctuation">:</span> score must between <span class="token number">0</span> <span class="token operator">~</span> <span class="token number">100</span>!</code></pre></div></figure><p>注意到这个神奇的<code>@property</code>，我们在对实例属性操作的时候，就知道该属性很可能不是直接暴露的，而是通过getter和setter方法来实现的。</p><p>还可以定义只读属性，只定义getter方法，不定义setter方法就是一个只读属性：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">birth</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_birth    <span class="token decorator annotation punctuation">@birth<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">birth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_birth <span class="token operator">=</span> value    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">age</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">2015</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>_birth</code></pre></div></figure><p>上面的<code>birth</code>是可读写属性，而<code>age</code>就是一个_只读_属性，因为<code>age</code>可以根据<code>birth</code>和当前时间计算出来。</p><p>要特别注意：属性的方法名不要和实例变量重名。例如，以下的代码是错误的：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 方法名称和实例变量均为birth:</span>    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">birth</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>birth</code></pre></div></figure><p>这是因为调用<code>s.birth</code>时，首先转换为方法调用，在执行<code>return self.birth</code>时，又视为访问<code>self</code>的属性，于是又转换为方法调用，造成无限递归，最终导致栈溢出报错<code>RecursionError</code>。</p><h3 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h3><p><code>@property</code>广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。</p><h3 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h3><p>请利用<code>@property</code>给一个<code>Screen</code>对象加上<code>width</code>和<code>height</code>属性，以及一个只读属性<code>resolution</code>：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 测试:</span>s <span class="token operator">=</span> Screen<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">1024</span>s<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">768</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'resolution ='</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>resolution<span class="token punctuation">)</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>resolution <span class="token operator">==</span> <span class="token number">786432</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试通过!'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span></code></pre></div></figure><h3 id="参考源码-8"><a href="#参考源码-8" class="headerlink" title="参考源码"></a>参考源码</h3><p><a href="https://github.com/michaelliao/learn-python3/blob/master/samples/oop_advance/use_property.py">use_property.py</a></p><h1 id="定制类-xxx"><a href="#定制类-xxx" class="headerlink" title="定制类 __xxx__"></a>定制类 <code>__xxx__</code></h1><p>看到类似<code>__slots__</code>这种形如<code>__xxx__</code>的变量或者函数名就要注意，这些在Python中是有特殊用途的。</p><p><code>__slots__</code>我们已经知道怎么用了，<code>__len__()</code>方法我们也知道是为了能让class作用于<code>len()</code>函数。</p><p>除此之外，Python的class中还有许多这样有特殊用途的函数，可以帮助我们定制类。</p><h3 id="str"><a href="#str" class="headerlink" title="__str__"></a>__str__</h3><p>我们先定义一个<code>Student</code>类，打印一个实例：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Student <span class="token builtin">object</span> at <span class="token number">0x109afb190</span><span class="token operator">></span></code></pre></div></figure><p>打印出一堆<code>&lt;__main__.Student object at 0x109afb190&gt;</code>，不好看。</p><p>怎么才能打印得好看呢？只需要定义好<code>__str__()</code>方法，返回一个好看的字符串就可以了：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">return</span> <span class="token string">'Student object (name: %s)'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Student <span class="token builtin">object</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> Michael<span class="token punctuation">)</span></code></pre></div></figure><p>这样打印出来的实例，不但好看，而且容易看出实例内部重要的数据。</p><p>但是细心的朋友会发现直接敲变量不用<code>print</code>，打印出来的实例还是不好看：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Student <span class="token builtin">object</span> at <span class="token number">0x109afb310</span><span class="token operator">></span></code></pre></div></figure><p>这是因为直接显示变量调用的不是<code>__str__()</code>，而是<code>__repr__()</code>，两者的区别是<code>__str__()</code>返回用户看到的字符串，而<code>__repr__()</code>返回程序开发者看到的字符串，也就是说，<code>__repr__()</code>是为调试服务的。</p><p>解决办法是再定义一个<code>__repr__()</code>。但是通常<code>__str__()</code>和<code>__repr__()</code>代码都是一样的，所以，有个偷懒的写法：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Student object (name=%s)'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name    __repr__ <span class="token operator">=</span> __str__</code></pre></div></figure><h3 id="iter"><a href="#iter" class="headerlink" title="__iter__"></a>__iter__</h3><p>如果一个类想被用于<code>for ... in</code>循环，类似list或tuple那样，就必须实现一个<code>__iter__()</code>方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的<code>__next__()</code>方法拿到循环的下一个值，直到遇到<code>StopIteration</code>错误时退出循环。</p><p>我们以斐波那契数列为例，写一个Fib类，可以作用于for循环：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment"># 初始化两个计数器a，b</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self <span class="token comment"># 实例本身就是迭代对象，故返回自己</span>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b <span class="token operator">=</span> self<span class="token punctuation">.</span>b<span class="token punctuation">,</span> self<span class="token punctuation">.</span>a <span class="token operator">+</span> self<span class="token punctuation">.</span>b <span class="token comment"># 计算下一个值</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">100000</span><span class="token punctuation">:</span> <span class="token comment"># 退出循环的条件</span>            <span class="token keyword">raise</span> StopIteration<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>a <span class="token comment"># 返回下一个值</span></code></pre></div></figure><p>现在，试试把Fib实例作用于for循环：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> n <span class="token keyword">in</span> Fib<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">46368</span><span class="token number">75025</span></code></pre></div></figure><h3 id="getitem"><a href="#getitem" class="headerlink" title="__getitem__"></a>__getitem__</h3><p>Fib实例虽然能作用于for循环，看起来和list有点像，但是，把它当成list来使用还是不行，比如，取第5个元素：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> Fib<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> <span class="token string">'Fib'</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support indexing</code></pre></div></figure><p>要表现得像list那样按照下标取出元素，需要实现<code>__getitem__()</code>方法：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b        <span class="token keyword">return</span> a</code></pre></div></figure><p>现在，就可以按下标访问数列的任意一项了：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> Fib<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token number">89</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token number">573147844013817084101</span></code></pre></div></figure><p>但是list有个神奇的切片方法：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span></code></pre></div></figure><p>对于Fib却报错。原因是<code>__getitem__()</code>传入的参数可能是一个int，也可能是一个切片对象<code>slice</code>，所以要做判断：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># n是索引</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b            <span class="token keyword">return</span> a        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token builtin">slice</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># n是切片</span>            start <span class="token operator">=</span> n<span class="token punctuation">.</span>start            stop <span class="token operator">=</span> n<span class="token punctuation">.</span>stop            <span class="token keyword">if</span> start <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                start <span class="token operator">=</span> <span class="token number">0</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>            L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> x <span class="token operator">>=</span> start<span class="token punctuation">:</span>                    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>                a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b            <span class="token keyword">return</span> L</code></pre></div></figure><p>现在试试Fib的切片：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> Fib<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span></code></pre></div></figure><p>但是没有对step参数作处理：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">]</span></code></pre></div></figure><p>也没有对负数作处理，所以，要正确实现一个<code>__getitem__()</code>还是有很多工作要做的。</p><p>此外，如果把对象看成<code>dict</code>，<code>__getitem__()</code>的参数也可能是一个可以作key的object，例如<code>str</code>。</p><p>与之对应的是<code>__setitem__()</code>方法，把对象视作list或dict来对集合赋值。最后，还有一个<code>__delitem__()</code>方法，用于删除某个元素。</p><p>总之，通过上面的方法，我们自己定义的类表现得和Python自带的list、tuple、dict没什么区别，这完全归功于动态语言的“鸭子类型”，不需要强制继承某个接口。</p><h3 id="getattr"><a href="#getattr" class="headerlink" title="__getattr__"></a>__getattr__</h3><p>正常情况下，当我们调用类的方法或属性时，如果不存在，就会报错。比如定义<code>Student</code>类：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Michael'</span></code></pre></div></figure><p>调用<code>name</code>属性，没问题，但是，调用不存在的<code>score</code>属性，就有问题了：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span>Michael<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>score<span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>AttributeError<span class="token punctuation">:</span> <span class="token string">'Student'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'score'</span></code></pre></div></figure><p>错误信息很清楚地告诉我们，没有找到<code>score</code>这个attribute。</p><p>要避免这个错误，除了可以加上一个<code>score</code>属性外，Python还有另一个机制，那就是写一个<code>__getattr__()</code>方法，动态返回一个属性。修改如下：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Michael'</span>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> attr<span class="token operator">==</span><span class="token string">'score'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">99</span></code></pre></div></figure><p>当调用不存在的属性时，比如<code>score</code>，Python解释器会试图调用<code>__getattr__(self, &#39;score&#39;)</code>来尝试获得属性，这样，我们就有机会返回<code>score</code>的值：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>name<span class="token string">'Michael'</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>score<span class="token number">99</span></code></pre></div></figure><p>返回函数也是完全可以的：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> attr<span class="token operator">==</span><span class="token string">'age'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token number">25</span></code></pre></div></figure><p>只是调用方式要变为：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>age<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">25</span></code></pre></div></figure><p>注意，只有在没有找到属性的情况下，才调用<code>__getattr__</code>，已有的属性，比如<code>name</code>，不会在<code>__getattr__</code>中查找。</p><p>此外，注意到任意调用如<code>s.abc</code>都会返回<code>None</code>，这是因为我们定义的<code>__getattr__</code>默认返回就是<code>None</code>。要让class只响应特定的几个属性，我们就要按照约定，抛出<code>AttributeError</code>的错误：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> attr<span class="token operator">==</span><span class="token string">'age'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token number">25</span>        <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span><span class="token string">'\'Student\' object has no attribute \'%s\''</span> <span class="token operator">%</span> attr<span class="token punctuation">)</span></code></pre></div></figure><p>这实际上可以把一个类的所有属性和方法调用全部动态化处理了，不需要任何特殊手段。</p><p>这种完全动态调用的特性有什么实际作用呢？作用就是，可以针对完全动态的情况作调用。</p><p>举个例子：</p><p>现在很多网站都搞REST API，比如新浪微博、豆瓣啥的，调用API的URL类似：</p><ul><li><a href="http://api.server/user/friends">http://api.server/user/friends</a></li><li><a href="http://api.server/user/timeline/list">http://api.server/user/timeline/list</a></li></ul><p>如果要写SDK，给每个URL对应的API都写一个方法，那得累死，而且，API一旦改动，SDK也要改。</p><p>利用完全动态的<code>__getattr__</code>，我们可以写出一个链式调用：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_path <span class="token operator">=</span> path    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Chain<span class="token punctuation">(</span><span class="token string">'%s/%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_path<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_path    __repr__ <span class="token operator">=</span> __str__</code></pre></div></figure><p>试试：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> Chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>status<span class="token punctuation">.</span>user<span class="token punctuation">.</span>timeline<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token string">'/status/user/timeline/list'</span></code></pre></div></figure><p>这样，无论API怎么变，SDK都可以根据URL实现完全动态的调用，而且，不随API的增加而改变！</p><p>还有些REST API会把参数放到URL中，比如GitHub的API：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">GET <span class="token operator">/</span>users<span class="token operator">/</span><span class="token punctuation">:</span>user<span class="token operator">/</span>repos</code></pre></div></figure><p>调用时，需要把<code>:user</code>替换为实际用户名。如果我们能写出这样的链式调用：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">Chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>users<span class="token punctuation">(</span><span class="token string">'michael'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>repos</code></pre></div></figure><p>就可以非常方便地调用API了。有兴趣的童鞋可以试试写出来。</p><h3 id="call"><a href="#call" class="headerlink" title="__call__"></a>__call__</h3><p>一个对象实例可以有自己的属性和方法，当我们调用实例方法时，我们用<code>instance.method()</code>来调用。能不能直接在实例本身上调用呢？在Python中，答案是肯定的。</p><p>任何类，只需要定义一个<code>__call__()</code>方法，就可以直接对实例进行调用。请看示例：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'My name is %s.'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre></div></figure><p>调用方式如下：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># self参数不要传入</span>My name <span class="token keyword">is</span> Michael<span class="token punctuation">.</span></code></pre></div></figure><p><code>__call__()</code>还可以定义参数。对实例进行直接调用就好比对一个函数进行调用一样，所以你完全可以把对象看成函数，把函数看成对象，因为这两者之间本来就没啥根本的区别。</p><p>如果你把对象看成函数，那么函数本身其实也可以在运行期动态创建出来，因为类的实例都是运行期创建出来的，这么一来，我们就模糊了对象和函数的界限。</p><p>那么，怎么判断一个变量是对象还是函数呢？其实，更多的时候，我们需要判断一个对象是否能被调用，能被调用的对象就是一个<code>Callable</code>对象，比如函数和我们上面定义的带有<code>__call__()</code>的类实例：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">callable</span><span class="token punctuation">(</span>Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">callable</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">callable</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">callable</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">callable</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token boolean">False</span></code></pre></div></figure><p>通过<code>callable()</code>函数，我们就可以判断一个对象是否是“可调用”对象。</p><h3 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h3><p>Python的class允许定义许多定制方法，可以让我们非常方便地生成特定的类。</p><p>本节介绍的是最常用的几个定制方法，还有很多可定制的方法，请参考<a href="http://docs.python.org/3/reference/datamodel.html#special-method-names">Python的官方文档</a>。</p><h3 id="参考源码-9"><a href="#参考源码-9" class="headerlink" title="参考源码"></a>参考源码</h3><p><a href="https://github.com/michaelliao/learn-python3/blob/master/samples/oop_advance/special_str.py">special_str.py</a></p><p><a href="https://github.com/michaelliao/learn-python3/blob/master/samples/oop_advance/special_iter.py">special_iter.py</a></p><p><a href="https://github.com/michaelliao/learn-python3/blob/master/samples/oop_advance/special_getitem.py">special_getitem.py</a></p><p><a href="https://github.com/michaelliao/learn-python3/blob/master/samples/oop_advance/special_getattr.py">special_getattr.py</a></p><p><a href="https://github.com/michaelliao/learn-python3/blob/master/samples/oop_advance/special_call.py">special_call.py</a></p>]]></content>
    
    
    <categories>
      
      <category>数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转载</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NumPy生成自定义数组</title>
    <link href="/2022/11/15/NumPy%E7%94%9F%E6%88%90%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E7%BB%84/"/>
    <url>/2022/11/15/NumPy%E7%94%9F%E6%88%90%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="特殊数组的创建方法"><a href="#特殊数组的创建方法" class="headerlink" title="特殊数组的创建方法"></a>特殊数组的创建方法</h2><ul><li><p>numpy.arange 生成数值范围</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">numpy<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>start<span class="token punctuation">,</span> stop<span class="token punctuation">,</span> step<span class="token punctuation">,</span> dtype<span class="token punctuation">)</span></code></pre></div></figure></li><li><p>numpy.linspace 生成等差数列</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>start<span class="token punctuation">,</span> stop<span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> retstep<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span></code></pre></div></figure></li><li><p>numpy.logspace 生成等比数列</p></li></ul><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span>start<span class="token punctuation">,</span> stop<span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">10.0</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span></code></pre></div></figure><ul><li><p>np.zeros 全0数组</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>                      <span class="token comment"># 默认是浮点型</span></code></pre></div></figure></li><li><p>np.ones全1数组</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment"># 三行两列</span></code></pre></div></figure></li><li><p>随机数组：rand生成服从01分布的随机数</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token comment"># 返回服从01分布的5个数</span></code></pre></div></figure></li><li><p>随机数组：randn生成标准正态分布的随机数</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> </code></pre></div></figure></li><li><p>随机数组：normal生成元素是指定随机分布的数组</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">5.53705005</span><span class="token punctuation">,</span>  <span class="token number">1.95477989</span><span class="token punctuation">,</span>  <span class="token number">3.07768639</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span> <span class="token number">4.15457427</span><span class="token punctuation">,</span>  <span class="token number">3.69587242</span><span class="token punctuation">,</span>  <span class="token number">3.18715934</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span> <span class="token number">5.46093734</span><span class="token punctuation">,</span>  <span class="token number">6.60888084</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.55980278</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div></figure></li><li><p>生成全数值相同的数组</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></code></pre></div></figure></li><li><p>np.eye生成单位矩阵</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>```       <span class="token operator">-</span> np<span class="token punctuation">.</span>diag生成对角矩阵```pythonnp<span class="token punctuation">.</span>diag<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>```       <span class="token operator">-</span> np<span class="token punctuation">.</span>array按照某种形状生成ndarray```pythone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>e<span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>ones_like<span class="token punctuation">(</span>e<span class="token punctuation">)</span>np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>e<span class="token punctuation">)</span>np<span class="token punctuation">.</span>full_like<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre></div></figure></li></ul><h2 id="数组常用变形方法"><a href="#数组常用变形方法" class="headerlink" title="数组常用变形方法"></a>数组常用变形方法</h2><ul><li>reshape方法：调整数组行列结构<figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>a1array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.56262855</span><span class="token punctuation">,</span> <span class="token number">0.73129141</span><span class="token punctuation">,</span> <span class="token number">0.86289312</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.93186546</span><span class="token punctuation">,</span> <span class="token number">0.93884182</span><span class="token punctuation">,</span> <span class="token number">0.22485166</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div></figure></li><li>flatten方法：将数组降为一维数组<figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">a1<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre></div></figure></li><li>.T方法：数组的转置<figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">a1array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.56262855</span><span class="token punctuation">,</span> <span class="token number">0.73129141</span><span class="token punctuation">,</span> <span class="token number">0.86289312</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.93186546</span><span class="token punctuation">,</span> <span class="token number">0.93884182</span><span class="token punctuation">,</span> <span class="token number">0.22485166</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a1<span class="token punctuation">.</span>T                    <span class="token comment"># 就类似于矩阵的转置</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.56262855</span><span class="token punctuation">,</span> <span class="token number">0.93186546</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.73129141</span><span class="token punctuation">,</span> <span class="token number">0.93884182</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.86289312</span><span class="token punctuation">,</span> <span class="token number">0.22485166</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div></figure></li></ul><h2 id="数组的拼接"><a href="#数组的拼接" class="headerlink" title="数组的拼接"></a>数组的拼接</h2><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>```        <span class="token operator">-</span> vstack：纵向拼接，按列拼接，新增行，上下拼接```pythonnp<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">[</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token comment"># 需要输入一个序列</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div></figure><ul><li>hstack：横向拼接，按行拼接，新增列，左右拼接</li></ul><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">[</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">]</span><span class="token punctuation">)</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div></figure><h2 id="数组的切分"><a href="#数组的切分" class="headerlink" title="数组的切分"></a>数组的切分</h2><p>当然，有拼接就有切分。接下来，简单看下数组的切分方法。拼接时关键字是<code>stack</code>，切分时关键字是<code>split</code></p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>          <span class="token comment"># 创建3行8列的二维数组</span>aarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div></figure><ul><li>hsplit：左右切分<figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 当第二个参数只输入一个数时，是进行等分</span>np<span class="token punctuation">.</span>hsplit<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 无法等分的情况会报错</span>np<span class="token punctuation">.</span>hsplit<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>```````python<span class="token comment"># 当第二个参数输入一个序列时，则是根据列标进行切分</span>np<span class="token punctuation">.</span>hsplit<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment"># 第一列、第二列、第三列后进行切分</span><span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">-</span> vsplit：上下切分```pythonnp<span class="token punctuation">.</span>vsplit<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>                <span class="token comment"># 三等分</span><span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre></div></figure></li><li>array_split：通用切分方法<figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 均分</span>np<span class="token punctuation">.</span>array_split<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># axis = 1，左右切分</span><span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 根据列标进行切分</span>np<span class="token punctuation">.</span>array_split<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 均分</span>np<span class="token punctuation">.</span>array_split<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>         <span class="token comment"># axis = 0，上下切分</span><span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 根据行标进行切分</span>np<span class="token punctuation">.</span>array_split<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre></div></figure></li></ul><h2 id="数组的算数运算"><a href="#数组的算数运算" class="headerlink" title="数组的算数运算"></a>数组的算数运算</h2><table><thead><tr><th><strong>数学运算函数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>np.add(x1，x2 )</td><td>按元素添加参数，等效于 x1 + x2</td></tr><tr><td>np.subtract(x1，x2)</td><td>按元素方式减去参数，等效于x1 - x2</td></tr><tr><td>np.multiply(x1，x2)</td><td>逐元素乘法参数，等效于x1 * x2</td></tr><tr><td>np.divide(x1，x2)</td><td>逐元素除以参数，等效于x1 &#x2F; x2</td></tr><tr><td>np.exp(x)</td><td>计算e的x次方。</td></tr><tr><td>np.exp2(x)</td><td>计算2的x次方。</td></tr><tr><td>np.power(x1,x2)</td><td>计算x1的x2次幂。</td></tr><tr><td>np.mod(x)</td><td>返回输入数组中相应元素的除法余数.</td></tr><tr><td>np.log(x)</td><td>自然对数，逐元素。</td></tr><tr><td>np.log2(x)</td><td><em>x</em>的基础2对数。</td></tr><tr><td>np.log10(x)</td><td>以元素为单位返回输入数组的基数10的对数。</td></tr><tr><td>np.expm1(x)</td><td>对数组中的所有元素计算<code>exp（x） - 1</code></td></tr><tr><td>np.log1p(x)</td><td>返回一个加自然对数的输入数组。</td></tr><tr><td>np.sqrt(x)</td><td>按元素方式返回数组的正平方根。</td></tr><tr><td>np.square(x)</td><td>返回输入的元素平方。</td></tr><tr><td>np.sin(x)</td><td>三角正弦。</td></tr><tr><td>np.cos(x)</td><td>元素余弦。</td></tr><tr><td>np.tan(x)</td><td>逐元素计算切线。</td></tr><tr><td>np.round(x)</td><td>四舍五入</td></tr><tr><td>np.floor(x)</td><td>向下取整</td></tr><tr><td>np.ceil(x)</td><td>向上取整</td></tr><tr><td>数组的统计运算</td><td></td></tr><tr><td>NumPy有很多有用的统计函数，用于从数组中给定的元素中查找最小，最大，百分标准差和方差等。</td><td></td></tr><tr><td><strong>常用统计函数：</strong></td><td></td></tr></tbody></table><table><thead><tr><th><strong>函数名称</strong></th><th><strong>NaN安全版本</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>np.sum()</td><td>np.nansum()</td><td>计算元素的和</td></tr><tr><td>np.min()</td><td>np.nanmin()</td><td>找出最小值</td></tr><tr><td>np.max()</td><td>np.nanmax()</td><td>找出最大值</td></tr><tr><td>np.prod()</td><td>np.nanprod()</td><td>计算元素的积</td></tr><tr><td>np.ptp()</td><td>N&#x2F;A</td><td>计算元素的极差（最大值 - 最小值）</td></tr><tr><td>np.mean()</td><td>np.nanmean()</td><td>计算元素的算术平均值</td></tr><tr><td>np.std()</td><td>np.nanstd()</td><td>计算标准差</td></tr><tr><td>np.var()</td><td>np.nanvar()</td><td>计算方差</td></tr><tr><td>np.percentile()</td><td>np.nanpercentile()</td><td>计算百分位数</td></tr><tr><td>np.median()</td><td>np.nanmedian()</td><td>计算中位数</td></tr><tr><td>np.average()</td><td>N&#x2F;A</td><td>返回数组的加权平均值</td></tr><tr><td>np.any()</td><td>N&#x2F;A</td><td>验证任何一个元素是否为真</td></tr><tr><td>np.all()</td><td>N&#x2F;A</td><td>验证所有元素是否为真</td></tr></tbody></table><h2 id="数组的线性代数函数"><a href="#数组的线性代数函数" class="headerlink" title="数组的线性代数函数"></a>数组的线性代数函数</h2><p>NumPy拥有numpy.linalg 模块，提供线性代数所需的所有功能。</p><ul><li>np.dot() 返回两个数组的点积</li><li>np.vdot() 返回两个向量的点积</li><li>np.inner() 返回一维数组的向量内积</li><li>np.matmul() 返回两个数组的矩阵乘积</li><li>np.linalg.det() 计算输入矩阵的行列式</li><li>np.linalg.solve() 求解矩阵形式的线性方程的解</li><li>np.linalg.inv() 计算矩阵的逆</li></ul><h2 id="Pandas-DataFrame的创建"><a href="#Pandas-DataFrame的创建" class="headerlink" title="Pandas-DataFrame的创建"></a>Pandas-DataFrame的创建</h2><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                   index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                   columns<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                  dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                   copy<span class="token operator">=</span><span class="token boolean">False</span>                  <span class="token punctuation">)</span></code></pre></div></figure><h2 id="由Series创建DataFrame"><a href="#由Series创建DataFrame" class="headerlink" title="由Series创建DataFrame"></a>由Series创建DataFrame</h2><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div></figure><h2 id="二维array创建DataFrame"><a href="#二维array创建DataFrame" class="headerlink" title="二维array创建DataFrame"></a>二维array创建DataFrame</h2><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre></div></figure><h2 id="利用字典创建DataFrame"><a href="#利用字典创建DataFrame" class="headerlink" title="利用字典创建DataFrame"></a>利用字典创建DataFrame</h2><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">d1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>d1<span class="token punctuation">)</span></code></pre></div></figure><p>在创建过程中，字典的Key会编程column名称，并且系统会自动生成index.</p>]]></content>
    
    
    <categories>
      
      <category>数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础知识</title>
    <link href="/2022/11/15/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/11/15/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<ul><li>列表是有序的可变容器</li><li>元组是有序的不可变容器</li><li>字典是无序的可变容器–&gt;字典也被称作关联数组或者哈希表</li><li>集合是无序且不可变类型容器</li></ul><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>[\b]</td><td>回退（删除）一个字符</td></tr><tr><td>\f</td><td>换页符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车符</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr></tbody></table><h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><ul><li>find–&gt;返回某个字符串位置</li><li>replace–&gt;替换某个字符串</li><li>strip–&gt;去除某个字符串</li><li>split–&gt;以某个字符串前后拆分，不保留分隔符号，返回列表</li><li>partition –&gt;以某个字符串前后拆分，保留分隔符号，返回元组</li><li>index–&gt;返回某个字符串的索引</li><li>upper&amp;lower–&gt;转换大小写</li><li>join –&gt;用于在指定字符串中间穿插其他字符串</li><li>format–&gt;格式化输出</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><ul><li>append–&gt;一次加一个</li><li>extend–&gt;一次加多个</li><li>insert–&gt;指定索引位置插入</li><li>pop –&gt;指定索引位置删除</li><li>remove–&gt;移除指定元素</li><li>del–&gt;删除整个对象</li><li>clear–&gt;清空整个列表</li><li>index–&gt;返回列表元素的索引</li><li>count–&gt;统计列表元素出现次数</li><li>in–&gt;</li><li>sort–&gt;排序，可选reverse&#x3D;True反转</li><li>reverse–&gt;反转列表</li></ul><h2 id="元组方法"><a href="#元组方法" class="headerlink" title="元组方法"></a>元组方法</h2><ul><li>count</li><li>index</li><li>in</li></ul><h2 id="字典方法"><a href="#字典方法" class="headerlink" title="字典方法"></a>字典方法</h2><ul><li>keys()&#x2F;Values()–&gt;返回键&#x2F;值对象，需要使用list和tuple转换</li><li>items–&gt;返回键值元组</li><li>update–&gt;有顺序更新，有方向更新，替换重复值</li><li>setdefault–&gt;选择性更新，原位置已有值返回原值，无值返回新值d.setdefault(‘A’, 5)</li></ul><h2 id="集合方法"><a href="#集合方法" class="headerlink" title="集合方法"></a>集合方法</h2><ul><li>add –&gt;添加一个元素</li><li>remove–&gt;移除一个元素</li><li>pop–&gt;随机删除一个元素</li><li>交集运算符–&gt;&amp;    intersectionintersection_update</li><li>并集运算符–&gt;|    union  update</li><li>差集运算符–&gt;-    differencedifference_update</li><li>补集运算符–&gt;^    symmetric_differencesymmetric_difference_update</li><li>集合关系判断 –&gt;     issubset issupersetisdisjoint</li><li>冻集合——不可变集合类型</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>定义函数</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""让输入的两个对象利用加号运算符进行相加    参数：\n    a：函数输入的第一个对象\n    b：函数输入的第二个对象\n    return，返回a+b的结果    """</span>    c <span class="token operator">=</span> a <span class="token operator">+</span> b                   <span class="token keyword">return</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>   </code></pre></div></figure><h2 id="形参和全局变量"><a href="#形参和全局变量" class="headerlink" title="形参和全局变量"></a>形参和全局变量</h2><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"> <span class="token comment"># 定义时小括号中的参数，用来接收参数用的，称为 “形参”（形式参数），</span>    <span class="token comment"># 而调用时小括号中的参数，用来传递给函数用的，称为 “实参”（实际参数） </span><span class="token keyword">def</span> <span class="token function">sum_1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>                c <span class="token operator">=</span> a <span class="token operator">+</span> b                    <span class="token keyword">return</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>      <span class="token keyword">def</span> <span class="token function">sum_2</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a <span class="token comment"># 声明全局变量</span>    a <span class="token operator">+=</span> b    <span class="token keyword">return</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    </code></pre></div></figure><h2 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h2><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_2</span><span class="token punctuation">(</span><span class="token operator">*</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>               <span class="token comment"># 此时*num就是一个可变长参数</span>    r <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> num<span class="token punctuation">:</span>              <span class="token comment"># 但可变长参数名仍然是num而非*num</span>        r <span class="token operator">+=</span> i    <span class="token keyword">return</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span></code></pre></div></figure><h2 id="类Class"><a href="#类Class" class="headerlink" title="类Class"></a>类Class</h2><h3 id="定义静态属性"><a href="#定义静态属性" class="headerlink" title="定义静态属性"></a>定义静态属性</h3><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''人类'''</span>    mam <span class="token operator">=</span> <span class="token boolean">True</span>     定义动态属性<span class="token triple-quoted-string string">"""__init__函数解释：      是一种特殊函数，也称为是构造函数，多用于带参数属性的类的创建过程；self是一个特殊的参数，相当于类本身的一种表示，相当于是C中的指针“this”，是init函数必须设置的第一个参数；类中定义的函数也需要传入self参数；这些函数可以通过外部调用方法的方式进行调用。"""</span><span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''人类'''</span>    mam <span class="token operator">=</span> <span class="token boolean">True</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> gender <span class="token operator">=</span> <span class="token string">'Unknow'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        self<span class="token punctuation">.</span>gender <span class="token operator">=</span> gender        zs <span class="token operator">=</span> Human<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">)</span>       <span class="token comment"># 重新设置属性</span><span class="token keyword">class</span> <span class="token class-name">Human1</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''人类'''</span>    mam <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token decorator annotation punctuation">@property</span>             <span class="token comment">#属性私有化，防止被修改</span>    <span class="token keyword">def</span> <span class="token function">mam</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token triple-quoted-string string">"""property，则可将方法转化为属性。因此，上述类的创建，相当于创建了一个属性mam和一个同名方法mam，并且将同名方法转化为了属性"""</span></code></pre></div></figure><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                       self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y    <span class="token keyword">def</span> <span class="token function">dis</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>x <span class="token operator">-</span> p<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>y <span class="token operator">-</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span><span class="token keyword">class</span> <span class="token class-name">Point1</span><span class="token punctuation">(</span>Point<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment"># 继承自Point类</span>    <span class="token keyword">def</span> <span class="token function">dis</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>x <span class="token operator">-</span> p<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>y <span class="token operator">-</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div></figure><h2 id="二维到多维"><a href="#二维到多维" class="headerlink" title="二维到多维"></a>二维到多维</h2><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Point2</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义一个可变长数组，并将其转化为列表对象</span>        self<span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Point2</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>                       self<span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">dis</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            t<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> p<span class="token punctuation">.</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span></code></pre></div></figure><h2 id="函数和方法的区别"><a href="#函数和方法的区别" class="headerlink" title="函数和方法的区别"></a>函数和方法的区别</h2><blockquote><p>函数和方法的区别：方法是定义在类里面的函数！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在Markdown里使用Echarts图表？</title>
    <link href="/2022/11/14/%E5%A6%82%E4%BD%95%E5%9C%A8Markdown%E9%87%8C%E4%BD%BF%E7%94%A8Echarts%E5%9B%BE%E8%A1%A8%EF%BC%9F/"/>
    <url>/2022/11/14/%E5%A6%82%E4%BD%95%E5%9C%A8Markdown%E9%87%8C%E4%BD%BF%E7%94%A8Echarts%E5%9B%BE%E8%A1%A8%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="使用HTML润色文本"><a href="#使用HTML润色文本" class="headerlink" title="使用HTML润色文本"></a>使用HTML润色文本</h2><p><span  style="color: #519D9E; ">#519D9E颜色演示</span></p><h2 id="Markdown里图片引入的三种方法"><a href="#Markdown里图片引入的三种方法" class="headerlink" title="Markdown里图片引入的三种方法"></a>Markdown里图片引入的三种方法</h2><ul><li>第一种</li></ul><figure><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://images.unsplash.com/photo-1533257266619-e841826ce739?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2369&amp;q=80<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>some_text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></div></figure><img src="https://images.unsplash.com/photo-1533257266619-e841826ce739?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2369&q=80" alt="some_text"><ul><li>第二种</li></ul><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">![图片引用方法二](&#x2F;image&#x2F;test.jpg)</code></pre></div></figure><p><img src="/image/test.jpg" alt="图片引用方法三"></p><ul><li>第三种</li></ul><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">&#123;% asset_img image&#x2F;test.png 图片引用方法一 %&#125;</code></pre></div></figure><img class="test.jpg 图片引用方法一"><h2 id="引入外部HTML-使用iframe"><a href="#引入外部HTML-使用iframe" class="headerlink" title="引入外部HTML - 使用iframe"></a>引入外部HTML - 使用iframe</h2><iframe src="//https://jaling9.github.io/index.html" width="100%" height="400" name="topFrame" scrolling="yes" noresize="noresize" frameborder="0" id="topFrame"> </iframe><p>也可以是视频音乐等</p><figure><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//player.bilibili.com/player.html?aid=689464853&amp;bvid=BV1Wm4y1F7cs&amp;cid=871780885&amp;page=1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>topFrame<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span> <span class="token attr-name">noresize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noresize<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>topFrame<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span></code></pre></div></figure><iframe src="//player.bilibili.com/player.html?aid=689464853&bvid=BV1Wm4y1F7cs&cid=871780885&page=1" width="100%" height="400" name="topFrame" scrolling="yes" noresize="noresize" frameborder="0" id="topFrame"> </iframe><h2 id="引入本地echasrts-方法一-使用iframe引入html文件"><a href="#引入本地echasrts-方法一-使用iframe引入html文件" class="headerlink" title="引入本地echasrts 方法一 使用iframe引入html文件"></a>引入本地echasrts 方法一 使用iframe引入html文件</h2><iframe src="//html-echarts/render.html" width="100%" height="600" name="topFrame" scrolling="yes" noresize="noresize" frameborder="0" id="topFrame"></iframe><h2 id="引入本地echarts-方法二-直接写HTML和JS"><a href="#引入本地echarts-方法二-直接写HTML和JS" class="headerlink" title="引入本地echarts 方法二 直接写HTML和JS"></a>引入本地echarts 方法二 直接写HTML和JS</h2><figure><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token property">weight</span><span class="token punctuation">:</span>100%<span class="token punctuation">:</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">weight</span><span class="token punctuation">:</span>100%</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token property">weight</span><span class="token punctuation">:</span>100%</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fastly.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">renderer</span><span class="token operator">:</span> <span class="token string">'canvas'</span><span class="token punctuation">,</span>            <span class="token literal-property property">useDirtyRect</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> option<span class="token punctuation">;</span>        option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'#2c343c'</span><span class="token punctuation">,</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Customized Pie'</span><span class="token punctuation">,</span>                <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>                <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>                <span class="token literal-property property">textStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#ccc'</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'item'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">visualMap</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>                <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>                <span class="token literal-property property">inRange</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">colorLightness</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Access From'</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'pie'</span><span class="token punctuation">,</span>                <span class="token literal-property property">radius</span><span class="token operator">:</span> <span class="token string">'55%'</span><span class="token punctuation">,</span>                <span class="token literal-property property">center</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'50%'</span><span class="token punctuation">,</span> <span class="token string">'50%'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">335</span><span class="token punctuation">,</span>                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Direct'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">310</span><span class="token punctuation">,</span>                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Email'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">274</span><span class="token punctuation">,</span>                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Union Ads'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">235</span><span class="token punctuation">,</span>                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Video Ads'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Search Engine'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> a<span class="token punctuation">.</span>value <span class="token operator">-</span> b<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">roseType</span><span class="token operator">:</span> <span class="token string">'radius'</span><span class="token punctuation">,</span>                <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'rgba(255, 255, 255, 0.3)'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">labelLine</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">lineStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'rgba(255, 255, 255, 0.3)'</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token literal-property property">smooth</span><span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span>                    <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>                    <span class="token literal-property property">length2</span><span class="token operator">:</span> <span class="token number">20</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#c23531'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">shadowBlur</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>                    <span class="token literal-property property">shadowColor</span><span class="token operator">:</span> <span class="token string">'rgba(0, 0, 0, 0.5)'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">animationType</span><span class="token operator">:</span> <span class="token string">'scale'</span><span class="token punctuation">,</span>                <span class="token literal-property property">animationEasing</span><span class="token operator">:</span> <span class="token string">'elasticOut'</span><span class="token punctuation">,</span>                <span class="token function-variable function">animationDelay</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">idx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>option <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> option <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> myChart<span class="token punctuation">.</span>resize<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre></div></figure><body style="height: 600px;;weight:100%: margin: 0;weight:100%">    <div id="container" style="height: 400px;weight:100%"></div>    <script type="text/javascript" src="https://fastly.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js"></script>    <script type="text/javascript">        var dom = document.getElementById('container');        var myChart = echarts.init(dom, null, {            renderer: 'canvas',            useDirtyRect: false        });        var app = {};        var option;        option = {            backgroundColor: '#2c343c',            title: {                text: 'Customized Pie',                left: 'center',                top: 20,                textStyle: {                    color: '#ccc'                }            },            tooltip: {                trigger: 'item'            },            visualMap: {                show: false,                min: 80,                max: 600,                inRange: {                    colorLightness: [0, 1]                }            },            series: [{                name: 'Access From',                type: 'pie',                radius: '55%',                center: ['50%', '50%'],                data: [{                    value: 335,                    name: 'Direct'                }, {                    value: 310,                    name: 'Email'                }, {                    value: 274,                    name: 'Union Ads'                }, {                    value: 235,                    name: 'Video Ads'                }, {                    value: 400,                    name: 'Search Engine'                }].sort(function(a, b) {                    return a.value - b.value;                }),                roseType: 'radius',                label: {                    color: 'rgba(255, 255, 255, 0.3)'                },                labelLine: {                    lineStyle: {                        color: 'rgba(255, 255, 255, 0.3)'                    },                    smooth: 0.2,                    length: 10,                    length2: 20                },                itemStyle: {                    color: '#c23531',                    shadowBlur: 200,                    shadowColor: 'rgba(0, 0, 0, 0.5)'                },                animationType: 'scale',                animationEasing: 'elasticOut',                animationDelay: function(idx) {                    return Math.random() * 200;                }            }]        };        if (option && typeof option === 'object') {            myChart.setOption(option);        }        window.addEventListener('resize', myChart.resize);    </script></body><h2 id="引入本地echarts-方法三-使用tags语法引入JS代码"><a href="#引入本地echarts-方法三-使用tags语法引入JS代码" class="headerlink" title="引入本地echarts 方法三 使用tags语法引入JS代码"></a>引入本地echarts 方法三 使用tags语法引入JS代码</h2><p>通过jsDelivr的CDN引入echarts</p><script src="https://cdn.jsdelivr.net/npm/echarts@4.8.0/dist/echarts.min.js"></script><p>使用GL里的各种组件时需要添加，否则可不需要</p><script src="https://cdn.jsdelivr.net/npm/echarts-gl@1.1.1/dist/echarts-gl.min.js"></script><figure><div class="code-wrapper"><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">%</span> echarts <span class="token number">400</span> <span class="token string">'85%'</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 基于准备好的dom，初始化echarts实例</span>    <span class="token keyword">var</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 指定图表的配置项和数据</span>    <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span> <span class="token operator">%</span> echarts <span class="token number">400</span> <span class="token string">'85%'</span> <span class="token operator">%</span>        <span class="token punctuation">&#125;</span>        option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'堆叠区域图'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'axis'</span><span class="token punctuation">,</span>                <span class="token literal-property property">axisPointer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'cross'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'#6a7985'</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">legend</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'邮件营销'</span><span class="token punctuation">,</span> <span class="token string">'联盟广告'</span><span class="token punctuation">,</span> <span class="token string">'视频广告'</span><span class="token punctuation">,</span> <span class="token string">'直接访问'</span><span class="token punctuation">,</span> <span class="token string">'搜索引擎'</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">toolbox</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">feature</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">saveAsImage</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">grid</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'3%'</span><span class="token punctuation">,</span>                <span class="token literal-property property">right</span><span class="token operator">:</span> <span class="token string">'4%'</span><span class="token punctuation">,</span>                <span class="token literal-property property">bottom</span><span class="token operator">:</span> <span class="token string">'3%'</span><span class="token punctuation">,</span>                <span class="token literal-property property">containLabel</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">xAxis</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span>                <span class="token literal-property property">boundaryGap</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'周一'</span><span class="token punctuation">,</span> <span class="token string">'周二'</span><span class="token punctuation">,</span> <span class="token string">'周三'</span><span class="token punctuation">,</span> <span class="token string">'周四'</span><span class="token punctuation">,</span> <span class="token string">'周五'</span><span class="token punctuation">,</span> <span class="token string">'周六'</span><span class="token punctuation">,</span> <span class="token string">'周日'</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">yAxis</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'value'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'邮件营销'</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'line'</span><span class="token punctuation">,</span>                <span class="token literal-property property">stack</span><span class="token operator">:</span> <span class="token string">'总量'</span><span class="token punctuation">,</span>                <span class="token literal-property property">areaStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">132</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'联盟广告'</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'line'</span><span class="token punctuation">,</span>                <span class="token literal-property property">stack</span><span class="token operator">:</span> <span class="token string">'总量'</span><span class="token punctuation">,</span>                <span class="token literal-property property">areaStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">182</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">290</span><span class="token punctuation">,</span> <span class="token number">330</span><span class="token punctuation">,</span> <span class="token number">310</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'视频广告'</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'line'</span><span class="token punctuation">,</span>                <span class="token literal-property property">stack</span><span class="token operator">:</span> <span class="token string">'总量'</span><span class="token punctuation">,</span>                <span class="token literal-property property">areaStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">232</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">,</span> <span class="token number">154</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">330</span><span class="token punctuation">,</span> <span class="token number">410</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'直接访问'</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'line'</span><span class="token punctuation">,</span>                <span class="token literal-property property">stack</span><span class="token operator">:</span> <span class="token string">'总量'</span><span class="token punctuation">,</span>                <span class="token literal-property property">areaStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">332</span><span class="token punctuation">,</span> <span class="token number">301</span><span class="token punctuation">,</span> <span class="token number">334</span><span class="token punctuation">,</span> <span class="token number">390</span><span class="token punctuation">,</span> <span class="token number">330</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'搜索引擎'</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'line'</span><span class="token punctuation">,</span>                <span class="token literal-property property">stack</span><span class="token operator">:</span> <span class="token string">'总量'</span><span class="token punctuation">,</span>                <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">'top'</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">areaStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">820</span><span class="token punctuation">,</span> <span class="token number">932</span><span class="token punctuation">,</span> <span class="token number">901</span><span class="token punctuation">,</span> <span class="token number">934</span><span class="token punctuation">,</span> <span class="token number">1290</span><span class="token punctuation">,</span> <span class="token number">1330</span><span class="token punctuation">,</span> <span class="token number">1320</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span> endecharts <span class="token operator">%</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 使用刚指定的配置项和数据显示图表。</span>    myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 刷新调整</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onresize</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        myChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endecharts <span class="token operator">%</span><span class="token punctuation">&#125;</span></code></pre></div></figure><div id="echarts5524" style="width: 85%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts5524'));        // 指定图表的配置项和数据        var option =  option = { title: { text: '堆叠区域图' }, tooltip: { trigger: 'axis', axisPointer: { type: 'cross', label: { backgroundColor: '#6a7985' } } }, legend: { data: ['邮件营销', '联盟广告', '视频广告', '直接访问', '搜索引擎'] }, toolbox: { feature: { saveAsImage: {} } }, grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true }, xAxis: [ { type: 'category', boundaryGap: false, data: ['周一', '周二', '周三', '周四', '周五', '周六', '周日'] } ], yAxis: [ { type: 'value' } ], series: [ { name: '邮件营销', type: 'line', stack: '总量', areaStyle: {}, data: [120, 132, 101, 134, 90, 230, 210] }, { name: '联盟广告', type: 'line', stack: '总量', areaStyle: {}, data: [220, 182, 191, 234, 290, 330, 310] }, { name: '视频广告', type: 'line', stack: '总量', areaStyle: {}, data: [150, 232, 201, 154, 190, 330, 410] }, { name: '直接访问', type: 'line', stack: '总量', areaStyle: {}, data: [320, 332, 301, 334, 390, 330, 320] }, { name: '搜索引擎', type: 'line', stack: '总量', label: { normal: { show: true, position: 'top' } }, areaStyle: {}, data: [820, 932, 901, 934, 1290, 1330, 1320] } ] };        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script><div id="echarts3242" style="width: 85%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts3242'));        // 指定图表的配置项和数据        var option =  option = { xAxis: { type: 'category', boundaryGap: false }, yAxis: { type: 'value', boundaryGap: [0, '30%'] }, visualMap: { type: 'piecewise', show: false, dimension: 0, seriesIndex: 0, pieces: [{ gt: 1, lt: 3, color: 'rgba(0, 180, 0, 0.5)' }, { gt: 5, lt: 7, color: 'rgba(0, 180, 0, 0.5)' }] }, series: [ { type: 'line', smooth: 0.6, symbol: 'none', lineStyle: { color: 'green', width: 5 }, markLine: { symbol: ['none', 'none'], label: {show: false}, data: [ {xAxis: 1}, {xAxis: 3}, {xAxis: 5}, {xAxis: 7} ] }, areaStyle: {}, data: [ ['2019-10-10', 200], ['2019-10-11', 400], ['2019-10-12', 650], ['2019-10-13', 500], ['2019-10-14', 250], ['2019-10-15', 300], ['2019-10-16', 450], ['2019-10-17', 300], ['2019-10-18', 100] ] } ] };         // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script><div id="echarts1040" style="width: 85%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts1040'));        // 指定图表的配置项和数据        var option = option = {           backgroundColor: '#2c343c',           title: {               text: 'Customized Pie',               left: 'center',               top: 20,               textStyle: {                   color: '#ccc'               }           },           tooltip: {               trigger: 'item'           },           visualMap: {               show: false,               min: 80,               max: 600,               inRange: {                   colorLightness: [0, 1]               }           },           series: [{               name: 'Access From',               type: 'pie',               radius: '55%',               center: ['50%', '50%'],               data: [{                   value: 335,                   name: 'Direct'               }, {                   value: 310,                   name: 'Email'               }, {                   value: 274,                   name: 'Union Ads'               }, {                   value: 235,                   name: 'Video Ads'               }, {                   value: 400,                   name: 'Search Engine'               }].sort(function(a, b) {                   return a.value - b.value;               }),               roseType: 'radius',               label: {                   color: 'rgba(255, 255, 255, 0.3)'               },               labelLine: {                   lineStyle: {                       color: 'rgba(255, 255, 255, 0.3)'                   },                   smooth: 0.2,                   length: 10,                   length2: 20               },               itemStyle: {                   color: '#c23531',                   shadowBlur: 200,                   shadowColor: 'rgba(0, 0, 0, 0.5)'               },               animationType: 'scale',               animationEasing: 'elasticOut',               animationDelay: function(idx) {                   return Math.random() * 200;               }           }]       };        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script><blockquote><p>参考：<br><a href="https://hexo.fluid-dev.com/posts/hexo-echarts/#">https://hexo.fluid-dev.com/posts/hexo-echarts/#</a><br><a href="https://pxxyyz.com/posts/html-in-Fluid/#">https://pxxyyz.com/posts/html-in-Fluid/#</a><br><a href="https://echarts.apache.org/examples/zh/index.html#chart-type-bar">https://echarts.apache.org/examples/zh/index.html#chart-type-bar</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo d博客部署报错</title>
    <link href="/2022/11/14/hexo%E6%8A%A5%E9%94%99/"/>
    <url>/2022/11/14/hexo%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<p><code>hexo d</code> 博客部署的时候出现下面这各错误，是网络问题，换个代理节点就好了。</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;xx&#x2F;xx.github.io&#x2F;&#39;: OpenSSL SSL_read: Connection was reset, errno 10054FATAL &#123;  err: Error: Spawn failed      at ChildProcess.&lt;anonymous&gt; (D:\Blog\hexo\node_modules\hexo-util\lib\spawn.js:51:21)      at ChildProcess.emit (events.js:315:20)      at ChildProcess.cp.emit (D:\Blog\hexo\node_modules\cross-spawn\lib\enoent.js:34:29)      at Process.ChildProcess._handle.onexit (internal&#x2F;child_process.js:277:12)&#123;    code: 128  &#125;&#125; Something&#39;s wrong. Maybe you can find the solution here: %s https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyEcharts学习总结</title>
    <link href="/2022/11/13/pyecharts%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2022/11/13/pyecharts%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>pyecharts 分为 <code>v0.5.x</code> 和 <code>v1.0.0+</code> 两个版本，这篇总结针对新版本。</p></blockquote><blockquote><p>本文不包含基础例子的演示，主要记录一些细节方面的理解。简介中推荐的网站有相关示例。</p></blockquote><h2 id="一、简介-–-Echarts-amp-PyEcharts"><a href="#一、简介-–-Echarts-amp-PyEcharts" class="headerlink" title="一、简介 – Echarts &amp; PyEcharts"></a>一、简介 – Echarts &amp; PyEcharts</h2><p><a href="https://github.com/apache/echarts">Echarts</a> 是一个基于 JavaScript 的图表库，用于在 HTML 中生成可交互的图表。关于更多 js 图表库可以参考 CSDN 上的 <a href="https://blog.csdn.net/Pokemogo/article/details/78864664">这篇博客</a>。<a href="https://github.com/pyecharts/pyecharts">PyEcharts</a> 旨在提供在 Python 中使用 Echarts 的 API，以便将数据可视化的流程整合到 Python 数据处理的流程当中。</p><p><strong>以下是四个文档和示例网站，各有特点。利用好这几个网站基本上就可以解决所有可能遇到的问题，而不需要在搜索引擎中漫无目的地翻查。</strong>（喜欢这篇文章的新手朋友，建议先撸一遍下面 gallery.pyecharts.org 里面的代码再来看，因为文章写得不好，入门者很可能一头雾水）</p><ul><li><strong>Echarts</strong><ul><li><a href="https://www.w3cschool.cn/echarts_tutorial">https://www.w3cschool.cn/echarts_tutorial</a> （配置项的文档非常详尽）</li><li><a href="https://echarts.apache.org/zh/index.html">https://echarts.apache.org/zh/index.html</a> （<a href="https://echarts.apache.org/examples/zh/index.html">示例</a>中有很多出色的可视化例子）</li></ul></li><li><strong>PyEcharts</strong><ul><li><a href="https://pyecharts.org/#/zh-cn/intro">https://pyecharts.org/#/zh-cn/intro</a> （PyEcharts 的 API 文档）</li><li><a href="https://gallery.pyecharts.org/#/README">https://gallery.pyecharts.org/#/README</a> （PyEcharts 绘图的示例和代码）</li></ul></li></ul><h3 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h3><p>首先通过一个简单的例子了解 Echarts 的工作方式，注意到使用 Echarts 需要 HTML 语言基础，进阶则需要 js 和 css 的基础。（如果只是在 Python 中进行可视化，对前面三件套的要求不高，基本上看看例子就能摸索出来写法，编程语言都是共通的。）</p><figure><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>MyCharts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 引入echarts.js 很多cdn源都可以引用 视情况使用 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/echarts@latest/dist/echarts.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 图表容器--整个网页就是一个div 内容都是通过echarts.min.js渲染出来的 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>400px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 图表渲染的js代码 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token comment">// 初始化echarts实例</span>      <span class="token keyword">var</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 指定图表的配置项和数据</span>      <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// option变量的内容是一个js对象类型(Object) 类似python中的字典类型</span>          <span class="token comment">// option对象的属性(Attribute)可以赋值为各种js基本类型 包括对象类型</span>          <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'ECharts 入门示例'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 图表标题选项</span>          <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                      <span class="token comment">// 工具提示选项</span>          <span class="token literal-property property">legend</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'销量'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token comment">// 图例选项</span>          <span class="token literal-property property">xAxis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"衬衫"</span><span class="token punctuation">,</span><span class="token string">"羊毛衫"</span><span class="token punctuation">,</span><span class="token string">"雪纺衫"</span><span class="token punctuation">,</span><span class="token string">"裤子"</span><span class="token punctuation">,</span><span class="token string">"高跟鞋"</span><span class="token punctuation">,</span><span class="token string">"袜子"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token literal-property property">yAxis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 缺省时没有标注</span>          <span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>  <span class="token comment">// series就是图表主体部分用到的数据</span>              <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'销量'</span><span class="token punctuation">,</span>   <span class="token comment">// name参数用于区分多个series</span>              <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>    <span class="token comment">// 图表类型 可以是line,scatter等</span>              <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token comment">// 图表主体的数据 这里就是bar的长度</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token comment">// 使用刚指定的配置项和数据显示图表。</span>      myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></div></figure><p><img src="https://paradiseeee.github.io/post-assets/20201221/basic.png"></p><p>将上述代码保存为 html 文件在浏览器打开就可以看到图表了（左图），如果直接将 <code>&lt;head&gt;</code> 中引用的 js 文件保存到本地，将引用链接改为本地文件链接，那么无网络的情况下也可以显示。清楚了原理很容易就可以画出自己想要的图表，比如将上述代码中 <code>option.series[0].type</code> 的值改为 <code>line</code>，条形图就变成折线图了（右图）。将 <code>option.series[0].data</code> 中的数据改为自己的数据，就可以可视化自己的数据了。</p><h3 id="PyEcharts"><a href="#PyEcharts" class="headerlink" title="PyEcharts"></a>PyEcharts</h3><p>但是在实际的数据可视化中，我们的数据可能要成千上万行，绘制的图表也有很多个，不可能手动复制粘贴去修改，这时候就需要用到 pyecharts 了。首先通过 <code>pip install pyecharts --upgrade</code> 安装或更新到最新版。绘制以上同样的图表，只需要以下的代码：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 引入子模块</span><span class="token keyword">from</span> pyecharts <span class="token keyword">import</span> charts <span class="token keyword">as</span> pyc<span class="token keyword">from</span> pyecharts <span class="token keyword">import</span> options <span class="token keyword">as</span> opts<span class="token comment"># 这里链式调用，也可以先实例化一个 charts 对象再一步步设置</span>bar <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token comment"># 实例化：</span>    pyc<span class="token punctuation">.</span>Bar<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 对应上面html文档中的 option.XAxis.data：</span>    <span class="token punctuation">.</span>add_xaxis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"衬衫"</span><span class="token punctuation">,</span> <span class="token string">"羊毛衫"</span><span class="token punctuation">,</span> <span class="token string">"雪纺衫"</span><span class="token punctuation">,</span> <span class="token string">"裤子"</span><span class="token punctuation">,</span> <span class="token string">"高跟鞋"</span><span class="token punctuation">,</span> <span class="token string">"袜子"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 对应上面html文档中的 option.series：</span>    <span class="token comment"># 注意到 option.series 是js数组类型，也就是可以添加多个序列</span>    <span class="token punctuation">.</span>add_yaxis<span class="token punctuation">(</span><span class="token string">"销量"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment"># global_opts 对应上面html文档中的 option 的属性</span>    <span class="token comment"># 例如 option.title 通过 title_opts 参数设置</span>    <span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>title_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>TitleOpts<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">"Echarts 入门示例"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 在当前目录生成默认名称为 render.html 的文档</span>bar<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div></figure><p>通过这个例子就可以理解，pyecharts 就是通过 python 代码设置 js 代码里面的变量，然后生成 html 文档。生成的 html 文档不同的是 pyecharts 会把缺省的参数自动填充默认值，所以生成的 html 代码会比上面自己写的长很多。从这里也可以明白为什么说使用 pyecharts 要使用开始介绍的两个 echarts 的网站，因为参数都是对应的。<strong>pyecharts 文档中没查到的参数设置，可以到 echarts 的教程上面查找。</strong></p><h2 id="二、常用图表"><a href="#二、常用图表" class="headerlink" title="二、常用图表"></a>二、常用图表</h2><p>pyecharts 整个项目结构见下图。绘图时用到的所有类都在 <code>pyecharts.charts</code> 子模块中，<code>pyecharts.charts</code> 中所有的图表类都直接或间接继承于 <code>pycharts.Base</code> 类。由于图表类型不同，中间又有不同图表类型的子类，如直角坐标系图表类、 3D 图表类、极坐标图表类，等。相同图表类型的图表绘图方法高度一致，在文章开始介绍的两个 pyecharts 网站中可以找到 API 文档和图表示例代码，比较简单，这里就不做示例了。</p><p><img src="https://paradiseeee.github.io/post-assets/20201221/tree.png"></p><h2 id="三、选项配置"><a href="#三、选项配置" class="headerlink" title="三、选项配置"></a>三、选项配置</h2><p>选项配置主要是 set_global_opts 和 set_series_opts 两个方法，顾名思义前者设置的是对应的 js 代码中 <code>option</code> 变量的属性，后者设置的对应的 js 代码中 <code>option.series</code> 的属性。</p><h3 id="常用-options"><a href="#常用-options" class="headerlink" title="常用 options"></a>常用 options</h3><p>常用的 options 分为四类，对应一般绘图时的四个步骤，注意不是所有图表类的对应方法都通用，在 pyecharts.org 中参考对应方法的文档使用，或者在 ipython 中使用魔术命令： <code>Bar.set_global_opts?</code>、<code>opts.ItemStyleOpts?</code> 等查看对应参数和用法。另外这些 options 是层层嵌套的，比如在 <code>opts.AxisOpts</code> 里面，又有用到 <code>opts.LabelOpts</code> 来定义坐标轴标签的样式，这里就不深挖了，只列举第一层的常用选项。</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 图表类的 init_opts，设置图表整体风格，大小等</span><span class="token keyword">from</span> pyecharts <span class="token keyword">import</span> <span class="token builtin">globals</span> <span class="token keyword">as</span> glbsBar<span class="token punctuation">(</span>init_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>InitOpts<span class="token punctuation">(</span>    glbs<span class="token punctuation">.</span>ThemeType<span class="token punctuation">.</span>DARK<span class="token punctuation">,</span> bg_color<span class="token operator">=</span><span class="token string">'#1a1c1d'</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token string">'100%'</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token string">'400px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-javascript" data-language="javascript"><code class="language-javascript"># 使用 add 方法（泛指 add_yaxis<span class="token punctuation">,</span> add_schema 等）时的 optionsitemstyle_opts <span class="token operator">=</span> opts<span class="token punctuation">.</span><span class="token function">ItemStyleOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           # 元素样式，如散点图的点emphasis_itemstyle_opts <span class="token operator">=</span> opts<span class="token punctuation">.</span><span class="token function">ItemStyleOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  # 元素高亮样式linestyle_opts <span class="token operator">=</span> opts<span class="token punctuation">.</span><span class="token function">LineStyleOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           # 用于 Line<span class="token punctuation">.</span>add_yaxis 里面</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-javascript" data-language="javascript"><code class="language-javascript"># set_series_opts 中的 optionstooltip_opts <span class="token operator">=</span> opts<span class="token punctuation">.</span><span class="token function">TooltipOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       # 工具提示itemstyle_opts <span class="token operator">=</span> opts<span class="token punctuation">.</span><span class="token function">ItemStyleOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   # 元素样式label_opts <span class="token operator">=</span> opts<span class="token punctuation">.</span><span class="token function">LabelOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           # 标签样式，例如条形图顶部显示的数值areastyle_opts <span class="token operator">=</span> opts<span class="token punctuation">.</span><span class="token function">AreaStyleOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   # 区域样式，例如线形图与坐标轴围成的区域</code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none"># set_global_opts 中的 optionstitle_opts &#x3D; opts.TitleOpts()           # 标题、副标题及其字体颜色等样式xaxis_opts &#x3D; opts.AxisOpts()            # 坐标轴的样式，如轴线样式，文字旋转等yaxis_opts &#x3D; opts.AxisOpts()            # 同上datazoom_opts &#x3D; opts.DataZoomOpts()     # 数据过多时可以使用类似滚动条的插件legend_opts &#x3D; opts.LegendOpts()         # 图例是否显示、样式及其位置等visualmap_opts &#x3D; opts.VisualMapOpts()   # 视觉映射，例如按系列值的大小给元素着色toolbox_opts &#x3D; opts.ToolboxOpts()       # 在图中加入放大缩小，导出图片等工具按钮graphic_opts &#x3D; [opts.GraphicGroup]      # 加入自定义的图形，如多边形，水印等内容</code></pre></div></figure><h3 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h3><p>要注意到 <code>pyecharts.options</code> 这个类，上述的两个方法的参数都是赋值为 <code>pyecharts.options</code> 的子类，例如 <code>pyecharts.options.AxisOpts</code>、<code>pyecharts.options.LabelOpts</code>，等。除了使用 options 的子类，还可以直接使用字典（如前文所述，Python 中的字典就相当于 js 的对象，把对应的字典传给对应的属性对象就可以了）。例如</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">Line<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_xaxis<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_yaxis<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>    legend_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LegendOpts<span class="token punctuation">(</span>is_show<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div></figure><p>可以写为：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">Line<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_xaxis<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_yaxis<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>    legend_opts<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'show'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></div></figure><p>注意到这里也不是严格对应的，比如在 options 类的参数中是 <code>is_show</code>，在字典中的键是 <code>show</code>。个人觉得这是 pyecharts 的一个不足的地方，主要是因为这是一个 Python 的项目，它得默认使用者不懂 js，于是只能弄一堆的 options 对象（pyecharts.options 里面有大约 100 个 <code>***Opts</code> 对象）和一堆的 init 参数，虽然是很好地 “Python 化” 了，但是也搞到 API 十分的复杂，难记。如果在某些地方适当地使用 js 里面的内容，那整个逻辑会简化很多。可以看到文章一开始使用 echarts 绘图的时候就是一个很简单的逻辑。</p><p>另外这些 options 并不是全在上述两个方法中使用，比如 <code>add_yaxis</code> 中也有很多 options 参数，感觉有点混乱。而且也不是所有图表通用的，只能说是在大部分图表中通用。例如</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">Scatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_xaxis<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_yaxis<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_series_opts<span class="token punctuation">(</span>    emphasis_itemstyle_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>ItemStyleOpts<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div></figure><p>这段代码设置了散点图当鼠标悬停在某个点上时，该点的高亮颜色。在 Line、Bar 等很多图表中都适用，但是在地理图 Geo 的 set_series_opts 方法中没有这个参数。</p><p><strong>并且</strong>，尝试得多了，你可能会发现：</p><ul><li>在 echarts 中支持的属性，在 pyecharts 的 API 中不支持</li><li>在 pyecharts 中支持的参数，写到 html 中时被直接无视，也不报错</li><li>在 pyecharts 中不支持的参数，你给它直接写到 html 文档的 js 代码中时，它是有效的</li></ul><p>等等各种奇怪的问题，这也不知道是 pyecharts 不成熟的地方，还是我自己没理解透彻。<strong>总之说明了一个道理，如果想要精通 pyecharts，随心所欲地绘制各种图表，还是要从学习 echarts 入手。</strong></p><h2 id="四、进阶技巧"><a href="#四、进阶技巧" class="headerlink" title="四、进阶技巧"></a>四、进阶技巧</h2><p>基础的绘图例子都可以在文章开始的网站中找到示例代码，下面介绍一下一些比较有用的进阶技巧。</p><h3 id="更换-echarts-min-js-的引用源"><a href="#更换-echarts-min-js-的引用源" class="headerlink" title="更换 echarts.min.js 的引用源"></a>更换 echarts.min.js 的引用源</h3><p>pyecharts 默认的源是 <code>https://assets.pyecharts.org/assets/</code>，一般国内网络加载较慢，可以通过以下代码采用 CDN 加速。当然，也可以像简介部分提到的，将 echarts.min.js 保存到任意位置然后引用，比如 localhost。如果这样则要注意，有些图不仅仅会用到 echarts.min.js，还需要用到其他的 js 资源，例如地图、词云图等。</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">cdn &#x3D; &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;echarts@latest&#x2F;dist&#x2F;&quot;pyecharts.globals.CurrentConfig.ONLINE_HOST &#x3D; cdn</code></pre></div></figure><h3 id="参数数据类型"><a href="#参数数据类型" class="headerlink" title="参数数据类型"></a>参数数据类型</h3><p>一般我们会使用 pandas 处理数据，然后绘图。这时候要注意 pandas 里面的数值型使用的不是内置类型，而是 numpy 的数据类型。而 echarts 是不认识 numpy 数据类型的，这时候会画一个空的没有数据的图，让人一脸懵。可以如下显式更改数据类型：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">Scatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_xaxis<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> df<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_yaxis<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> df<span class="token punctuation">[</span><span class="token string">'col'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 注意，以下写法是不行的</span><span class="token comment"># 虽然传递的参数是内置类型float，但是pandas还是会自作主张给你改成numpy.float64</span>df<span class="token punctuation">[</span><span class="token string">'col'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span></code></pre></div></figure><h3 id="遇到不支持或无效的参数怎么办"><a href="#遇到不支持或无效的参数怎么办" class="headerlink" title="遇到不支持或无效的参数怎么办"></a>遇到不支持或无效的参数怎么办</h3><p>遇到上一小节最后提到的那些问题，比如某些属性在 echarts 中有效，但是在 pyecharts 中没有对应参数或者无效，这种情况我们最直接的思路就是手动去改 html 里面 js 代码。还是以简介部分那个图为例，比如我想微调一下主图在整个画布中的位置（可能是出于想用 overlap 方法在主图上叠加其他图表等原因），在 echarts 中可以如下实现：</p><p><img src="https://paradiseeee.github.io/post-assets/20201221/grid-html.png"></p><p>通过 grid 属性定义主图左上角的坐标和右下角的坐标，坐标可以是相对值，也可以是数值表示的绝对值，单位是 css 中的 px。为了好理解，这里故意将位置调得夸张一点，实际上我们经常需要微调主图的位置来适应布局。但是在 pyecharts 的常用图表类里是不能直接设置这个 grid 属性的（反正我没找到）：</p><p><img src="https://paradiseeee.github.io/post-assets/20201221/grid-error.png"></p><p>可以看到 global options 没有该参数。series options 里面倒是有这个参数，但是设置的不是同一个东西了。唯一的可能就是使用 <code>pyecharts.charts.Grid</code> 这个图表类时才允许加入 grid 参数，如下图。但是 Grid 类和其他常用图表类（例如 Bar）直接继承的类是不一样的，所以用 Grid 类打包图表之后会导致很多原本支持的设置失效。</p><p><img src="https://paradiseeee.github.io/post-assets/20201221/grid.png"></p><p>对此一开始我想到一个很笨拙的办法：强行在 js 中写入属性，替代手动修改属性的过程。首先按照简介中的代码，生成一个 render.html，然后如下写入属性：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">write_js</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> locate<span class="token punctuation">,</span> write<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        html <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>html<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>locate<span class="token punctuation">,</span> write<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># locate 用于定位修改位置，这里建议使用 option 里面参数来定位</span><span class="token comment"># 比如这里准备写到 "title" 属性的前面：</span>locate <span class="token operator">=</span> <span class="token string">'"title": [\n'</span> <span class="token comment"># 尽可能多的字符，否则可能定位错</span><span class="token comment"># 需要写入的属性</span>write <span class="token operator">=</span> <span class="token string">'"grid": &#123;"x": "20%", "y": "30%", "x2": "30%", "y2": "20%"&#125;, \n'</span>write_js<span class="token punctuation">(</span><span class="token string">'render.html'</span><span class="token punctuation">,</span> locate<span class="token punctuation">,</span> write<span class="token operator">+</span>locate<span class="token punctuation">)</span></code></pre></div></figure><p><img src="https://paradiseeee.github.io/post-assets/20201221/render.png"></p><p>好笨的方法，千万别学。后来经过进一步对 pycharts 图表类属性的研究，发现可以直接这样就搞定：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 首先绘图</span>bar <span class="token operator">=</span> Bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_xaxis<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_yaxis<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment"># 然后还缺什么属性，直接往 options 里面添加，然后 render</span>bar<span class="token punctuation">.</span>options<span class="token punctuation">[</span><span class="token string">'grid'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"x"</span><span class="token punctuation">:</span> <span class="token string">"20%"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">:</span> <span class="token string">"30%"</span><span class="token punctuation">,</span> <span class="token string">"x2"</span><span class="token punctuation">:</span> <span class="token string">"30%"</span><span class="token punctuation">,</span> <span class="token string">"y2"</span><span class="token punctuation">:</span> <span class="token string">"20%"</span><span class="token punctuation">&#125;</span>bar<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 注意到 bar.options 是一个字典</span><span class="token comment"># 它的内容就是生成的 html 文档的 js 代码里面的 option 变量的内容</span></code></pre></div></figure><h3 id="运用-css-和-js-控制视觉效果"><a href="#运用-css-和-js-控制视觉效果" class="headerlink" title="运用 css 和 js 控制视觉效果"></a>运用 css 和 js 控制视觉效果</h3><p>如果想要随心所欲地自定义视觉效果，需要了解一些 css 的基础知识。如果仅仅使用 Python 代码，我们定义一个散点图中的散点的颜色时，可以这样写：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">Scatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_xaxis<span class="token punctuation">(</span>index_data<span class="token punctuation">)</span><span class="token punctuation">.</span>add_yaxis<span class="token punctuation">(</span>    series_name<span class="token punctuation">,</span> value_data<span class="token punctuation">,</span> itemstyle_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>ItemStyleOpts<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div></figure><p>运用 css 代码，我们可以将 ItemStyleOpts 写成：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">opts<span class="token punctuation">.</span>ItemStyleOpts<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">'#ff0000'</span><span class="token punctuation">)</span>opts<span class="token punctuation">.</span>ItemStyleOpts<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">'rgba(255,0,0,1)'</span><span class="token punctuation">)</span></code></pre></div></figure><p>或者运用图表库提供的函数：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pyecharts<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>utils <span class="token keyword">import</span> JsCodeopts<span class="token punctuation">.</span>ItemStyleOpts<span class="token punctuation">(</span>color<span class="token operator">=</span>JsCode<span class="token punctuation">(</span>    <span class="token comment"># 引入echarts.min.js后就可以使用echarts库的方法</span>    <span class="token triple-quoted-string string">''' new echarts.graphic.RadialGradient(        0.5, 0.5, 0.5,          [&#123;offset: 0, color: 'rgba(255,0,0,1)'&#125;,        &#123;offset: 1, color: 'rgba(0,0,255, 1)'&#125;]    ) '''</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div></figure><p>直接在浏览器 console 中更改 option（还是简介中那个图），结果如下：</p><p><img src="https://paradiseeee.github.io/post-assets/20201221/css.png"></p><p>或者对于一些在 API 中为数值常量的参数，可以通过 js 变成变量。例如在散点图中定义点的大小，可以通过 js 使每个点显示不同大小：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">Scatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_xaxis<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_yaxis<span class="token punctuation">(</span>    series_name<span class="token punctuation">,</span> data_pair<span class="token punctuation">,</span>    <span class="token comment"># 固定大小：symbol_size=5,</span>    <span class="token comment"># 由数据值决定大小：</span>    symbol_size<span class="token operator">=</span>JsCode<span class="token punctuation">(</span><span class="token string">'function (data) &#123;return data[1]*10;&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div></figure><p>这里用到的 js 代码其实并不复杂，Python 混 Java 的感觉，学过上述两种的凭感觉都会写。感兴趣的可以学一下。</p><h3 id="运用-js-控制交互效果"><a href="#运用-js-控制交互效果" class="headerlink" title="运用 js 控制交互效果"></a>运用 js 控制交互效果</h3><p>这里经常用于改变工具提示（tooltip），就是鼠标悬停某个数据点时显示出来的东西。以之前做的一个图表为例，主要涉及的 option 如下：</p><p><img src="https://paradiseeee.github.io/post-assets/20201221/example-option.png"></p><p>默认情况下图表的工具提示格式是：<code>series_name \n x轴标签 y轴的值</code>，但是如果需要自定义格式，就要使用 js 回调函数。这个在 pyecharts.org 上也提到，但不是很详细。具体代码如下，参考上图给出的 option 就可以理解了。</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pyecharts<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>utils <span class="token keyword">import</span> JsCodetooltipJS <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    function (param) &#123;         // param参数接收的就是上图中的option.series.data这个数组中对应的元素        var line1 = 'name: ' + param.data[0] + '&lt;br/>';        var line2 = 'value1: ' + param.data[1] + '&lt;br/>';        var line3 = 'value2: ' + Math.ceil(10**param.data[2]); // 引用js内置函数        return line1 + line2 + line3;   // return的内容就是到时工具提示显示的内容    &#125;'''</span><span class="token comment"># 然后通过 JsCode 传给 TooltipOpts 的 formatter</span>Scatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>    tooltip_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>TooltipOpts<span class="token punctuation">(</span>formatter<span class="token operator">=</span>JsCode<span class="token punctuation">(</span>tooltipJS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div></figure><p>那么问题来了，上图的数据部分是绘图时传给 series 的参数，但是如果我还想在 tooltip 里说点别的东西怎么办？可以在 <code>add_yaxis</code> 时<strong>强行</strong>传进去再使用 js 回调函数。以下是一个完整的绘图例子：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pyecharts <span class="token keyword">import</span> charts <span class="token keyword">as</span> pyc<span class="token keyword">from</span> pyecharts <span class="token keyword">import</span> options <span class="token keyword">as</span> opts<span class="token keyword">from</span> pyecharts <span class="token keyword">import</span> <span class="token builtin">globals</span> <span class="token keyword">as</span> glbsbar <span class="token operator">=</span> pyc<span class="token punctuation">.</span>Bar<span class="token punctuation">(</span>    init_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>InitOpts<span class="token punctuation">(</span>theme<span class="token operator">=</span>glbs<span class="token punctuation">.</span>ThemeType<span class="token punctuation">.</span>DARK<span class="token punctuation">,</span> bg_color<span class="token operator">=</span><span class="token string">'#1a1c1d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_xaxis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_yaxis<span class="token punctuation">(</span>    <span class="token string">'test charts'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>bar<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div></figure><p><img src="https://paradiseeee.github.io/post-assets/20201221/tooltipjs.png"></p><p>如上图，这时是默认的工具提示格式，但是如果我想让它不显示为数值 <code>[1, 2, 3]</code>，而是描述性的信息，例如 <code>[&#39;低&#39;, &#39;中&#39;, &#39;高&#39;]</code> 或者更丰富的信息，那可以这样写：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">bar <span class="token operator">=</span> pyc<span class="token punctuation">.</span>Bar<span class="token punctuation">(</span>    init_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>InitOpts<span class="token punctuation">(</span>theme<span class="token operator">=</span>glbs<span class="token punctuation">.</span>ThemeType<span class="token punctuation">.</span>DARK<span class="token punctuation">,</span> bg_color<span class="token operator">=</span><span class="token string">'#1a1c1d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_xaxis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_yaxis<span class="token punctuation">(</span>    <span class="token string">'test charts'</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'低'</span><span class="token punctuation">,</span><span class="token string">'更多信息'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'中'</span><span class="token punctuation">,</span><span class="token string">'更多信息'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'高'</span><span class="token punctuation">,</span><span class="token string">'更多信息'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment"># 通过元组列表强行传进更多的信息</span>    <span class="token comment"># 元组第一位是对应 xaxis 的序号，第二位是序列的值 这里就是bar的长度</span>    <span class="token comment"># 剩下的爱加多少加多少，每个点写一篇800字作文都行</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>    tooltip_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>TooltipOpts<span class="token punctuation">(</span>formatter<span class="token operator">=</span>JsCode<span class="token punctuation">(</span>        <span class="token triple-quoted-string string">'''        function (param) &#123;            var line1 = 'index: ' + param.data[0] + '&lt;br/>';            var line2 = 'value: ' + param.data[1] + '&lt;br/>';            var line3 = 'info1: ' + param.data[2] + '&lt;br/>';            var line4 = 'info2: ' + param.data[3];            return line1 + line2 + line3 + line4;        &#125;        '''</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bar<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div></figure><p>结果如下。如果没看懂这段代码，可以将 html 源码 render 出来，对应着看，自然就理解了。</p><p><img src="https://paradiseeee.github.io/post-assets/20201221/tooltipjs2.png"></p><p><strong>再进一步深入</strong>，以上方法也不是万能的。例如在特别的图表中，根本就没有 <code>add_yaxis</code> 方法。比如 <code>Geo</code> 图表类型，是通过 <code>add</code> 方法传入 series 数据，于是传参的格式跟上面方法又不同。这时可以通过以下代码传入主图以外的数据，以作 tooltip 等其他用途：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">Geo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_schema<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_coordinate<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>    series_name<span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment"># 这里传入的数据也是一个元组列表，但是它仅限两位的元组</span>    <span class="token comment"># 第一位是地图中区域的名称，也就是到时会在地图中 A, B, C 三个地点标上散点</span>    <span class="token comment"># 第一位在 js 中通过 param.data.name 引用</span>    <span class="token comment"># 第二位是包含额外数据的列表，通过 param.data.value(一个js数组) 引用</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>    tooltip_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>TooltipOpts<span class="token punctuation">(</span>formatter<span class="token operator">=</span>JsCode<span class="token punctuation">(</span>        <span class="token triple-quoted-string string">'''        function (param) &#123;            return param.data.name + ' | ' +                'info1:' + param.data.value[0] +                 ', info2:' + param.data.value[1] +                 ', info3:' + param.data.value[2];        &#125;        '''</span>        <span class="token comment"># 当鼠标悬停在 B 点时，返回“B | info1: 4, info2: 5, info3: 6”</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div></figure><p><strong>更复杂的情况是</strong>，加上额外数据后格式就是不对，或者会影响图表的其他组件。比如在上例的 <code>set_global_opts</code> 中加入了 visualmap 组件时，直接传入额外数据会导致 visualmap 显示不正常。这里我没有找到好的办法，所以想了一个_投机取巧_的方法。就是由于 python 字典跟 js 对象的格式是一样的，可以直接生成个字典的字符串写入 js ，然后再引用。于是上例可以写成：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">data_pair <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># 上面的 10, 100, 1000 就是用在 visualmap 中的数据值</span><span class="token comment"># 下面的则是用于 tooltip 的额外数据</span>extend_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>tooltip_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> k<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> v<span class="token punctuation">&#125;</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> extend_data<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 返回 tooltips 的函数</span>tooltipjs <span class="token operator">=</span> <span class="token triple-quoted-string string">r'''    function (param) &#123;        var tooltip_data = __MARKER__; // 到时在 __MARKER__ 这里写入要传的数据        for (int i=0; i&lt;tooltip_data.length; i++) &#123;         // 遍历            if (param.data.name == tooltip_data[i].name) &#123;  // 匹配                var values = tooltip_data[i].value;         // 提取额外数据            &#125;        &#125;        // 返回给 tooltips        return param.data.name + ' | ' +            'info1:'+values[0]+', info2:'+values[1]+', info3:'+values[2];    &#125;'''</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'__MARKER__'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>tooltip_data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 在这里加入了额外的数据</span><span class="token comment"># 绘图</span>Geo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_schema<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_coordinate<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>    series_name<span class="token punctuation">,</span> data_pair<span class="token punctuation">)</span><span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>    tooltip_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>TooltipOpts<span class="token punctuation">(</span>formatter<span class="token operator">=</span>Jscode<span class="token punctuation">(</span>tooltipjs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    visualmap_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>VisualMapOpts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 可以看到在调用 pyecharts 绘图时没有用到额外的数据，只有 data_pair</span><span class="token comment"># 用于 tooltip 的数据是写在 js 字符串里偷偷传进去的</span><span class="token comment"># 这时 tooltip 的效果跟上例一样，但是上例的写法不支持 visualmap</span></code></pre></div></figure><p>到这基本就到头了，因为上面的方法虽然很繁琐，但是基本可以所向披靡，对任何的图都通用。并且除了 tooltips，其他的数据交互的问题也可以按类似的思路来解决。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><h3 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h3><p>回到开始的问题：如何用 pyecharts 绘制一切你想象得到的交互式图表？根据前文的内容可以总结以下的流程：</p><ul><li>1） 根据需求，确定图表类型、基本内容、风格样式等</li><li>2） 粗略画个草图，如果不会画就上 gallery.pyechart.org 上抄个类似的</li><li>3） 通过各种 options 修改图中的细节部分，详细的文档在 pyecharts.org 上</li><li>4） 实在找不到的设置，在简介提到的 Echarts 网站中找配置，再写进 options 字典里</li><li>5） 跟据前面提到的技巧及其思路，修改还不符合要求的地方</li></ul><h3 id="实例验证"><a href="#实例验证" class="headerlink" title="实例验证"></a>实例验证</h3><p>最后用一个实例验证一下上述流程是否真的有用。<strong>第一步</strong>，先找一个属于常用图表类型的，并且相对较复杂的图。这里到 Apache 官网的示例上去找，就用如下<a href="https://echarts.apache.org/examples/zh/editor.html?c=line-aqi">这个图</a>，看起来花里胡俏挺唬人的。<del>这个图印象中 gallery.echarts.org 好像有个类似的例子，这里我们假装不知道先来自己做一下。</del></p><p><img src="https://paradiseeee.github.io/post-assets/20201221/example.png"></p><p>首先把 option 的内容折叠起来以免自己偷看作弊。它上面的数据没有直接写入 option 变量，而是用 jquery 加载的，我没找到接口在哪，所以就在 option 里面加了个 dataView 工具，然后运行，在数据视图中将数据 copy 下来，保存为 <code>data.csv</code>（文末可以下载）。</p><p><strong>第二步</strong>，粗略地画个草图。就是一个主题为 <code>pyecharts.globals.ThemeType.DARK</code> 的折线图，横轴为时间，纵轴为 AQI 数值。页面上加了标题、工具箱、图例、数据缩放工具四个组件。</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pyecharts <span class="token keyword">import</span> charts <span class="token keyword">as</span> pyc<span class="token keyword">from</span> pyecharts <span class="token keyword">import</span> options <span class="token keyword">as</span> opts<span class="token keyword">from</span> pyecharts <span class="token keyword">import</span> <span class="token builtin">globals</span> <span class="token keyword">as</span> glbsdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'data.csv'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>line <span class="token operator">=</span> pyc<span class="token punctuation">.</span>Line<span class="token punctuation">(</span>init_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>InitOpts<span class="token punctuation">(</span>theme<span class="token operator">=</span>glbs<span class="token punctuation">.</span>ThemeType<span class="token punctuation">.</span>DARK<span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token string">'100%'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_xaxis<span class="token punctuation">(</span>    <span class="token builtin">list</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_yaxis<span class="token punctuation">(</span>    <span class="token string">'Beijing AQI'</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>line<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div></figure><p>首先画个最简单的图，结果长下面那样。对比一下，缺了上面提到的三个组件。图例默认有了，但是不是我们想要的样子。工具提示显示格式一样了，但是触发方式不一样，下图中要悬停到具体的点上才能触发。折线上多了数据标签，主图背景少了些分割线，等等。</p><p><img src="https://paradiseeee.github.io/post-assets/20201221/1.png"></p><p>然后先简单地使用默认参数，把完整的 options 加上去。可以看到加上组件了，已经离目标接近很多了。</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">line<span class="token punctuation">.</span>set_series_opts<span class="token punctuation">(</span>    label_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LabelOpts<span class="token punctuation">(</span>is_show<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>    title_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>TitleOpts<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'Beijing AQI'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     legend_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LegendOpts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    visualmap_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>VisualMapOpts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     datazoom_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>DataZoomOpts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     tooltip_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>TooltipOpts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    toolbox_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>ToolboxOpts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>line<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div></figure><p><img src="https://paradiseeee.github.io/post-assets/20201221/2.png"></p><p><strong>第三、四、五步</strong>其实就是一个循环迭代的过程，用这个思路来修改每一个 options。接下来根据上图与原图不同的地方，具体定义组件的 options 参数：</p><p>Title 这里位置太靠边了，原图离最左边有点空隙：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">line<span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>    title_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>TitleOpts<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'Beijing AQI'</span><span class="token punctuation">,</span> pos_left<span class="token operator">=</span><span class="token string">'1%'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span></code></pre></div></figure><p>Legend 这里想了很久，不知道怎么改成原图那样。后来跳过了，做下面的内容才发现原图那个不是 Legend，而是 Visual Map 产生的图例。所以这里就简单把 Legend 禁用了就行了：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">line<span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>    legend_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LegendOpts<span class="token punctuation">(</span>is_show<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre></div></figure><p>Viusal Map 这里明显的区别是，原图那个是离散的，这里目前是连续的，所以先找个参数将它离散化。然后需要定义一下分割的区间。这里我先是凭感觉写了个参数，发现不对，便上 <a href="https://pyecharts.org/#/zh-cn/global_options?id=visualmapopts%ef%bc%9a%e8%a7%86%e8%a7%89%e6%98%a0%e5%b0%84%e9%85%8d%e7%bd%ae%e9%a1%b9">官网</a> 查看了一下文档如下。至于每个区间的颜色，可以用取色器在原图获取：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 自定义的每一段的范围，以及每一段的文字，以及每一段的特别的样式。例如：</span><span class="token comment"># pieces: [</span><span class="token comment">#   &#123;"min": 1500&#125;, // 不指定 max，表示 max 为无限大（Infinity）。</span><span class="token comment">#   &#123;"min": 900, "max": 1500&#125;,</span><span class="token comment">#   &#123;"min": 310, "max": 1000&#125;,</span><span class="token comment">#   &#123;"min": 200, "max": 300&#125;,</span><span class="token comment">#   &#123;"min": 10, "max": 200, "label": '10 到 200（自定义label）'&#125;,</span><span class="token comment">#   &#123;"value": 123, "label": '123（自定义特殊颜色）', "color": 'grey'&#125;,</span><span class="token comment">#   &#123;"max": 5&#125;     // 不指定 min，表示 min 为无限大（-Infinity）。</span><span class="token comment"># ]</span>pieces<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>Sequence<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">line<span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>    visualmap_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>VisualMapOpts<span class="token punctuation">(</span>        is_piecewise<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> pos_top<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> pos_right<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>        pieces<span class="token operator">=</span><span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span><span class="token string">'min'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'#93CE07'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">'min'</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'#FBDB0F'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">'min'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'#FC7D02'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">'min'</span><span class="token punctuation">:</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'#FD0100'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">'min'</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'#AA069F'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">'min'</span><span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'#AC3B2A'</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span></code></pre></div></figure><p>Data Zoom 组件默认显示 20%-80%，看一下文档，发现有个 start_value 参数，由于原图中就是显示最后一部分，所以可以使用这个参数搞定。但是第一次试了发现不行，原因是它已经给开始结束位置设置了默认值，所以要先将这两个值设为空值，start_value 参数才有效。另外发现原图是可以在主图里面直接拖动的，所以要改一下 type 参数。这里就出现问题了，改了 type 之后，里面可以拖动了，但是外面的滚动条不见了。这里只好查看原图的代码抄答案，原来它用数组的形式定义了两个 Data Zoom 组件，一个在里面，一个在外面：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">line<span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>    datazoom_opts<span class="token operator">=</span><span class="token punctuation">[</span>        opts<span class="token punctuation">.</span>DataZoomOpts<span class="token punctuation">(</span>            start_value<span class="token operator">=</span><span class="token string">'2014-06-01'</span><span class="token punctuation">,</span> range_start<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> range_end<span class="token operator">=</span><span class="token boolean">None</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>         opts<span class="token punctuation">.</span>DataZoomOpts<span class="token punctuation">(</span>type_<span class="token operator">=</span><span class="token string">'inside'</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">)</span></code></pre></div></figure><p>Tooltip 组件需要更改触发方式，简单加上 trigger 参数即可：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">1line.set_global_opts(tooltip_opts&#x3D;opts.TooltipOpts(trigger&#x3D;&#39;axis&#39;))</code></pre></div></figure><p>Toolbox 组件多了一堆按钮，简单研究一下文档，把不必要的删掉就 OK。实际写时发现 pyecharts 的那个缺点又出现了，就是太多 options 对象。执行 <code>opts.ToolBoxFeatureOpts?</code> 就可以看到，可以说看了头皮发麻。所以这里用字典传参，只需要把 python 中的变量名用下划线分割单词的习惯，改成 js 中用首字母大写分割单词，参数基本就对应上了。然后用字典代替 options 对象就行了。然后还要改一下它的位置，原图是靠右对齐，并且离最右边留有一点空隙，这里因为也已经有默认参数，一样要先把默认参数置空：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">line<span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>    toolbox_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>ToolboxOpts<span class="token punctuation">(</span>        pos_left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> pos_right<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>        feature<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'dataZoom'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'restore'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'saveAsImage'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre></div></figure><p>然后好像还差点什么？没错，Y 轴的分割线。估计应该是在 yaxis_opts 里添加，于是试一下。发现分割线是有了，但是还差那些带箭头的虚线，查了一下文档，发现应该在 <code>set_series_opts</code> 里面通过 <code>opts.MarkLineOpts</code> 设置：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">line<span class="token punctuation">.</span>set_series_opts<span class="token punctuation">(</span>    markline_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>MarkLineOpts<span class="token punctuation">(</span>        label_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LabelOpts<span class="token punctuation">(</span>position<span class="token operator">=</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        linestyle_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LineStyleOpts<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">'#333'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'yAxis'</span><span class="token punctuation">:</span> y<span class="token punctuation">&#125;</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div></figure><p>最后主图的位置和原图不太一样，通过 grid 属性改一下。参考第四节中提到的关于<a href="https://paradiseeee.github.io/2020/12/21/PyEcharts-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/#%E9%81%87%E5%88%B0%E4%B8%8D%E6%94%AF%E6%8C%81%E6%88%96%E6%97%A0%E6%95%88%E7%9A%84%E5%8F%82%E6%95%B0%E6%80%8E%E4%B9%88%E5%8A%9E">参数无效</a>的问题：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">line<span class="token punctuation">.</span>options<span class="token punctuation">[</span><span class="token string">'grid'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'left'</span><span class="token punctuation">:</span> <span class="token string">'6%'</span><span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">:</span> <span class="token string">'15%'</span><span class="token punctuation">,</span> <span class="token string">'bottom'</span><span class="token punctuation">:</span> <span class="token string">'12%'</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>结果如下，基本与原图一样了。有细微区别是因为 Apache 网站上的图表容器跟这里的不一样，并且上面的网页截图时浏览器开了扩展 DarkReader，所以颜色也有点改变的地方。</p><blockquote><p><a href="https://paradiseeee.github.io/post-assets/20201221/render.html">在新标签页打开交互式图表</a> | <a href="https://paradiseeee.github.io/post-assets/20201221/code.py">下载完整绘图代码</a> | <a href="https://paradiseeee.github.io/post-assets/20201221/data.csv">下载数据</a></p></blockquote><p><img src="https://paradiseeee.github.io/post-assets/20201221/3.png"></p><hr><p>鸣谢 &amp; 推荐：<a href="https://blog.csdn.net/qq_27484665">@AwesomeTang</a></p><p><strong>END</strong></p><blockquote><p>原文链接：<a href="https://paradiseeee.github.io/2020/12/21/PyEcharts-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/">https://paradiseeee.github.io/2020/12/21/PyEcharts-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</a></p></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法</title>
    <link href="/2022/11/12/Markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/11/12/Markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><ul><li><input checked="" disabled="" type="checkbox"> Write the press release</li><li><input checked="" disabled="" type="checkbox"> Update the website</li><li><input disabled="" type="checkbox"> Contact the media</li></ul><h2 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h2><p>sfs :unamused:</p><h2 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h2><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">&#123;% label primary @text %&#125;&lt;span class&#x3D;&quot;label label-primary&quot;&gt;Label&lt;&#x2F;span&gt;可选类别：primary default info success warning danger</code></pre></div></figure><p><span class="label label-primary">Label</span></p><h2 id="参考脚注"><a href="#参考脚注" class="headerlink" title="参考脚注"></a>参考脚注</h2><p>这是一句话<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="参考资料1">[1]</span></a></sup></p><h2 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h2><blockquote><p>可选类别<br>  primary<br>  secondary<br>  success<br>  danger<br>  warning<br>  info<br>  light</p></blockquote><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">&#123;% note success %&#125;文字 或者 &#96;markdown&#96; 均可&#123;% endnote %&#125;</code></pre></div></figure><div class="note note-success">            <p>两种方式：上面是第一种方式，下面是html方法</p>          </div><figure><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>note note-danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>便签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre></div></figure><p class="note note-danger">便签</p><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">&#123;% btn url, text, title %&#125;或者&lt;a class&#x3D;&quot;btn&quot; href&#x3D;&quot;https:&#x2F;&#x2F;hexo.fluid-dev.com&#x2F;docs&#x2F;guide&#x2F;#tag-%E6%8F%92%E4%BB%B6&quot; title&#x3D;&quot;title&quot;&gt;tag&lt;&#x2F;a&gt;</code></pre></div></figure><a class="btn" href="(https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6)"  title="title" target="_blank">text</a><p><a class="btn" href="https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6" title="title">tag</a><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>这是对应的脚注<br><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:1" class="footnote-text"><span>参考资料1<br><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>参考资料2<br><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python如何与MySQL实现交互及常用sql语句</title>
    <link href="/2022/11/12/python%E8%BF%9E%E6%8E%A5MySQL/"/>
    <url>/2022/11/12/python%E8%BF%9E%E6%8E%A5MySQL/</url>
    
    <content type="html"><![CDATA[<p>9 月初，我对 <code>python 爬虫</code> 燃起兴趣，但爬取到的数据多通道实时同步读写用<code>文件</code>并不方便，于是开始用起<code>mysql</code>。这篇笔记，我将整理近一个月的实战中最常用到的 <code>mysql</code> 语句，同时也将涉及到如何在<code>python3</code>中与 <code>mysql</code> 实现数据交换。</p><p>关于工具&#x2F;库，特别说明下：</p><p>1、我安装了 <code>mysql</code> ，并直接采用管理员身份运行<code>命令行提示符（cmd）</code>查看 <code>mysql</code>，并没有安装任何 <code>mysql</code> 的可视化图形界面工具。</p><p>2、在 <code>python</code> 脚本中，我采用 <code>pymysql</code> 和 <code>sqlalchemy</code> 这两个库与 <code>mysql</code> 建立连接，用 <code>pandas</code> 来处理数据。</p><h2 id="一、建立连接与数据交互"><a href="#一、建立连接与数据交互" class="headerlink" title="一、建立连接与数据交互"></a>一、建立连接与数据交互</h2><p>与 mysql 交互的方式，我目前共使用 4 种。其中采用管理员身份运行<code>命令行提示符（cmd）</code>查看 <code>mysql</code>，其操作图示可另写一篇。这里就不占篇幅了。mysql的可视化图形界面工具，我目前并没有用到，也没有迫切使用它的需要。另外 3 种方式都是通过 python 脚本进行。</p><h3 id="情境A：python-演算得出数据，想要写入数据库"><a href="#情境A：python-演算得出数据，想要写入数据库" class="headerlink" title="情境A：python 演算得出数据，想要写入数据库"></a>情境A：python 演算得出数据，想要写入数据库</h3><p>python 脚本已得到表格类大量数据，想要一次性写入数据库，常用代码如下：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 与 mysql 建立连接</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engineconn_eng <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://username:password@localhost:3306/databasename'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>  <span class="token comment"># 调用 pandas 的方法，数据写入mysql</span>pd<span class="token punctuation">.</span>io<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>to_sql<span class="token punctuation">(</span>your_df<span class="token punctuation">,</span> <span class="token string">"table_name"</span><span class="token punctuation">,</span> conn_eng<span class="token punctuation">,</span> if_exists<span class="token operator">=</span><span class="token string">'append'</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre></div></figure><p>表格类数据，我用的是 <code>pandas</code> 的 <code>dataframe</code> 结构。<code>pd.io.sql.to_sql()</code> 的参数还有许多其它用途，但上面这种是我个人使用最高频的。效果是：无需自己提前建表，将自动建新表。美中不足是：表的列属性自动生成，通常不合心意，还需检查和修改。</p><p>如果不想用 <code>pd.io.sql.to_sql()</code> 或者想更精细、复杂的操作，则用到下面的情境C。</p><h3 id="情境B：python-脚本想从-mysql-拿到数据"><a href="#情境B：python-脚本想从-mysql-拿到数据" class="headerlink" title="情境B：python 脚本想从 mysql 拿到数据"></a>情境B：python 脚本想从 mysql 拿到数据</h3><p>如果已经存在某个表格，想要向该表格提交某条指令，需返回数据，我用的是 <code>pandas</code>的<code>read_sql ()</code> ，返回的数据类型是 <code>pandas</code> 的 <code>dataframe</code>。sql 查询语句挺好写的，具体总结在本文下方。</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment"># 与 mysql 建立连接</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token string">'databasename'</span><span class="token punctuation">)</span><span class="token comment"># sql 语句定义为一个字符串</span>sql_search <span class="token operator">=</span> <span class="token string">'select question_id from topic_monitor where is_title=0 ;'</span><span class="token comment"># 调用 pandas 的 read_sql() 方法拿到 dataframe 结构的数据</span>question_ids <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span>sql_search<span class="token punctuation">,</span>conn<span class="token punctuation">)</span><span class="token comment"># 关闭连接</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div></figure><h3 id="情境C：python-脚本单方面向-mysql-发出指令，无需拿到数据"><a href="#情境C：python-脚本单方面向-mysql-发出指令，无需拿到数据" class="headerlink" title="情境C：python 脚本单方面向 mysql 发出指令，无需拿到数据"></a>情境C：python 脚本单方面向 mysql 发出指令，无需拿到数据</h3><p>如果已经存在某个表格，想要向该表格提交某条指令而无需返回数据时，比如：建表、对数据的增改删、对列的名称、列的属性修改等，代码如下。</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment"># 与 mysql 建立连接</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token string">'databasename'</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># sql 语句定义为一个字符串，插入一行数据</span>sql_insert <span class="token operator">=</span> <span class="token string">'INSERT INTO questions(q_id,q_title,q_description,q_keywords,q_people,q_pageview,time) VALUES( "'</span>\                <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>quesition_id<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'", "'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>one<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">'", "'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'", "'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>one<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'", "'</span> \                <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>one<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'", "'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>one<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'", "'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'");'</span> <span class="token comment"># sql 语句定义为一个字符串，修改某个数据（另一个表格）</span>sql_update <span class="token operator">=</span> <span class="token string">'update topic_monitor SET is_title="1" where question_id = "'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>quesition_id<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'";'</span><span class="token comment"># 提交指令</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_insert<span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_update<span class="token punctuation">)</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 插入一行数据；仅当该数据与表格已有数据不重复时才插入，否则就不会插入</span>sql_insert <span class="token operator">=</span> <span class="token string">'INSERT INTO `topic_monitor`(question_id,is_title,q_type,topic_id,time) SELECT "'</span>\                    <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'", "0", "0","'</span>  <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>topic_id<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'", "'</span><span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span> <span class="token operator">+</span> '" FROM DUAL WHERE NOT EXISTS<span class="token punctuation">(</span>\                    SELECT question_id FROM topic_monitor WHERE question_id <span class="token operator">=</span> <span class="token string">"' + x[0] + '"</span><span class="token punctuation">)</span>'cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_insert<span class="token punctuation">)</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 关闭连接</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div></figure><p>通过上面几种实用情况可以看到，<code>python</code> 与 <code>mysql</code> 实现交互的过程，通常分为：建立连接、把sql语句定义为字符串，提交指令、关闭连接。核心的技能在于 sql语句；除了定义sql语句字符串，其余3个处理都是固定的写法。</p><p>我在最初一个月的实践中，最常出现的错误有：</p><ul><li>值的引用没有加上引号；</li><li>符号错乱：多一个符号，少一个符号；</li><li>值的类型不符合：不管 mysql 表格中该值是数，还是文本，在定义 sql 语句的字符串时，对每个值都需要转化为字符串；</li><li>拷贝自己的代码时，忘记修改databasename。</li></ul><h2 id="二、sql语句：搜索查询"><a href="#二、sql语句：搜索查询" class="headerlink" title="二、sql语句：搜索查询"></a>二、sql语句：搜索查询</h2><p>搜索是指在数据库的某个表格中查询符合特定条件的数据，并返回查询结果。其基本结构为：</p><p><code>SELECT 【范围】FROM table_name 【条件】;</code> 其中，范围是必须指定的，而条件可有可无。</p><h3 id="变量A：范围，是指返回查询结果的范围。"><a href="#变量A：范围，是指返回查询结果的范围。" class="headerlink" title="变量A：范围，是指返回查询结果的范围。"></a>变量A：范围，是指返回查询结果的范围。</h3><p>返回该表格的所有字段，用 * 表达：</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">SELECT * FROM table_name ;</code></pre></div></figure><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/27/16d72eb3fa3da2c1~tplv-t2oaga2asx-zoom-in-crop-mark:3402:0:0:0.awebp" alt="image"></p><p>仅返回该表格的某个字段：</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">SELECT column_name FROM table_name ;</code></pre></div></figure><p>仅返回该表格的多个字段：</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">SELECT column_name_1,column_name_3,column_name_3 FROM table_name ;</code></pre></div></figure><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/27/16d72ea94e130ac7~tplv-t2oaga2asx-zoom-in-crop-mark:3402:0:0:0.awebp" alt="image"></p><p>仅返回符合条件的数据个数：</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">SELECT count(*) FROM table_name ;</code></pre></div></figure><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/27/16d72ea94e262e64~tplv-t2oaga2asx-zoom-in-crop-mark:3402:0:0:0.awebp" alt="image"></p><h3 id="变量B：条件是指，期望返回的数据满足哪些条件。"><a href="#变量B：条件是指，期望返回的数据满足哪些条件。" class="headerlink" title="变量B：条件是指，期望返回的数据满足哪些条件。"></a>变量B：条件是指，期望返回的数据满足哪些条件。</h3><p>不限定条件：</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">SELECT * FROM table_name ;</code></pre></div></figure><p>数值类：某个字段（数值类型的，比如double或者int），数值比较的操作符都可以使用比如，大于<code>&gt;</code>，小于<code>&lt;</code>，等于 <code>=</code> ，大于等于 <code>&gt;=</code> ，小于等于 <code>&lt;=</code> ：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/27/16d72eb3fa5311f5~tplv-t2oaga2asx-zoom-in-crop-mark:3402:0:0:0.awebp" alt="image"></p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">SELECT * FROM table_name WHERE num_column_name &gt;&#x3D; 1;</code></pre></div></figure><p>文本类：某个字段（字符串类型的，比如char，text）：</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">SELECT * FROM table_name WHERE str_column_name like “%your_str%”;</code></pre></div></figure><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/27/16d72ea94e682c22~tplv-t2oaga2asx-zoom-in-crop-mark:3402:0:0:0.awebp" alt="image"></p><p>也可以表达多个条件，<code>and</code>，<code>or</code>等可用于表达条件之间的关系：</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">SELECT * FROM table_name WHERE num_column_name_1 &gt;&#x3D; 1 and  str_column_name like “%your_str%” ;</code></pre></div></figure><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/27/16d72eb3fa478de0~tplv-t2oaga2asx-zoom-in-crop-mark:3402:0:0:0.awebp" alt="image"></p><h2 id="三、sql语句：修改表属性"><a href="#三、sql语句：修改表属性" class="headerlink" title="三、sql语句：修改表属性"></a>三、sql语句：修改表属性</h2><p>横向的一整条数据，叫做行；竖向的一整条数据，叫作列。列的名字，叫做 <code>column</code>，这是通用的知识点。</p><p>这段时间的实战中，我完全没有用到修改表的名称、重设index等知识点。最常用的，就是对列进行操作。每个列具备：列的名称、列的属性、列的数值。</p><p>列的名称，需要留心不使用保留词。我的技巧是，尽量用一些<code>_</code>来表达该数据，比如 <code>article_title</code>，<code>press_date</code> 这种命名虽然稍长，但易读，也不会装上保留词。</p><p>列的属性包括：类型，最大长度，是否为空，默认值，是否重复，是否为索引。通常，直接通过 <code>pandas</code> 的 <code>pd.io.sql.to_sql()</code> 一次性创建表格并保存数据时，列的默认属性并不合需求。要么提前自己定义表的结构，设置好每列属性；要么事后检查列属性，并逐列修改。所以，列的属性设定、修改是高频基础知识点。</p><p>列的数值，即除了列名称外的、该列其它值。修改某个值，也是高频操作。不过我把这个知识点放到第四部分了。</p><p>对列的名称、列的属性进行修改，主要的关键词都是 <code>ALTER</code>，具体又分为以下几种情况。</p><h3 id="情境A：新增一列。关键词-ADD"><a href="#情境A：新增一列。关键词-ADD" class="headerlink" title="情境A：新增一列。关键词 ADD"></a>情境A：新增一列。关键词 <code>ADD</code></h3><p>在你所指定的 <code>column_name</code> 后面定义列的属性。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">ALTER TABLE table_name ADD COLUMN column_name char(20);</code></pre></div></figure><h3 id="情境B：修改某列的名称。关键词-CHANGE"><a href="#情境B：修改某列的名称。关键词-CHANGE" class="headerlink" title="情境B：修改某列的名称。关键词 CHANGE"></a>情境B：修改某列的名称。关键词 <code>CHANGE</code></h3><p>在修改列名的同时也可以重新指定列的属性。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">ALTER TABLE table_name CHANGE old_column_name new_column_name char(50);</code></pre></div></figure><h3 id="情境C：修改某列的属性。关键词是-MODIFY"><a href="#情境C：修改某列的属性。关键词是-MODIFY" class="headerlink" title="情境C：修改某列的属性。关键词是 MODIFY"></a>情境C：修改某列的属性。关键词是 <code>MODIFY</code></h3><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">ALTER TABLE table_name MODIFY column_name char(100);</code></pre></div></figure><h2 id="四、sql语句：数据的增改删"><a href="#四、sql语句：数据的增改删" class="headerlink" title="四、sql语句：数据的增改删"></a>四、sql语句：数据的增改删</h2><p>通常提到数据库操作时，四字以蔽之：增删改查。</p><ul><li>查询，请看第二部分。关键词是 <code>SELECT</code>。</li><li>对数据所依赖的属性的增、改，请看第三部分。关键词是 <code>ALTER</code>。</li><li>数据的增加，在第一部分的数据交互中也给出实例，就不重复了。关键词是<code>INSERT</code>。</li><li>数据的修改，关键词是 <code>UPDATE</code>。</li><li>数据（甚至表格、库）的删除，关键词是<code>DELETE</code>。</li></ul><p>数据的修改，副关键词是 <code>set</code> 。</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">UPDATE table_name SET columns_name &#x3D; new_value 【条件】;</code></pre></div></figure><p>新数值如果是数值类型的，则直接写数值即可；如果是文本类型的，必须要加上双引号，比如，<code>“your_new_value”</code>。</p><p>如果把【条件】部分不写，就相当于修改整列的值；想要修改特定范围，就要用到条件表达式，这和前面的查询部分是一致的，就不再重复。</p><p>数据的删除，对于新手来说，是必须警惕的操作。因为一旦误操作，你将无力挽回。即便是职业程序员，也可能犯下无疑删库的惨剧。其基本语句为：</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">DELETE FROM table_name【条件】;</code></pre></div></figure><p>想要修改特定范围，就要用到条件表达式，这和前面的查询部分也是一致的，稍微啰嗦两句：不要对自己设定的条件太自信，最好先用搜索语句检查一下，然后再执行删除语句。</p><ul><li>删除单行数据：添加能唯一标识该行数据的条件语句。</li><li>删除多行数据：添加能标识该范围的条件语句。</li><li>删除整张表格：<strong>你是认真的吗？没有写错表格名字吧？！</strong> 做这项操作前，必须确认清楚自己的意图，毕竟一旦发生，无可挽回。</li></ul><p>如果条件留空，将保留表结构，而删除所有数据行。想要删除整张表格，什么都不留下，则执行：</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">DELETE TABLE table_name;</code></pre></div></figure><p>俗称的“删库”就是删掉整个数据库，虽然实战中几乎不会用到，但作为新手经常手误，在练习阶段安全起见，最好还是专门创建一个 database 用于练手，练完直接删掉整个练习库：</p><figure><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">DELETE DATABASE database_name;</code></pre></div></figure><p>如果简单总结下过去一个月，使用<code>mysql</code>的体验，那就是：除了<code>mysql</code> 的安装激活太麻烦，数据的增删改查比操作文本方便太多了！！完全值得容忍安装激活的麻烦。另外 <code>mysql</code> 常用语法确实简单、非常有规律。</p><p>希望我的总结带给你帮助。鼓励我继续分享，那就请点个赞吧！</p>]]></content>
    
    
    <categories>
      
      <category>数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转载</tag>
      
      <tag>Python</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何让SQL提高一个台阶？</title>
    <link href="/2022/11/11/%E5%A6%82%E4%BD%95%E8%AE%A9SQL%E6%8F%90%E9%AB%98%E4%B8%80%E4%B8%AA%E5%8F%B0%E9%98%B6%EF%BC%9F/"/>
    <url>/2022/11/11/%E5%A6%82%E4%BD%95%E8%AE%A9SQL%E6%8F%90%E9%AB%98%E4%B8%80%E4%B8%AA%E5%8F%B0%E9%98%B6%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>MySQl 专栏持续更新 不说晦涩难懂的东西 尽量输出容易理解 和 使用的SQL技巧 和 初中级开发不是很常用的但很有用的知识</p><p>欢迎查看👉🏻👉🏻👉🏻<a href="https://juejin.cn/column/7157955810826387470" title="https://juejin.cn/column/7157955810826387470">SQL 专栏</a> 查漏补缺 指教一二</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9572ab2e6c3545dbaa4b2b75f4a3b6c1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="src=http __img2.biaoqingjia.com_biaoqing_201810_2c3993f64eec252da6d674f9d80fc4e9.gif&amp;refer=http __img2.biaoqingjia.gif"></p><p>每一次写博客对技术都会有更深入的理解 积少成多 百天计划我也想看看自己有多少成长 祝君好运 工作顺利</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SQL 写不好 加班少不了 日常工作中SQL 是必不可少的一项技术 但是很多人不会过多的去关注SQL问题 一是数据量小 二是没有意识到索引的重要性 本文主要是整理 SQL失效场景 如果里面的细节你都知道 那你一定是学习能力比较好的人 膜拜 写完这篇文章 我感觉自己之前知道的真的是 “目录” 没有明白其中的内容 如果你能跟着节奏看完文章 一定会有收获 至少我写完感觉思维通透很多 以后百分之九十的 SQl索引问题 和 面试这方面问题都能拿捏两</p><p><code>文章 字数 四千余字 观看时长十分钟 练习时长两个半小时</code></p><h2 id="基础数据准备"><a href="#基础数据准备" class="headerlink" title="基础数据准备"></a>基础数据准备</h2><p>准备一个数据表作为 数据演示 这里面一共 创建了三个索引</p><ul><li>联合索引 <code>sname</code>, <code>s_code</code>, <code>address</code></li><li>主键索引 <code>id</code></li><li>普通索引 <code>height</code></li></ul><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">SET NAMES utf8mb4;SET FOREIGN_KEY_CHECKS &#x3D; 0;-- ------------------------------ Table structure for student-- ----------------------------DROP TABLE IF EXISTS &#96;student&#96;;CREATE TABLE &#96;student&#96;  (  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,  &#96;sname&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,  &#96;s_code&#96; int(100) NULL DEFAULT NULL,  &#96;address&#96; varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,  &#96;height&#96; double NULL DEFAULT NULL,  &#96;classid&#96; int(11) NULL DEFAULT NULL,  &#96;create_time&#96; datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0),  PRIMARY KEY (&#96;id&#96;) USING BTREE,  INDEX &#96;普通索引&#96;(&#96;height&#96;) USING BTREE,  INDEX &#96;联合索引&#96;(&#96;sname&#96;, &#96;s_code&#96;, &#96;address&#96;) USING BTREE) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 5 CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Dynamic;-- ------------------------------ Records of student-- ----------------------------INSERT INTO &#96;student&#96; VALUES (1, &#39;学生1&#39;, 1, &#39;上海&#39;, 170, 1, &#39;2022-11-02 20:44:14&#39;);INSERT INTO &#96;student&#96; VALUES (2, &#39;学生2&#39;, 2, &#39;北京&#39;, 180, 2, &#39;2022-11-02 20:44:16&#39;);INSERT INTO &#96;student&#96; VALUES (3, &#39;变成派大星&#39;, 3, &#39;京东&#39;, 185, 3, &#39;2022-11-02 20:44:19&#39;);INSERT INTO &#96;student&#96; VALUES (4, &#39;学生4&#39;, 4, &#39;联通&#39;, 190, 4, &#39;2022-11-02 20:44:25&#39;);</code></pre></div></figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>上面的SQL 我们已经创建好基本的数据 在验证之前 先带着几个问题</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a517883c2f734ed9aad32fe69341e5b2~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><p>我们先从上往下进行验证</p><h2 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h2><p>写在前面：我很早之前就听说过数据库的最左匹配原则，当时是通过各大博客论坛了解的，但是这些博客的局限性在于它们对最左匹配原则的描述就像一些数学定义一样，往往都是列出123点，满足这123点就能匹配上索引，否则就不能。 最左匹配原则就是指在联合索引中，如果你的 SQL 语句中用到了联合索引中的最左边的索引，那么这条 SQL 语句就可以利用这个联合索引去进行匹配，我们上面建立了联合索引 可以用来测试最左匹配原则 <code>sname</code>, <code>s_code</code>, <code>address</code></p><p>请看下面SQL语句 进行思考 是否会走索引</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">-- 联合索引 sname,s_code,address1、select create_time from student where sname &#x3D; &quot;变成派大星&quot;  -- 会走索引吗？2、select create_time from student where s_code &#x3D; 1   -- 会走索引吗？3、select create_time from student where address &#x3D; &quot;上海&quot;  -- 会走索引吗？4、select create_time from student where address &#x3D; &quot;上海&quot; and s_code &#x3D; 1 -- 会走索引吗？5、select create_time from student where address &#x3D; &quot;上海&quot; and sname &#x3D; &quot;变成派大星&quot;  -- 会走索引吗？6、select create_time from student where sname &#x3D; &quot;变成派大星&quot; and address &#x3D; &quot;上海&quot;  -- 会走索引吗？7、select create_time from student where sname &#x3D; &quot;变成派大星&quot; and s_code &#x3D; 1 and address &#x3D; &quot;上海&quot;  -- 会走索引吗？</code></pre></div></figure><p>凭你的经验 哪些会使用到索引呢 ？ 可以先思考一下 在心中记下数字</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/783520d8f38b4e259e8f6d7b65a05103~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><p><strong>走索引例子</strong></p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">EXPLAIN  select create_time from student where sname &#x3D; &quot;变成派大星&quot;  -- 会走索引吗？</code></pre></div></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d253165cfba04252aa4c4a219b697a81~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><p><strong>未走索引例子</strong></p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">EXPLAIN select create_time from student where address &#x3D; &quot;上海&quot; and s_code &#x3D; 1 -- 会走索引吗？</code></pre></div></figure><p>走的全表扫描 rows &#x3D; 4 <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9395730bd49645f1848278ff1d7d2467~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"> 如果不知道<code>EXPLAIN</code> 是什么的 或者看不懂分析出来的数据的话 建议去看看另一篇文章<a href="https://juejin.cn/post/7161254854571065375" title="https://juejin.cn/post/7161254854571065375">分析命令EXPLAIN超详解</a></p><p>如果你内心的答案没有全部说对就接着往下看</p><p>最左匹配原则顾名思义：最左优先，以最左边的为起点任何连续的索引都能匹配上。<strong>同时遇到范围查询(&gt;、&lt;、between、like)就会停止匹配</strong>。<br>例如：s_code &#x3D; 2 如果建立(<code>sname</code>, <code>s_code</code>)顺序的索引，是匹配不到(<code>sname</code>, <code>s_code</code>)索引的;</p><p>但是如果查询条件是sname &#x3D; “变成派大星” and s_code &#x3D; 2或者a&#x3D;1(又或者是s_code &#x3D; 2 and sname &#x3D; “变成派大星” )就可以，<strong>因为优化器会自动调整<code>sname</code>, <code>s_code</code>的顺序</strong>。再比如sname &#x3D; “变成派大星” and s_code &gt; 1 and address &#x3D; “上海” <code>address是用不到索引的</code>，因为s_code字段是一个范围查询，它之后的字段会停止匹配。</p><p>不带范围查询 索引使用类型 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62cf1fbb4d694a32b1374a7621259924~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><p>带范围使用类型</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a8bf03bef225405b83de31f9ffcdd1af~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><p>根据上一篇文章的讲解 可以明白 ref 和range的含义 级别还是相差很多的</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd7c90f9067344fdaa91724d0f6882f1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>为什么左链接一定要遵循最左缀原则呢？</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>看过一个比较好玩的回答</p><blockquote><p>你可以认为联合索引是闯关游戏的设计<br>例如你这个联合索引是state&#x2F;city&#x2F;zipCode<br>那么state就是第一关 city是第二关， zipCode就是第三关<br>你必须匹配了第一关，才能匹配第二关，匹配了第一关和第二关，才能匹配第三关</p></blockquote><p>这样描述不算完全准确 但是确实是这种思想</p><p>要想理解联合索引的最左匹配原则，先来理解下索引的底层原理。索引的底层是一颗B+树，那么联合索引的底层也就是一颗B+树，只不过联合索引的B+树节点中存储的是键值。由于构建一棵B+树只能根据一个值来确定索引关系，所以数据库依赖联合索引最左的字段来构建 文字比较抽象 我们看一下</p><p>加入我们建立 A,B 联合索引 他们在底层储存是什么样子呢？</p><ul><li>橙色代表字段 A</li><li>浅绿色 代表字段B</li></ul><p>图解： <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a35b2ec784eb48109fe2916eade3c248~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><p>我们可以看出几个特点</p><ul><li>A 是有顺序的 1，1，2，2，3，4</li><li>B 是没有顺序的 1，2，1，4，1，2 这个是散列的</li><li>如果A是等值的时候 B是有序的 例如 （1，1），（1，2） 这里的B有序的 （2，1）,(2,4) B 也是有序的</li></ul><p>这里应该就能看出 如果没有A的支持 B的索引是散列的 不是连续的</p><p>再细致一点 我们重新创建一个表</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">DROP TABLE IF EXISTS &#96;leftaffix&#96;;CREATE TABLE &#96;leftaffix&#96;  (  &#96;a&#96; int(11) NOT NULL AUTO_INCREMENT,  &#96;b&#96; int(11) NULL DEFAULT NULL,  &#96;c&#96; int(11) NULL DEFAULT NULL,  &#96;d&#96; int(11) NULL DEFAULT NULL,  &#96;e&#96; varchar(11) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,  PRIMARY KEY (&#96;a&#96;) USING BTREE,  INDEX &#96;联合索引&#96;(&#96;b&#96;, &#96;c&#96;, &#96;d&#96;) USING BTREE) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 8 CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Dynamic; -- ------------------------------ Records of leftaffix-- ----------------------------INSERT INTO &#96;leftaffix&#96; VALUES (1, 1, 1, 1, &#39;1&#39;);INSERT INTO &#96;leftaffix&#96; VALUES (2, 2, 2, 2, &#39;2&#39;);INSERT INTO &#96;leftaffix&#96; VALUES (3, 3, 2, 2, &#39;3&#39;);INSERT INTO &#96;leftaffix&#96; VALUES (4, 3, 1, 1, &#39;4&#39;);INSERT INTO &#96;leftaffix&#96; VALUES (5, 2, 3, 5, &#39;5&#39;);INSERT INTO &#96;leftaffix&#96; VALUES (6, 6, 4, 4, &#39;6&#39;);INSERT INTO &#96;leftaffix&#96; VALUES (7, 8, 8, 8, &#39;7&#39;);SET FOREIGN_KEY_CHECKS &#x3D; 1;</code></pre></div></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39277837f4fb4f8d8f4707ae5a597880~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><blockquote><p>在创建索引树的时候会对数据进行排序 根据最左缀原则 会先通过 B 进行排序 也就是 如果出现值相同就 根据 C 排序 如果 C相同就根据D 排序 排好顺序之后就是如下图：</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/311f0f59b47141a185b466f26df0d2e0~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><blockquote><p>索引的生成就会根据图二的顺序进行生成 我们看一下 生成后的树状数据是什么样子</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb22bb31c6f14d3683164388042bc0f1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><blockquote><p>解释一些这个树状图 首先根据图二的排序 我们知道顺序 是 1111a 2222b 所以 在第三层 我们可以看到 1111a 在第一层 2222b在第二层 因为 111 &lt; 222 所以 111 进入第二层 然后得出第一层</p></blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5393546a6d59417388538798c34ca04f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><p>简化一下就是这个样子</p><p>但是这种顺序是相对的。这是因为MySQL创建联合索引的规则是首先会对联合索引的最左边<code>第一个字段排序</code>，在第一个字段的排序基础上，然后在对第二个字段进行排序。所以B&#x3D;2这种查询条件没有办法利用索引。</p><p>看到这里还可以明白一个道理 为什么我们建立索引的时候不推荐建立在经常改变的字段 因为这样的话我们的索引结构就要跟着你的改变而改动 所以很消耗性能</p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>前提 如果创建 b,c,d 联合索引面</p><ul><li>如果 我where 后面的条件是<code>c = 1 and d = 1</code>为什么不能走索引呢 如果没有b的话 你查询的值相当于 <code>*11</code> 我们都知道<code>*</code>是所有的意思也就是我能匹配到所有的数据</li><li>如果 我 where 后面是 <code>b = 1 and d =1</code> 为什么会走索引呢？ 你等于查询的数据是 <code>1*1</code> 我可以通过前面 1 进行索引匹配 所以就可以走索引</li><li>最左缀匹配原则的最重要的就是 第一个字段</li></ul><p>我们接着看下一个失效场景</p><h2 id="select"><a href="#select" class="headerlink" title="select *"></a>select *</h2><h3 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h3><p>首先提出问题 <code>select *</code> 一定会索引失效吗？</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>如果你的心里答案是 会失效那就接着往下看</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f81456c6434c4beda1388db375956a17~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><p>细心的同学能够发现 即便我使用了select * 依然会走索引 这是为什么呢？</p><p>首先我们在上一个验证中创建了联合索引 我们使用B&#x3D;1 会走索引</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c32c8aa321f3458b95a00ae04ec8c37b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d5e676c05644c1aaaf62a5f214354b3~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><p>也就是 Select * 在一些情况下是会走索引的 那么什么时候不会走索引呢</p><blockquote><p>经过测试 在查询返回结果集大约总数据的25%就不会走索引了 进而全表扫描 这里也有一个知识点 也就是为什么范围查找会索引失效的原因</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/641cc7d7b0ad4d04aa9417f721ca7be1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><p>上图就是索引失效的情况</p><p>范围查找也不是一定会索引失效 下面情况就会索引生效就是 级别低 生效的原因是因为缩小了范围</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05fab88741414b70896dedc185d6a3ff~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><h3 id="小总结-1"><a href="#小总结-1" class="headerlink" title="小总结"></a>小总结</h3><ul><li>select * 只有在返回结果集数量大于总结果集的25% 就会造成索引失效 如果小于 不会造成索引失效但是会降低索引的效率</li><li>范围查找有概率索引失效但是 但是在特定的情况下会生效 范围小就会使用 也可以理解为 返回结果集小就会使用索引</li></ul><h2 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h2><p>使用在Select 后面使用函数可以使用索引 但是下面这种做法就不能</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48f8fee5fda042b4a21ba190a68dbca2~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b22c7170e6bd4c9084e6f0dc01521412~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><p>因为索引保存的是索引字段的原始值，而不是经过函数计算后的值，自然就没办法走索引了。</p><p>不过，从 MySQL 8.0 开始，索引特性增加了函数索引，即可以针对函数计算后的值建立一个索引，也就是说该索引的值是函数计算后的值，所以就可以通过扫描索引来查询数据。</p><p>这种写法我没使用过 感觉情况比较少 也比较容易注意到这种写法</p><h2 id="计算操作"><a href="#计算操作" class="headerlink" title="计算操作"></a>计算操作</h2><p>这个情况和上面一样 之所以会导致索引失效是因为改变了索引原来的值 在树中找不到对应的数据只能全表扫描</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c4ce2c6583a4107aab778669bf1b775~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"> 因为索引保存的是索引字段的原始值，而不是 b - 1 表达式计算后的值，所以无法走索引，只能通过把索引字段的取值都取出来，然后依次进行表达式的计算来进行条件判断，因此采用的就是全表扫描的方式。</p><p>下面这种计算方式就会使用索引</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab31b17d52f44d4297c1a10248c97f33~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><p>Java比较熟悉的可能会有点疑问，这种对索引进行简单的表达式计算，在代码特殊处理下，应该是可以做到索引扫描的，比方将 b - 1 &#x3D; 6 变成 b &#x3D; 6 - 1。 是的，是能够实现，但是 MySQL 还是偷了这个懒，没有实现。</p><h3 id="小总结-2"><a href="#小总结-2" class="headerlink" title="小总结"></a>小总结</h3><p>总而言之 言而总之 只要是影响到索引列的值 索引就是失效</p><h2 id="Like"><a href="#Like" class="headerlink" title="Like %"></a>Like %</h2><p>这个真的是难受哦 因为经常使用这个 所以还是要小心点 在看为什么失效之前 我们先看一下 Like % 的解释</p><ol><li><strong>%百分号通配符:</strong> 表示任何字符出现任意次数(可以是0次).</li><li><strong>_下划线通配符:</strong> 表示只能匹配单个字符,不能多也不能少,就是一个字符.</li><li><strong>like操作符:</strong> LIKE作用是指示mysql后面的搜索模式是利用通配符而不是直接相等匹配进行比较.</li></ol><p><strong>注意:</strong> 如果在使用like操作符时,后面的没有使用通用匹配符效果是和&#x3D;一致的,</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">SELECT * FROM products WHERE products.prod_name like &#39;1000&#39;;</code></pre></div></figure><p>2.匹配包含”Li”的记录(包括记录”Li”) :</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">SELECT* FROM products WHERE products.prod_name like &#39;%Li%&#39;;</code></pre></div></figure><p>3.匹配以”Li”结尾的记录(包括记录”Li”,不包括记录”Li “,也就是Li后面有空格的记录,这里需要注意)</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">SELECT * FROM products WHERE products.prod_name like &#39;%Li&#39;;</code></pre></div></figure><p>在左不走 在右走</p><p><code>右：</code> 虽然走 但是索引级别比较低主要是模糊查询 范围比较大 所以索引级别就比较低 <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0fd95c00a9f44ffbed872907e23bd76~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><p><code>左：</code> 这个范围非常大 所以没有使用索引的必要了 这个可能不是很好优化 还好不是一直拼接上面的</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/183762e539b04420b6db1acc4a7cabbb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><h3 id="小总结-3"><a href="#小总结-3" class="headerlink" title="小总结"></a>小总结</h3><p>索引的时候和查询范围关系也很大 范围过大造成索引没有意义从而失效的情况也不少</p><h2 id="使用Or导致索引失效"><a href="#使用Or导致索引失效" class="headerlink" title="使用Or导致索引失效"></a>使用Or导致索引失效</h2><p>这个原因就更简单了</p><p>在 WHERE 子句中，如果在 OR 前的条件列是索引列，而在 OR 后的条件列不是索引列，那么索引会失效 举个例子，比如下面的查询语句，b 是主键，e 是普通列，从执行计划的结果看，是走了全表扫描。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fe15263f1414f058690cb11a02fdbbe~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>这个的优化方式就是 在Or的时候两边都加上索引</p><p>就会使用索引 避免全表扫描 <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e2924e8c883046a793416a7e9f9307e4~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><h2 id="in使用不当"><a href="#in使用不当" class="headerlink" title="in使用不当"></a>in使用不当</h2><p>首先使用In 不是一定会造成全表扫描的 <strong>IN肯定会走索引，但是当IN的取值范围较大时会导致索引失效，走全表扫描</strong></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c6239288d63424f97463355bd4c459c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a515623c61a403b86af444c7db46fa9~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><p>in 在结果集 大于30%的时候索引失效</p><h2 id="not-in-和-In的失效场景相同"><a href="#not-in-和-In的失效场景相同" class="headerlink" title="not in 和 In的失效场景相同"></a>not in 和 In的失效场景相同</h2><h2 id="order-By"><a href="#order-By" class="headerlink" title="order By"></a>order By</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/664a7329241840e888d5569d4b0e3475~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"> 这一个主要是Mysql 自身优化的问题 我们都知道OrderBy 是排序 那就代表我需要对数据进行排序 如果我走索引 索引是排好序的 但是我需要回表 消耗时间 另一种 我直接全表扫描排序 不用回表 也就是</p><ul><li>走索引 + 回表</li><li>不走索引 直接全表扫描</li></ul><p>Mysql 认为直接全表扫面的速度比 回表的速度快所以就直接走索引了 在Order By 的情况下 走全表扫描反而是更好的选择</p><h2 id="子查询会走索引吗"><a href="#子查询会走索引吗" class="headerlink" title="子查询会走索引吗"></a>子查询会走索引吗</h2><p>答案是会 但是使用不好就不会</p><h2 id="大总结"><a href="#大总结" class="headerlink" title="大总结"></a>大总结</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f7104ac9d684ce3b4fe43e97b6afaf2~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="图片.png"></p><ul><li>如果你是直接跳到这里 看看文章有多长 <code>建议收藏</code></li><li>如果你一步步看到这里 感觉有点帮助 <code>赞赞来一个</code></li><li>如果感觉文章有问题 建议评论区指出 <code>会修正</code></li></ul><p>周五愉快 文章完结🥰</p><p>持续更新SQL相关系列 可追更 不可催更</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bed95998e47144b4a49e8a42246ece50~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="0bd2663ecc3e21c3a51f382cec4bb8b6.gif"></p><p><em><strong>本文正在参加<a href="https://juejin.cn/post/7160601544600567845" title="https://juejin.cn/post/7160601544600567845">「技术专题19期 漫谈数据库技术」</a>活动</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转载</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于 Hexo 从零开始搭建个人博客</title>
    <link href="/2022/11/11/%E5%9F%BA%E4%BA%8E%20Hexo%20%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/11/11/%E5%9F%BA%E4%BA%8E%20Hexo%20%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<hr><blockquote><p>阅读本篇前，请先阅读前几篇文章：<br><a href="https://tzy1997.com/articles/hexo1601/">基于 Hexo 从零开始搭建个人博客（一）</a><br><a href="https://tzy1997.com/articles/hexo1602/">基于 Hexo 从零开始搭建个人博客（二）</a><br><a href="https://tzy1997.com/articles/hexo1603/">基于 Hexo 从零开始搭建个人博客（三）</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><a href="https://tzy1997.com/articles/hexo1604/#%E5%89%8D%E8%A8%80" title="前言"></a>前言</h2><ol><li>博客搭建过程遇到任何问题，优先在本页面搜索，检查是否已经有该配置教程。</li><li>遇到问题可以优先在文章评论区留言，注意留言时请填写正确的邮箱以确保能收到站长的回复。</li><li>实在解决不了的问题可添加博主 Wechat ，添加好友时请备注自己的姓名+专业，如 张三 计算机科学与技术。</li></ol><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a><a href="https://tzy1997.com/articles/hexo1604/#Front-matter" title="Front-matter"></a>Front-matter</h2><p><strong>Front-matter</strong> 是 <strong>markdown</strong> 文件最上方以<code>---</code>分隔的区域，用于指定个别档案的变数。</p><ul><li>Page Front-matter 用于页面配置</li><li>Post Front-matter 用于文章页配置</li></ul><p>如果标注可选的参数，可根据自己需要添加，不用全部都写在markdown里</p><h3 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a><a href="https://tzy1997.com/articles/hexo1604/#Page-Front-matter" title="Page Front-matter"></a>Page Front-matter</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">---title:date:updated:type:comments:description:keywords:top_img:mathjax:katex:aside:aplayer:highlight_shrink:---</code></pre></div></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标籤、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table><h3 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a><a href="https://tzy1997.com/articles/hexo1604/#Post-Front-matter" title="Post Front-matter"></a>Post Front-matter</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">---title:date:updated:tags:categories:keywords:description:top_img:comments:cover:toc:toc_number:toc_style_simple:copyright:copyright_author:copyright_author_href:copyright_url:copyright_info:mathjax:katex:aplayer:highlight_shrink:aside:---</code></pre></div></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标籤</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><blockquote><p>注意：我的博客根目录路径为 【G:&#x2F;hexo-blog&#x2F;blog-demo】，下文所说的根目录都是此路径，将用<code>[BlogRoot]</code>代替。如果不清楚根目录路径，请回到教程 <a href="https://tzy1997.com/articles/hexo1602/">基于 Hexo 从零开始搭建个人博客（二）</a>，查看你执行<code>hexo init xxx</code>这条命令时所选择的路径，例如我选择的路径是【G:&#x2F;hexo-blog】，我的博客根目录即为【G:&#x2F;hexo-blog&#x2F;xxx】。</p></blockquote><h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a><a href="https://tzy1997.com/articles/hexo1604/#%E6%A0%87%E7%AD%BE%E9%A1%B5" title="标签页"></a>标签页</h2><ol><li><p>前往你的Hexo博客根目录，打开cmd命令窗口执行<code>hexo new page tags</code>。</p></li><li><p>在【BlogRoot&#x2F;source&#x2F;】会生成一个含有<code>index.md</code>文件的<code>tags</code>文件夹。</p><p><a href="https://bu.dusays.com/2022/05/29/62937c8344bbb.jpg"><img src="https://bu.dusays.com/2022/01/14/1ff50a00bd75c.gif"></a></p></li><li><p>修改【BlogRoot&#x2F;source&#x2F;tags&#x2F;index.md】，添加<code>type: &quot;tags&quot;</code>。</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">---title: tagsdate: 2022-05-29 21:42:56type: &quot;tags&quot;---</code></pre></div></figure></li></ol><h2 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a><a href="https://tzy1997.com/articles/hexo1604/#%E5%88%86%E7%B1%BB%E9%A1%B5" title="分类页"></a>分类页</h2><ol><li><p>前往你的Hexo博客根目录，打开cmd命令窗口执行<code>hexo new page categories</code>。</p></li><li><p>在【BlogRoot&#x2F;source&#x2F;】会生成一个含有<code>index.md</code>文件的<code>categories</code>文件夹。</p><p><a href="https://bu.dusays.com/2022/05/29/62937c8627deb.jpg"><img src="https://bu.dusays.com/2022/01/14/1ff50a00bd75c.gif"></a></p></li><li><p>修改【BlogRoot&#x2F;source&#x2F;categories&#x2F;index.md】，添加<code>type: &quot;categories&quot;</code>。</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">---title: categoriesdate: 2022-05-29 21:57:07type: &quot;categories&quot;---</code></pre></div></figure></li></ol><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a><a href="https://tzy1997.com/articles/hexo1604/#%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5" title="友情链接"></a>友情链接</h2><h3 id="创建友情链接页面"><a href="#创建友情链接页面" class="headerlink" title="创建友情链接页面"></a><a href="https://tzy1997.com/articles/hexo1604/#%E5%88%9B%E5%BB%BA%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5%E9%A1%B5%E9%9D%A2" title="创建友情链接页面"></a>创建友情链接页面</h3><ol><li><p>前往你的Hexo博客根目录，打开cmd命令窗口执行<code>hexo new page link</code>。</p></li><li><p>在【BlogRoot&#x2F;source&#x2F;】会生成一个含有<code>index.md</code>文件的<code>link</code>文件夹。</p><p><a href="https://bu.dusays.com/2022/05/29/629385dc3918c.jpg"><img src="https://bu.dusays.com/2022/01/14/1ff50a00bd75c.gif"></a></p></li><li><p>修改【BlogRoot&#x2F;source&#x2F;link&#x2F;index.md】，添加<code>type: &quot;link&quot;</code>。</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">---title: linkdate: 2022-05-29 22:03:35type: &quot;link&quot;---</code></pre></div></figure></li></ol><h3 id="友情链接页面添加友链信息"><a href="#友情链接页面添加友链信息" class="headerlink" title="友情链接页面添加友链信息"></a><a href="https://tzy1997.com/articles/hexo1604/#%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0%E5%8F%8B%E9%93%BE%E4%BF%A1%E6%81%AF" title="友情链接页面添加友链信息"></a>友情链接页面添加友链信息</h3><p>前往Hexo博客目录（【BlogRoot&#x2F;source&#x2F;_data】）创建一个文件<code>link.yml</code>（如果沒有 _data 文件夹，请自行创建）。</p><p><a href="https://bu.dusays.com/2022/05/29/629385e182b48.jpg"><img src="https://bu.dusays.com/2022/01/14/1ff50a00bd75c.gif"></a></p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">- class_name: 友情链接  class_desc: 那些人，那些事  link_list:    - name: 唐志远の博客      link: https:&#x2F;&#x2F;tzy1997.com&#x2F;      avatar: https:&#x2F;&#x2F;bu.dusays.com&#x2F;2022&#x2F;01&#x2F;14&#x2F;cd5ffd485f867.jpg      descr: 古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志。- class_name: 网站  class_desc: 值得推荐的网站  link_list:    - name: Twitter      link: https:&#x2F;&#x2F;twitter.com&#x2F;      avatar: https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;05&#x2F;14&#x2F;5VyHPQqR6LWF39a.png      descr: 社交分享平台</code></pre></div></figure><p><code>class_name</code>和<code>class_desc</code>支持 html 格式，如不需要，也可以留空。</p><p>如果你想设置成本站友链页的效果，请参考教程：<a href="https://tzy1997.com/articles/0xiipgum/">基于Butterfly的外挂标签引入</a> 。</p><h2 id="图库"><a href="#图库" class="headerlink" title="图库"></a><a href="https://tzy1997.com/articles/hexo1604/#%E5%9B%BE%E5%BA%93" title="图库"></a>图库</h2><p>图库页面只是普通的页面，你只需要<code>hexo new page xxxxx</code>创建你的页面就行。</p><p>然后使用标签外挂 <a href="https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A%E5%9C%96%E5%BA%AB">galleryGroup</a>，具体用法请查看对应的内容。</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">&lt;div class&#x3D;&quot;gallery-group-main&quot;&gt;&#123;% galleryGroup &#39;壁纸&#39; &#39;收藏的一些壁纸&#39; &#39;&#x2F;Gallery&#x2F;wallpaper&#39; https:&#x2F;&#x2F;bu.dusays.com&#x2F;2021&#x2F;03&#x2F;06&#x2F;38a2c5cd8b44e.jpg %&#125;&#123;% galleryGroup &#39;漫威&#39; &#39;关于漫威的图片&#39; &#39;&#x2F;Gallery&#x2F;marvel&#39; https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;8t97aVlp4hgyBGu.jpg %&#125;&#123;% galleryGroup &#39;OH MY GIRL&#39; &#39;关于OH MY GIRL的图片&#39; &#39;&#x2F;Gallery&#x2F;ohmygirl&#39; https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;hOqbQ3BIwa6KWpo.jpg %&#125;&lt;&#x2F;div&gt;</code></pre></div></figure><p><img src="https://bu.dusays.com/2022/01/14/1ff50a00bd75c.gif" alt="Group Image Gallery"></p><p>壁纸</p><p>收藏的一些壁纸</p><p><a href="https://tzy1997.com/Gallery/wallpaper"></a></p><p><img src="https://bu.dusays.com/2022/01/14/1ff50a00bd75c.gif" alt="Group Image Gallery"></p><p>漫威</p><p>关于漫威的图片</p><p><a href="https://tzy1997.com/Gallery/marvel"></a></p><p><img src="https://bu.dusays.com/2022/01/14/1ff50a00bd75c.gif" alt="Group Image Gallery"></p><p>OH MY GIRL</p><p>关于OH MY GIRL的图片</p><p><a href="https://tzy1997.com/Gallery/ohmygirl"></a></p><h3 id="子页面"><a href="#子页面" class="headerlink" title="子页面"></a><a href="https://tzy1997.com/articles/hexo1604/#%E5%AD%90%E9%A1%B5%E9%9D%A2" title="子页面"></a>子页面</h3><p>子页面也是普通的页面，你只需要<code>hexo new page xxxxx</code>创建你的页面就行。</p><p>然后使用标签外挂 <a href="https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A">gallery</a>，具体用法请查看对应的内容。</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">&#123;% gallery %&#125;![](https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;Fze9jchtnyJXMHN.jpg)![](https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;ryLVePaqkYm4TEK.jpg)![](https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;gEy5Zc1Ai6VuO4N.jpg)![](https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;d6QHbytlSYO4FBG.jpg)![](https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;6nepIJ1xTgufatZ.jpg)![](https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;E7Jvr4eIPwUNmzq.jpg)![](https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;mh19anwBSWIkGlH.jpg)![](https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;2tu9JC8ewpBFagv.jpg)&#123;% endgallery %&#125;</code></pre></div></figure><p>如果你想要使用 <code>/photo/ohmygirl</code> 这样的链接显示你的图片内容</p><p>你可以把创建好的 <code>ohmygirl</code>整个文件夹移到 <code>photo</code>文件夹里去</p><h2 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a><a href="https://tzy1997.com/articles/hexo1604/#404%E9%A1%B5%E9%9D%A2" title="404页面"></a>404页面</h2><p>主題內置了一个简单的404页面，可在设置中开放。</p><blockquote><p>如需本地预览，请访问 <a href="http://localhost:4000/404.html">http://localhost:4000/404.html</a></p></blockquote><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">error_404:  enable: true  subtitle: &quot;页面沒有找到&quot;  background: </code></pre></div></figure><p>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来自 <a href="https://tzy1997.com/">唐志远の博客</a>！</p><p>打赏</p><ul><li><p><a href="https://bu.dusays.com/2022/05/17/6283c3f127558.jpg"><img src="https://bu.dusays.com/2022/05/17/6283c3f127558.jpg" alt="wechat"></a></p><p>wechat</p></li><li><p><a href="https://bu.dusays.com/2022/05/17/6283c3ee6d872.jpg"><img src="https://bu.dusays.com/2022/05/17/6283c3ee6d872.jpg" alt="alipay"></a></p><p>alipay</p></li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转载</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 系统模块常用方法</title>
    <link href="/2022/11/11/python%E4%B8%ADsys%EF%BC%8Cos%EF%BC%8Ctime%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/11/11/python%E4%B8%ADsys%EF%BC%8Cos%EF%BC%8Ctime%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h2><h3 id="sys-argv-实现从程序外部向程序传递参数。"><a href="#sys-argv-实现从程序外部向程序传递参数。" class="headerlink" title="sys.argv: 实现从程序外部向程序传递参数。"></a>sys.argv: 实现从程序外部向程序传递参数。</h3><p>位置参数argv[0]代表py文件本身，运行方法 python xx.py 参数1，参数2 。。</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">self <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>name <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>age <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span> self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age</code></pre></div></figure><h3 id="sys-getdefaultencoding-获取系统当前编码，一般默认为ascii。"><a href="#sys-getdefaultencoding-获取系统当前编码，一般默认为ascii。" class="headerlink" title="sys.getdefaultencoding(): 获取系统当前编码，一般默认为ascii。"></a>sys.getdefaultencoding(): 获取系统当前编码，一般默认为ascii。</h3><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> sys<span class="token punctuation">.</span>getdefaultencoding<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div></figure><h3 id="sys-setdefaultencoding-设置系统默认编码，"><a href="#sys-setdefaultencoding-设置系统默认编码，" class="headerlink" title="sys.setdefaultencoding(): 设置系统默认编码，"></a>sys.setdefaultencoding(): 设置系统默认编码，</h3><p>执行dir（sys）时不会看到这个方法，在解释器中执行不通过，<br>可以先执行reload(sys)，在执行 setdefaultencoding(‘utf8’)，<br>此时将系统默认编码设置为utf8。（python2.7中可能需要这么做）</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">reload</span><span class="token punctuation">(</span>sys<span class="token punctuation">)</span>sys<span class="token punctuation">.</span>setdefaultencoding<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span></code></pre></div></figure><h3 id="sys-path-获取指定模块搜索路径的字符串集合"><a href="#sys-path-获取指定模块搜索路径的字符串集合" class="headerlink" title="sys.path: 获取指定模块搜索路径的字符串集合"></a>sys.path: 获取指定模块搜索路径的字符串集合</h3><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">sys<span class="token punctuation">.</span>path</code></pre></div></figure><h3 id="sys-platform-获取当前系统平台。"><a href="#sys-platform-获取当前系统平台。" class="headerlink" title="sys.platform: 获取当前系统平台。"></a>sys.platform: 获取当前系统平台。</h3><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> sys<span class="token punctuation">.</span>platform</code></pre></div></figure><h3 id="sys-exit"><a href="#sys-exit" class="headerlink" title="sys.exit()"></a>sys.exit()</h3><p>功能：执行到主程序末尾，解释器自动退出，但是如果需要中途退出程序，<br>可以调用sys.exit函数，带有一个可选的整数参数返回给调用它的程序，<br>表示你可以在主程序中捕获对sys.exit的调用。（0是正常退出，其他为异常）’’’</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">'第%s次:'</span> <span class="token operator">%</span> i<span class="token punctuation">,</span> i    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'第五次退出'</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre></div></figure><h2 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h2><h3 id="1-os-name-——判断现在正在实用的平台，Windows-返回-‘nt’-Linux-返回’posix’"><a href="#1-os-name-——判断现在正在实用的平台，Windows-返回-‘nt’-Linux-返回’posix’" class="headerlink" title="1. os.name()——判断现在正在实用的平台，Windows 返回 ‘nt’; Linux 返回’posix’"></a>1. os.name()——判断现在正在实用的平台，Windows 返回 ‘nt’; Linux 返回’posix’</h3><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> os<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div></figure><h3 id="2-os-getcwd-——得到当前工作的目录。"><a href="#2-os-getcwd-——得到当前工作的目录。" class="headerlink" title="2. os.getcwd()——得到当前工作的目录。"></a>2. os.getcwd()——得到当前工作的目录。</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">print os.getcwd()</code></pre></div></figure><h3 id="3-os-listdir-——指定所有目录下所有的文件和目录名。"><a href="#3-os-listdir-——指定所有目录下所有的文件和目录名。" class="headerlink" title="3. os.listdir()——指定所有目录下所有的文件和目录名。"></a>3. os.listdir()——指定所有目录下所有的文件和目录名。</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">print os.listdir(&#39;.&#39;)</code></pre></div></figure><h3 id="4-os-remove-——删除指定文件"><a href="#4-os-remove-——删除指定文件" class="headerlink" title="4. os.remove()——删除指定文件"></a>4. os.remove()——删除指定文件</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">os.remove(&#39;aaa.txt&#39;)</code></pre></div></figure><h3 id="5-os-rmdir-——删除指定目录"><a href="#5-os-rmdir-——删除指定目录" class="headerlink" title="5. os.rmdir()——删除指定目录"></a>5. os.rmdir()——删除指定目录</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">os.rmdir(&#39;C:&#x2F;&#x2F;Users&#x2F;xiaoxinsoso&#x2F;Desktop&#x2F;aaa&#39;)</code></pre></div></figure><h3 id="6-os-mkdir-——创建目录-注意：这样只能建立一层，要想递归建立可用：os-makedirs"><a href="#6-os-mkdir-——创建目录-注意：这样只能建立一层，要想递归建立可用：os-makedirs" class="headerlink" title="6. os.mkdir()——创建目录,注意：这样只能建立一层，要想递归建立可用：os.makedirs()"></a>6. os.mkdir()——创建目录,注意：这样只能建立一层，要想递归建立可用：os.makedirs()</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">os.makedirs(&#39;aaa&#x2F;aaa&#39;)</code></pre></div></figure><h3 id="7-os-path-isfile-——判断指定对象是否为文件。是返回True-否则False"><a href="#7-os-path-isfile-——判断指定对象是否为文件。是返回True-否则False" class="headerlink" title="7. os.path.isfile()——判断指定对象是否为文件。是返回True, 否则False"></a>7. os.path.isfile()——判断指定对象是否为文件。是返回True, 否则False</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">print os.path.isfile(&#39;ccc.txt&#39;)print os.path.isfile(&#39;aaa&#39;)</code></pre></div></figure><h3 id="8-os-path-isdir-——判断指定对象是否为目录。是True-否则False。例："><a href="#8-os-path-isdir-——判断指定对象是否为目录。是True-否则False。例：" class="headerlink" title="8. os.path.isdir()——判断指定对象是否为目录。是True, 否则False。例："></a>8. os.path.isdir()——判断指定对象是否为目录。是True, 否则False。例：</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">print os.path.isdir(&#39;aaa&#39;)print os.path.isdir(&#39;ccc.txt&#39;)</code></pre></div></figure><h3 id="9-os-path-exists-——检验指定的对象是否存在。是True-否则False-例："><a href="#9-os-path-exists-——检验指定的对象是否存在。是True-否则False-例：" class="headerlink" title="9. os.path.exists()——检验指定的对象是否存在。是True, 否则False.例："></a>9. os.path.exists()——检验指定的对象是否存在。是True, 否则False.例：</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">print os.path.exists(&#39;bbb&#39;)print os.path.exists(&#39;aaa&#39;)print os.path.exists(&#39;ccc.txt&#39;)</code></pre></div></figure><h3 id="10-os-path-split-——返回路径的目录和文件名。例："><a href="#10-os-path-split-——返回路径的目录和文件名。例：" class="headerlink" title="10. os.path.split()——返回路径的目录和文件名。例："></a>10. os.path.split()——返回路径的目录和文件名。例：</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">print os.path.split(&#39;C:&#x2F;&#x2F;Users&#x2F;xiaoxinsoso&#x2F;Desktop&#x2F;aaa&#x2F;ccc.txt&#39;)</code></pre></div></figure><h3 id="11-os-getcwd-——获得当前工作的目录"><a href="#11-os-getcwd-——获得当前工作的目录" class="headerlink" title="11. os.getcwd()——获得当前工作的目录"></a>11. os.getcwd()——获得当前工作的目录</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">print os.getcwd()</code></pre></div></figure><h3 id="12-os-system-——执行shell命令。"><a href="#12-os-system-——执行shell命令。" class="headerlink" title="12. os.system()——执行shell命令。"></a>12. os.system()——执行shell命令。</h3><p>注意：此处运行shell命令时，如果要调用python之前的变量，可以用如下方式：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">var &#x3D; 123os.environ[&#39;var&#39;] &#x3D; str(var) os.system(&#39;echo $var&#39;)os.system(&#39;dir&#39;)</code></pre></div></figure><h3 id="13-os-chdir-——改变目录到指定目录"><a href="#13-os-chdir-——改变目录到指定目录" class="headerlink" title="13. os.chdir()——改变目录到指定目录"></a>13. os.chdir()——改变目录到指定目录</h3><h3 id="14-os-path-getsize-——获得文件的大小，如果为目录，返回0"><a href="#14-os-path-getsize-——获得文件的大小，如果为目录，返回0" class="headerlink" title="14. os.path.getsize()——获得文件的大小，如果为目录，返回0"></a>14. os.path.getsize()——获得文件的大小，如果为目录，返回0</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">print os.path.getsize(&#39;ccc.txt&#39;)</code></pre></div></figure><h3 id="15-os-path-abspath-——获得绝对路径。例："><a href="#15-os-path-abspath-——获得绝对路径。例：" class="headerlink" title="15. os.path.abspath()——获得绝对路径。例："></a>15. os.path.abspath()——获得绝对路径。例：</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">print os.path.abspath(&#39;.&#39;)</code></pre></div></figure><h3 id="16-os-path-join-path-name-——连接目录和文件名。例："><a href="#16-os-path-join-path-name-——连接目录和文件名。例：" class="headerlink" title="16. os.path.join(path, name)——连接目录和文件名。例："></a>16. os.path.join(path, name)——连接目录和文件名。例：</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">print os.path.join(&#39;c:&#x2F;&#x2F;user&#x2F;xiaoxinsoso&#x2F;&#39;, &#39;wenjian.txt&#39;)</code></pre></div></figure><h3 id="17-os-path-basename-path-——返回文件名"><a href="#17-os-path-basename-path-——返回文件名" class="headerlink" title="17. os.path.basename(path)——返回文件名"></a>17. os.path.basename(path)——返回文件名</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">print os.path.basename(&#39;ccc.txt&#39;)</code></pre></div></figure><h3 id="18-os-path-dirname-path-——返回文件路径"><a href="#18-os-path-dirname-path-——返回文件路径" class="headerlink" title="18. os.path.dirname(path)——返回文件路径"></a>18. os.path.dirname(path)——返回文件路径</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">print os.path.dirname(&#39;C:&#x2F;&#x2F;Users&#x2F;xiaoxinsoso&#x2F;Desktop&#x2F;aaa&#x2F;ccc.txt&#39;)</code></pre></div></figure><h3 id="19-获得程序所在的实际目录"><a href="#19-获得程序所在的实际目录" class="headerlink" title="19. 获得程序所在的实际目录"></a>19. 获得程序所在的实际目录</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    print os.path.realpath(sys.argv[0])    print os.path.split(os.path.realpath(sys.argv[0]))    print os.path.split(os.path.realpath(sys.argv[0]))[0]</code></pre></div></figure><h2 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h2><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">ticks &#x3D; time.time()print &quot;当前时间戳为:&quot;, ticks</code></pre></div></figure><h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">localtime &#x3D; time.localtime(time.time())print &quot;本地时间为 :&quot;, localtime</code></pre></div></figure><h3 id="获取格式化的时间"><a href="#获取格式化的时间" class="headerlink" title="获取格式化的时间"></a>获取格式化的时间</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">localtime &#x3D; time.asctime(time.localtime(time.time()))print &quot;本地时间为 :&quot;, localtime</code></pre></div></figure><h3 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h3><h3 id="格式化成2017-01-22-16-36-27形式"><a href="#格式化成2017-01-22-16-36-27形式" class="headerlink" title="格式化成2017-01-22 16:36:27形式"></a>格式化成2017-01-22 16:36:27形式</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">print time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime())</code></pre></div></figure><h3 id="格式化成Sun-Jan-22-16-36-27-2017形式"><a href="#格式化成Sun-Jan-22-16-36-27-2017形式" class="headerlink" title="格式化成Sun Jan 22 16:36:27 2017形式"></a>格式化成Sun Jan 22 16:36:27 2017形式</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">print time.strftime(&quot;%a %b %d %H:%M:%S %Y&quot;, time.localtime())</code></pre></div></figure><h3 id="将格式字符串转换为时间戳"><a href="#将格式字符串转换为时间戳" class="headerlink" title="将格式字符串转换为时间戳"></a>将格式字符串转换为时间戳</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">a &#x3D; &quot;Sat Mar 28 22:24:24 2016&quot;print time.mktime(time.strptime(a, &quot;%a %b %d %H:%M:%S %Y&quot;))</code></pre></div></figure><h3 id="获取某月日历"><a href="#获取某月日历" class="headerlink" title="获取某月日历"></a>获取某月日历</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">cal &#x3D; calendar.month(2017, 1)print &quot;以下输出2016年1月份的日历:&quot;print cal</code></pre></div></figure><h2 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h2><h3 id="datetime类型时间"><a href="#datetime类型时间" class="headerlink" title="datetime类型时间"></a>datetime类型时间</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">now &#x3D; datetime.datetime.now()print nownow &#x3D; date time.datetime.now()yes_time &#x3D; now + date time.timedelta(days&#x3D;-1)    # 前一天的时间</code></pre></div></figure><h3 id="datetime转string"><a href="#datetime转string" class="headerlink" title="datetime转string"></a>datetime转string</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">strdatetime &#x3D; now.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)     strdatetime1&#x3D; now.strftime(&quot;%Y-%m-%d&quot;)     print strdatetimeprint strdatetime1</code></pre></div></figure><h3 id="string转datetime"><a href="#string转datetime" class="headerlink" title="string转datetime"></a>string转datetime</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">datetime1 &#x3D; datetime.datetime.strptime(strdatetime1, &quot;%Y-%m-%d&quot;)print datetime1</code></pre></div></figure><h3 id="datetime转时间戳"><a href="#datetime转时间戳" class="headerlink" title="datetime转时间戳"></a>datetime转时间戳</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">time_time &#x3D; time.mktime(datetime1.timetuple())print time_time</code></pre></div></figure><h3 id="时间戳转string"><a href="#时间戳转string" class="headerlink" title="时间戳转string"></a>时间戳转string</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">time1 &#x3D; time.strftime(&#39;%Y-%m-%d&#39;,time.localtime(time_time))print time1</code></pre></div></figure><h3 id="date转datetime"><a href="#date转datetime" class="headerlink" title="date转datetime"></a>date转datetime</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">date1 &#x3D; datetime.date(2012, 11, 19)date &#x3D; datetime.date.today()print dateprint datetime.datetime.strptime(str(date),&#39;%Y-%m-%d&#39;) #将date转换为str，在由str转换为datetimeprint datetime.datetime.strptime(str(date1),&#39;%Y-%m-%d&#39;) #将date转换为str，在由str转换为datetime</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转载</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask项目配置</title>
    <link href="/2022/11/11/%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%9A%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%20-%20Python%E6%A1%86%E6%9E%B6Flask%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%20-%20%E7%9F%A5%E4%BA%86%E4%BC%A0%E8%AF%BE/"/>
    <url>/2022/11/11/%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%9A%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%20-%20Python%E6%A1%86%E6%9E%B6Flask%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%20-%20%E7%9F%A5%E4%BA%86%E4%BC%A0%E8%AF%BE/</url>
    
    <content type="html"><![CDATA[<p>本教材由知了传课辛苦制作而成，仅供学习使用，请勿用于商业用途！如进行转载请务必注明出处！谢谢！</p><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><h2 id="一、设置为DEBUG模式："><a href="#一、设置为DEBUG模式：" class="headerlink" title="一、设置为DEBUG模式："></a>一、设置为DEBUG模式：</h2><p>默认情况下<code>flask</code>不会开启<code>DEBUG</code>模式，开启<code>DEBUG</code>模式后，flask会在每次保存代码的时候自动的重新载入代码，并且如果代码有错误，会在终端进行提示。<br><img src="https://www.zlkt.net/media/course/2UZz2JSDySff5o8CPeqPRN.png" alt="image.png"><br>如果一切正常，会在终端打印以下信息：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">*</span> Restarting <span class="token keyword">with</span> stat<span class="token operator">*</span> Debugger <span class="token keyword">is</span> active!<span class="token operator">*</span> Debugger pin code<span class="token punctuation">:</span> <span class="token number">294</span><span class="token operator">-</span><span class="token number">745</span><span class="token operator">-</span><span class="token number">044</span><span class="token operator">*</span> Running on http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token punctuation">:</span><span class="token number">9000</span><span class="token operator">/</span> <span class="token punctuation">(</span>Press CTRL<span class="token operator">+</span>C to quit<span class="token punctuation">)</span></code></pre></div></figure><p>需要注意的是，只能在开发环境下开启<code>DEBUG</code>模式，因为<code>DEBUG</code>模式会带来非常大的安全隐患。</p><h2 id="二、配置文件："><a href="#二、配置文件：" class="headerlink" title="二、配置文件："></a>二、配置文件：</h2><p><code>Flask</code>项目的配置，都是通过<code>app.config</code>对象来进行配置的。比如要配置一个项目的<code>SECRET_KEY</code>，那么可以使用<code>app.config[&#39;SECRET_KEY&#39;] = &quot;xxx&quot;</code>来进行设置，在<code>Flask</code>项目中，有四种方式进行项目的配置：</p><ol><li><p>直接硬编码：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"xxx"</span></code></pre></div></figure></li><li><p>因为<code>app.config</code>是<code>flask.config.Config</code>的实例，而<code>Config</code>类是继承自<code>dict</code>，因此可以通过<code>update</code>方法：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span>   DEBUG<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>   SECRET_KEY<span class="token operator">=</span><span class="token string">'...'</span><span class="token punctuation">)</span></code></pre></div></figure></li><li><p>如果你的配置项特别多，你可以把所有的配置项都放在一个模块中，然后通过加载模块的方式进行配置，假设有一个<code>settings.py</code>模块，专门用来存储配置项的，此时你可以通过<code>app.config.from_object()</code>方法进行加载，并且该方法既可以接收模块的的字符串名称，也可以模块对象：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 通过模块字符串</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span><span class="token string">'settings'</span><span class="token punctuation">)</span><span class="token comment"># 2. 通过模块对象</span><span class="token keyword">import</span> settingsapp<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>settings<span class="token punctuation">)</span></code></pre></div></figure></li><li><p>也可以通过另外一个方法加载，该方法就是<code>app.config.from_pyfile()</code>，该方法传入一个文件名，通常是以<code>.py</code>结尾的文件，但也不限于只使用<code>.py</code>后缀的文件：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_pyfile<span class="token punctuation">(</span><span class="token string">'settings.py'</span><span class="token punctuation">,</span>silent<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># silent=True表示如果配置文件不存在的时候不抛出异常，默认是为False，会抛出异常。</span></code></pre></div></figure></li></ol><p><code>Flask</code>项目内置了许多的配置项，所有的内置配置项，可以在<a href="https://flask.palletsprojects.com/en/2.0.x/config/">这里查看</a>。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转载</tag>
      
      <tag>Python</tag>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
